<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="fr"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://huguesgobet.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://huguesgobet.com/" rel="alternate" type="text/html" hreflang="fr" /><updated>2025-02-17T09:32:27+00:00</updated><id>https://huguesgobet.com/feed.xml</id><title type="html">Blog - Hugues Gobet</title><subtitle>Your Site Description
</subtitle><author><name>Hugues Gobet</name><email>hugues.gobet@gmail.com</email></author><entry xml:lang="fr"><title type="html">Journal de bord de l’apprentissage du Domain-Driven Design : Jour 5</title><link href="https://huguesgobet.com/ddd-logbook/2025-02-17" rel="alternate" type="text/html" title="Journal de bord de l’apprentissage du Domain-Driven Design : Jour 5" /><published>2025-02-17T08:00:00+00:00</published><updated>2025-02-17T08:00:00+00:00</updated><id>https://huguesgobet.com/fr/ddd-logbook/journal-de-bord-jour-cinq</id><content type="html" xml:base="https://huguesgobet.com/ddd-logbook/2025-02-17"><![CDATA[<p>Dans cet article, je vais aborder la notion de « Country » dans le cadre d’un <strong>Supporting Domain</strong> en prenant comme exemple un <strong>Domain Country</strong>. Je vais également détailler l’exposition d’une API permettant de récupérer les informations d’un pays et de vérifier son existence. Je commencerai par rappeler la définition d’un <strong>Supporting Subdomain</strong> ; ensuite je vous expliquerai comment le mettre en place pas à pas.</p>

<h2 id="supporting-subdomain-quest-ce-que-cest">Supporting Subdomain : qu’est-ce que c’est ?</h2>

<p>Comme son nom l’indique, un <strong>Supporting Subdomain</strong> est avant tout un Subdomain : il représente une partie du <strong>Domain</strong> qui peut être séparé en <strong>module</strong>. Dans un projet d’entreprise, une équipe distincte pourrait en être responsable. Un <strong>Subdomain</strong> peut parfaitement disposer de son propre <strong>Ubiquitous Language</strong> lorsqu’il appartient à un <strong>Bounded Context</strong> différent du <strong>Core Domain</strong>.</p>

<p>Bien qu’important pour le métier, le <strong>Supporting Subdomain</strong> l’est pourtant moins que le <strong>Core Domain</strong>. Il n’est pertinent de créer un <strong>Supporting Subdomain</strong> que s’il apporte une valeur spécifique ou répond à un besoin particulier.</p>

<p>Dans le cas de notre API de gestion de bouteilles de vins, j’ai créé un <strong>Domain Country</strong> pour séparer cette notion du <strong>Core Domain</strong> qui gère le <strong>Bottle Inventory</strong>. Cette séparation permet d’organiser le code dans deux <strong>Bounded Context</strong> distincts. De plus, ce <strong>Domain</strong> est essentiel pour pouvoir proposer une liste de pays lors de la création d’une bouteille, tout en s’assurant que le pays existe réellement. Toutefois, comme il reste moins crucial que le <strong>Core Domain</strong>, il correspond parfaitement à la définition d’un <strong>Supporting Subdomain</strong>.</p>

<h2 id="comment-mettre-en-place-le-domain">Comment mettre en place le Domain ?</h2>

<p>Dans cet article, je vais illustrer la mise en place du <strong>Domain</strong> à travers deux use cases. J’ai choisi de ne pas séparer ces cas en plusieurs parties, car ils sont assez répétitifs et ne représentent pas un véritable défi en terme de <strong>Domain-Driven Design (DDD)</strong>. Voici les deux scénarios que je vais aborder :</p>

<ol>
  <li>La création d’un <strong>Country</strong></li>
  <li>La récupération de la liste de tous les <strong>Country</strong></li>
</ol>

<p>Je vous propose d’aborder ce sujet selon une approche différente de celle abordée pour le use case d’authentification. Je commencerai donc par la définition de l’<strong>Entity</strong>, accompagnée de tests unitaires afin d’intégrer une démarche orientée <strong>Test-Driven Development (TDD)</strong>.</p>

<h2 id="présentation-rapide-du-tdd">Présentation rapide du TDD</h2>

<p>Le <strong>Test-Driven Development (TDD)</strong> est une méthodologie de développement très intéressante qui mériterait un article complet à elle-seule. Si vous cherchez des informations pour approfondir le sujet, je vous recommande vivement le livre <em>Test-Driven Development : By Example</em> de Kent Beck.</p>

<p>L’idée fondamentale derrière cette méthodologie est d’écrire les tests avant d’écrire la fonctionnalité correspondante. Cependant, l’essence même de cette approche réside dans une démarche progressive et rigoureuse, étape par étape (faire du pas-à-pas).</p>

<p>Dans le but d’illustrer cette méthode, je vous propose d’examiner les tests liés à la création d’une <strong>Entity Country</strong>.</p>

<h3 id="première-étape-test-de-la-création-dune-entity-country">Première étape : test de la création d’une Entity Country</h3>

<p>Nous commencerons par un test simple permettant de valider la création correcte d’une <strong>Entity Country</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">function</span> <span class="n">testCreateSuccess</span><span class="p">():</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="nv">$country</span> <span class="o">=</span> <span class="nc">Country</span><span class="o">::</span><span class="nf">create</span><span class="p">(</span>
        <span class="nc">CountryId</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="s1">'af785dbb-4ac1-4786-a5aa-1fed08f6ec26'</span><span class="p">),</span>
        <span class="nc">CountryName</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="s1">'France'</span><span class="p">),</span>
    <span class="p">);</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertInstanceOf</span><span class="p">(</span>
        <span class="nc">Country</span><span class="o">::</span><span class="n">class</span><span class="p">,</span>
        <span class="nv">$country</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertEquals</span><span class="p">(</span>
        <span class="s1">'af785dbb-4ac1-4786-a5aa-1fed08f6ec26'</span><span class="p">,</span>
        <span class="nv">$country</span><span class="o">-&gt;</span><span class="nf">id</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
    <span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertEquals</span><span class="p">(</span>
        <span class="s1">'France'</span><span class="p">,</span>
        <span class="nv">$country</span><span class="o">-&gt;</span><span class="nf">name</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
    <span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Ce test permet de décrire précisément ce qui est attendu en sortie de la méthode <strong>Factory</strong> create. Dans une démarche <strong>TDD</strong>, le but est d’obtenir un test vert (c’est-à-dire réussi) le plus rapidement possible (c’est-à-dire en succès).</p>

<p>Lors de la première exécution du test, une erreur remonte immédiatement : la classe n’existe pas.</p>

<p><img src="/assets/images/2025-02-17/first-step-test.png" alt="First error Unit Test" /></p>

<p>Cette situation, tout à fait normale, fait partie intégrante de la démarche <strong>TDD</strong>. Chaque étape de correction vise à résoudre l’erreur actuelle pour progressivement construire une implémentation validée par les tests.</p>

<p>Pour obtenir un test vert rapidement, j’ai donc commencé par créer l’<strong>Entity Country</strong>, ce qui a permis de modifier le message d’erreur.</p>

<p><img src="/assets/images/2025-02-17/first-bis-step-test.png" alt="Second error Unit Test" /></p>

<p>J’ai ensuite créé une method <strong><em>create</em></strong> dans l’<strong>Entity Country</strong>. Dans un premier temps, cela ne fait rien, mais elle permet de faire progresser le passage au vert du test.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Entity</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">Country</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">():</span> <span class="kt">self</span>
    <span class="p">{</span>

    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Le message d’erreur dit maintenant que le <strong>Value Object CountryId</strong> n’existe pas.</p>

<p><img src="/assets/images/2025-02-17/second-step-test.png" alt="Third error Unit Test" /></p>

<p>Afin de régler le problème, je le crée, mais le plus simplement possible.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\ValueObject</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CountryId</span>
<span class="p">{</span>
    
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Le message suivant précise qu’il ne trouve pas la méthode fromString, que je rajoute également.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\ValueObject</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CountryId</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">fromString</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$value</span><span class="p">):</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>On a désormais un message qui dit que le Value Object CountryName n’existe pas.</p>

<p><img src="/assets/images/2025-02-17/third-step-test.png" alt="Fourth error Unit Test" /></p>

<p>Je crée donc cette classe, et comme lors de la création du Value Object CountryId, j’anticipe en ajoutant une method fromString.</p>

<h3 id="vision-du-futur">Vision du futur</h3>

<p>L’idée est de n’anticiper que de petites portions de code, étape par étape, afin de rester concentré sur l’objectif principal : faire passer le test au vert le plus vite possible.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\ValueObject</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CountryName</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">fromString</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$value</span><span class="p">):</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Le message d’erreur des tests indique maintenant que la méthode Factory de l’Entity Country ne retourne pas d’Entity. Pour résoudre ce problème, j’adopte l’approche la plus simple possible.</p>

<p><img src="/assets/images/2025-02-17/fifth-step-test.png" alt="Fifth error Unit Test" /></p>

<p>Pour le corriger je fais en sorte que la méthode <strong><em>create</em></strong> retourne une <strong>Entity Country</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Entity</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">Country</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">():</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Maintenant, la method retourne bien une <strong>Entity</strong>, mais les tests signalent une nouvelle erreur : l’absence de Method pour exposer mon <strong>id</strong>. Ce genre de problème se reproduira également pour l’attribut <strong>name</strong>.</p>

<p><img src="/assets/images/2025-02-17/sixth-step-test.png" alt="Sixth error Unit Test" /></p>

<p>Je vais maintenant devoir créer ces Method. Avant de lex implémenter, il est crucial de savoir ce qu’elles doivent retourner. Pour aller au plus simple, elles vont renvoyer exactement ce que le test attend qu’elles retournent.</p>

<p>Ce qui nous donne donc :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Entity</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Country\Domain\ValueObject\CountryId</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Country\Domain\ValueObject\CountryName</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">Country</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">():</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">CountryId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nc">CountryId</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="s1">'af785dbb-4ac1-4786-a5aa-1fed08f6ec26'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">name</span><span class="p">():</span> <span class="kt">CountryName</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nc">CountryName</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span>
            <span class="s1">'France'</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Le test devrait maintenant être réussi. Cependant, dans les <strong>Value Object</strong>, il manque la method <strong><em>value</em></strong> pour récupérer leur valeur. Je vais donc l’ajouter.</p>

<p>Une autre problématique réside dans l’assignation de la valeur passée dans la méthode <strong><em>fromString</em></strong>. Je vais régler ces deux problèmes en une seule opération.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\ValueObject</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CountryId</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">string</span> <span class="nv">$value</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">fromString</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$value</span><span class="p">):</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">value</span><span class="p">():</span> <span class="kt">string</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\ValueObject</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CountryName</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">string</span> <span class="nv">$value</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">fromString</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$value</span><span class="p">):</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">value</span><span class="p">():</span> <span class="kt">string</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Voici donc à quoi ressemble les <strong>Value Object</strong> à ce stade. L’objectif de faire passer les tests au vert est atteint, ce qui est parfait.</p>

<p><img src="/assets/images/2025-02-17/seventh-step-test.png" alt="Seventh error Unit Test" /></p>

<p>Tout cela est bien beau, mais nous avons un peu triché en mettant les valeurs en dur dans l’<strong>Entity</strong>. Nous avons atteint l’objectif du test rapidement, de la manière la plus naïve possible. Il faut désormais aborder la deuxième étape : refactorer le code pour l’améliorer et le rendre vraiment fonctionnel.</p>

<h3 id="deuxième-étape-rendre-le-code-fonctionnel">Deuxième étape : rendre le code fonctionnel</h3>

<p>Pour cela, il faut que l’<strong>Entity Country</strong> dispose de deux propriétés distinctes pour l’<strong>id</strong> et le <strong>name</strong>. Il faut ensuite que les method <strong><em>id</em></strong> et <strong><em>name</em></strong> retournent les valeurs des propriétés. Le refactoring doit être réalisé par petites étapes, en veillant à ne travailler que sur ce qui est couvert par le test. Puisque le test de cet exemple se concentre sur la method <strong>create</strong>, je vais me limiter à refactorer du code qui concerne cette method, sans toucher à d’autres <strong>Entities</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Entity</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Country\Domain\ValueObject\CountryId</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Country\Domain\ValueObject\CountryName</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">Country</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">CountryId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">():</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">CountryId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">name</span><span class="p">():</span> <span class="kt">CountryName</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Voilà quoi ressemble l’<strong>Entity</strong>. Relançons maintenant les tests pour voir si cela marche toujours.</p>

<p><img src="/assets/images/2025-02-17/eighth-step-test.png" alt="Eighth error Unit Test" /></p>

<p>Et là, c’est le drame ! Le test est cassé. Retour à la case départ : le faire passer vert au plus vite.
D’après le message d’erreur, le constructeur de l’<strong>Entity Country</strong> doit prendre deux paramètres. Or, en regardant de plus près le code de l’<strong>Entity</strong>, on remarque qu’aucun argument n’est passé au constructeur dans la method <strong>create</strong>. Il faut cependant que cette method prenne ces deux paramètres pour pouvoir les transmettre au <strong><em>constructeur</em></strong> de l’<strong>Entity</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Entity</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Country\Domain\ValueObject\CountryId</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Country\Domain\ValueObject\CountryName</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">Country</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">CountryId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">(</span>
        <span class="kt">CountryId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span>
            <span class="nv">$id</span><span class="p">,</span>
            <span class="nv">$name</span><span class="p">,</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">CountryId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">name</span><span class="p">():</span> <span class="kt">CountryName</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>En relançant le test, celui-ci est désormais dans le vert.</p>

<p><img src="/assets/images/2025-02-17/nineth-step-test.png" alt="Nineth error Unit Test" /></p>

<p>On a donc créé la method <strong>create</strong> de l’<strong>Entity Country</strong> en suivant les bonnes pratiques du TDD.</p>

<h3 id="ce-quil-faut-retenir">Ce qu’il faut retenir</h3>

<p>En appliquant le <strong>TDD</strong>, on peut être sûr que le test reflète parfaitement le besoin du métier et que ce dernier est correctement validé. Je vous recommande de l’adopter autant que possible, car cela facilite la conception de vos use case métier et garantit que votre code métier à un code coverage le plus proche possible des 100%.</p>

<h2 id="ajouter-de-la-valeur-aux-value-object">Ajouter de la valeur aux Value Object</h2>

<p>Pour renforcer la valeur des <strong>Value Objects</strong>, il est essentiel d’ajouter des vérifications sur leur contenu. On peut par exemple valider que la <strong>Value Object</strong> <strong><em>CountryId</em></strong> est bien un <strong><em>UUID</em></strong>: pour cela, on peut utiliser une librairie existante ou écrire son propre code. Il faut, bien entendu, commencer par écrire un test, puis implémenter la validation dans l’<strong>Entity</strong> correspondante.</p>

<p>Voici à quoi ressemble le test :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">function</span> <span class="n">testCreateBadIdNotUuid</span><span class="p">():</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">expectException</span><span class="p">(</span><span class="nc">\InvalidArgumentException</span><span class="o">::</span><span class="n">class</span><span class="p">);</span>

    <span class="nc">Country</span><span class="o">::</span><span class="nf">create</span><span class="p">(</span>
        <span class="nc">CountryId</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="s1">'12'</span><span class="p">),</span>
        <span class="nc">CountryName</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="s1">'France'</span><span class="p">),</span>
    <span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Sans surprise, il ne passe pas.</p>

<p><img src="/assets/images/2025-02-17/ten-step-test.png" alt="Ten error Unit Test" /></p>

<p>Pour faire passer le test au vert facilement, on doit ajouter une vérification dans le <em>Value Object</em> pour s’assurer que la valeur passée est bien un <strong><em>UUID</em></strong>.</p>

<p>Pour cela, j’utilise la librairie PHP : https://github.com/webmozarts/assert. Premièrement, je l’installe en suivant la documentation officielle. Ensuite, il suffit d’ajouter la vérification appropriée pour émettre l’exception voulue.
Voici le code de la <strong>Value Object</strong> mis à jour :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\ValueObject</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Webmozart\Assert\Assert</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CountryId</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="kt">string</span> <span class="nv">$value</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$value</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nc">Assert</span><span class="o">::</span><span class="nf">uuid</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">value</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">fromString</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$value</span><span class="p">):</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">value</span><span class="p">():</span> <span class="kt">string</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Le test devrait passer :</p>

<p><img src="/assets/images/2025-02-17/eleven-step-test.png" alt="Eleven error Unit Test" /></p>

<p>Parfait !
Ce <strong>Domain</strong>, très simple et avec peu de règles, est terminé. Dans le futur nous verrons des <strong>Domain</strong> plus complexes.</p>

<h2 id="mise-en-place-des-use-case">Mise en place des use case</h2>

<p>Nous allons maintenant développer les use case dans le Domain que nous venons de créer.</p>

<h3 id="création-du-country">Création du Country</h3>

<p>Nous commençons par importer des produits depuis un fichier récupéré sur Internet.</p>

<p><img src="/assets/images/2025-02-17/import-country-usecase.png" alt="Import countries use case" /></p>

<p>La première étape est d’écrire le test du <strong>Primary Adapter</strong> qui est la <strong><em>Command Symfony ImportCountryCommand</em></strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">function</span> <span class="n">testExecute</span><span class="p">():</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="k">self</span><span class="o">::</span><span class="nf">bootkernel</span><span class="p">();</span>
    <span class="nv">$application</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Application</span><span class="p">(</span><span class="k">self</span><span class="o">::</span><span class="nv">$kernel</span><span class="p">);</span>
    <span class="nv">$command</span> <span class="o">=</span> <span class="nv">$application</span><span class="o">-&gt;</span><span class="nf">find</span><span class="p">(</span><span class="s1">'country:import'</span><span class="p">);</span>
    <span class="nv">$commandTester</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CommandTester</span><span class="p">(</span><span class="nc">Scommand</span><span class="p">);</span>
    <span class="nv">$commandTester</span><span class="o">-&gt;</span><span class="nf">execute</span><span class="p">([]);</span>
    <span class="nv">$commandTester</span><span class="o">-&gt;</span><span class="nf">assertCommandIsSuccessful</span><span class="p">();</span>
    <span class="nv">$output</span> <span class="o">=</span> <span class="nv">$commandTester</span><span class="o">-&gt;</span><span class="nf">getDisplay</span><span class="p">();</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertStringContainsString</span><span class="p">(</span><span class="s1">'[OK] Countries created: 241'</span><span class="p">,</span> <span class="nv">$output</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Le code en question est lié à <strong><em>Symfony</em></strong>, donc je ne m’y attarderai pas trop longtemps. L’essentiel ici est de comprendre l’assert qui valide le test : à la fin de la commande, le message ‘[OK] Countries created: 241’ doit s’afficher, avec le nombre de pays créés.</p>

<p>Une fois cette vérification faite, nous pouvons passer au code. Celui de la <strong><em>Command Symfony</em></strong> n’est pas très intéressant car il s’agit principalement de la lecture de fichier, ce qui relève de la couche <strong>Infrastructure</strong>, et non du <strong>Domain</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="k">private</span> <span class="k">function</span> <span class="n">handleFile</span><span class="p">():</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="nv">$countryCreated</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$handle</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getFilePath</span><span class="p">(),</span> <span class="s1">'r'</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$handle</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nc">\RuntimeException</span><span class="p">(</span><span class="s1">'Unable to open file'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">while</span> <span class="p">((</span><span class="nv">$data</span> <span class="o">=</span> <span class="nb">fgetcsv</span><span class="p">(</span><span class="nv">$handle</span><span class="p">,</span> <span class="mi">1000</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">commandBus</span><span class="o">-&gt;</span><span class="nf">dispatch</span><span class="p">(</span><span class="k">new</span> <span class="nc">CreateCountryCommand</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="mi">4</span><span class="p">]));</span>
        <span class="o">++</span><span class="nv">$countryCreated</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$handle</span><span class="p">);</span>

    <span class="k">return</span> <span class="nv">$countryCreated</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="vision-du-futur-1">Vision du futur</h3>

<p>Ici on pourrait aussi mettre en forme un tableau avec tous les noms des pays et dispatch une <strong>Command</strong> pour importer tous les pays d’un seul coup. Cette façon de faire respecterais plus le <strong>CQRS</strong> ou le changement sur le système doit être englobé dans une seule <strong>Command</strong>. Je pense que ce changement devrait être fait.</p>

<p>Voici un extrait de la <strong><em>Command Symfony</em></strong>, qui montre la partie responsable de la lecture du fichier et du dispatch de la <strong>Command</strong>. Je passe rapidement cette section, car elle n’est pas cruciale ici. Ce qu’il faut retenir, c’est que le fichier est lu et une <strong>Command</strong> est dispatchée avec le <strong>nom du pays</strong> qu’il contient. Pour ce <strong>Domain</strong>, je n’ai besoin d’aucune autre information, donc je ne prends que le <strong>nom</strong>. Cependant, on pourrait très bien imaginer traiter d’autres informations, selon les besoins du <strong>Domain Country</strong> ou du <strong>Core Domain</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Application\Command</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Application\Command\CommandInterface</span><span class="p">;</span>

<span class="cd">/**
 * @implements CommandInterface&lt;void&gt;
 */</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CreateCountryCommand</span> <span class="kd">implements</span> <span class="nc">CommandInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>La Command vraiment très simple ne prend qu’un <strong>nom</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Application\Command</span><span class="p">;</span>

<span class="na">#[AsCommandHandler]</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CreateCountryCommandHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">CountryRepositoryInterface</span> <span class="nv">$countryRepository</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">DomainEventDispatcherInterface</span> <span class="nv">$dispatcher</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">IdFactory</span> <span class="nv">$idFactory</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @throws CountryAlreadyExistsException
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">CreateCountryCommand</span> <span class="nv">$command</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">countryRepository</span><span class="o">-&gt;</span><span class="nf">ofName</span><span class="p">(</span><span class="nc">CountryName</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="nv">$command</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nc">CountryAlreadyExistsException</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="nv">$country</span> <span class="o">=</span> <span class="nc">Country</span><span class="o">::</span><span class="nf">create</span><span class="p">(</span>
            <span class="nc">CountryId</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">idFactory</span><span class="o">-&gt;</span><span class="nf">create</span><span class="p">()),</span>
            <span class="nc">CountryName</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="nv">$command</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">),</span>
        <span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">countryRepository</span><span class="o">-&gt;</span><span class="nf">add</span><span class="p">(</span><span class="nv">$country</span><span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">dispatcher</span><span class="o">-&gt;</span><span class="nf">dispatch</span><span class="p">(</span><span class="nv">$country</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Le <strong>CommandHandler</strong> fait partie de la couche <strong>Application</strong>, il permet de relier la couche <strong>Infrastructure</strong> au <strong>Domain</strong>. Le <strong>CommandHandler</strong> vérifie si le <strong>Country</strong> n’existe pas déjà, en utilisant le <strong>Repository</strong>. Si le pays existe déjà, on <strong><em>throw une exception</em></strong>. On peut se permettre de rechercher par <strong>nom</strong> pour garantir l’unicité, car chaque <strong>nom de pays</strong> est unique. La méthode <strong>Factory</strong> de notre <strong>Entity Country</strong> permet de créer le Pays. Une fois créé, on l’enregistre dans le système à l’aide du <strong>Repository</strong>. Pour finir, on dispatche les <strong>Domain Events</strong> liés à la création du <strong>Country</strong>.</p>

<p>Le <strong>Repository</strong> est une notion du <strong>Domain</strong>, nous créons donc une <strong><em>Interface</em></strong> pour utiliser l’<strong>Inversion de dépendance</strong> : on déclare une <strong><em>Interface</em></strong> dans le <strong>Domain</strong> pour un <strong>Repository</strong> (avec la method <strong><em>add</em></strong> par exemple), et on implémente dans la couche <strong>Infrastructure</strong> la method <strong><em>add</em></strong> du <strong>Repository</strong> qui enregistre la nouvelle <strong>Entity</strong> dans la base de données (dans notre cas).</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Repository</span><span class="p">;</span>

<span class="cd">/**
 * @extends RepositoryInterface&lt;Country&gt;
 */</span>
<span class="kd">interface</span> <span class="nc">CountryRepositoryInterface</span> <span class="kd">extends</span> <span class="nc">RepositoryInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">ofName</span><span class="p">(</span><span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">):</span> <span class="kt">?Country</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">add</span><span class="p">(</span><span class="kt">Country</span> <span class="nv">$country</span><span class="p">):</span> <span class="kt">void</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Dans le <strong>Repository</strong>, on définit les deux method nécessaires pour interagir avec le Domain :
– <strong><em>ofName</em></strong>: récupère un pays par son <strong>nom</strong> ou renvoie <strong><em>null</em></strong> si le <strong>Country</strong> n’existe pas
– <strong><em>add</em></strong>: se charge d’enregistrer le <strong>Country</strong> dans le système</p>

<p>L’implémentation du Repository n’est pas vraiment intéressante, car liée à Symfony, mais je la montre quand même pour compléter l’implémentation.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Infrastructure\Doctrine\Repository</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">CountryDoctrineRepository</span> <span class="kd">implements</span> <span class="nc">CountryRepositoryInterface</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">const</span> <span class="no">string</span> <span class="no">ENTITY_CLASS</span> <span class="o">=</span> <span class="nc">CountryDoctrine</span><span class="o">::</span><span class="n">class</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">const</span> <span class="no">string</span> <span class="no">ALIAS</span> <span class="o">=</span> <span class="s1">'country'</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">EntityManagerInterface</span> <span class="nv">$entityManager</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">parent</span><span class="o">::</span><span class="nf">__construct</span><span class="p">(</span><span class="nv">$entityManager</span><span class="p">,</span> <span class="k">self</span><span class="o">::</span><span class="no">ENTITY_CLASS</span><span class="p">,</span> <span class="k">self</span><span class="o">::</span><span class="no">ALIAS</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">ofName</span><span class="p">(</span>
        <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">?Country</span> <span class="p">{</span>
        <span class="nv">$country</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">entityManager</span>
            <span class="o">-&gt;</span><span class="nf">getRepository</span><span class="p">(</span><span class="k">self</span><span class="o">::</span><span class="no">ENTITY_CLASS</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="nf">findOneBy</span><span class="p">([</span><span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="nv">$name</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">()])</span>
        <span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$country</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nc">CountryMapper</span><span class="o">::</span><span class="nf">toDomain</span><span class="p">(</span><span class="nv">$country</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">add</span><span class="p">(</span><span class="kt">Country</span> <span class="nv">$country</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$countryDoctrine</span> <span class="o">=</span> <span class="nc">CountryMapper</span><span class="o">::</span><span class="nf">toInfrastructurePersist</span><span class="p">(</span><span class="nv">$country</span><span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">entityManager</span><span class="o">-&gt;</span><span class="nf">persist</span><span class="p">(</span><span class="nv">$countryDoctrine</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">entityManager</span><span class="o">-&gt;</span><span class="nb">flush</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Je ne rentrerais pas dans le détail de l’implémentation, mais nous retrouvons bien les deux method déclarées dans l’<strong><em>Interface</em></strong> du <strong>Repository</strong>.</p>

<p>Cela clôt l’implémentation du use case pour la création du <strong>Country</strong>. Je vais maintenant ajouter une petite fonctionnalité dans le <strong>Domain</strong>: l’enregistrement d’un <strong>Domain Event</strong> lorsqu’une <strong>Entity Country</strong> est créée.</p>

<h2 id="enregistrement-dun-domain-event-lié-à-la-création-dune-entity-country">Enregistrement d’un Domain Event lié à la création d’une Entity Country</h2>

<p>Pour cela, j’ai créé une <strong><em>Interface</em></strong> que les <strong>Entity</strong> doivent implémenter pour enregistrer leurs événements métiers. Ensuite, j’utilise un <strong><em>Event Dispatcher</em></strong> pour dispatcher tous les événements d’une <strong>Entity</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Shared\Domain\Entity</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Shared\Domain\Event\DomainEventInterface</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">EntityWithDomainEventInterface</span>
<span class="p">{</span>
    <span class="cd">/**
     * @return DomainEventInterface[]
     */</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">getRecordedEvent</span><span class="p">():</span> <span class="kt">array</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">recordEvent</span><span class="p">(</span><span class="kt">DomainEventInterface</span> <span class="nv">$event</span><span class="p">):</span> <span class="kt">void</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">eraseRecordedEvents</span><span class="p">():</span> <span class="kt">void</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Cette <strong><em>Interface</em></strong> définit trois method :</p>
<ol>
  <li><strong><em>getRecordedEvent</em></strong> : permet de récupérer tous les <strong>Domain Event</strong> enregistrés sur une <strong>Entity</strong></li>
  <li><strong><em>recordEvent</em></strong> : permet d’enregistrer un <strong>Domain Event</strong> suite à une action sur le <strong>Domain</strong></li>
  <li><strong><em>eraseRecordedEvents</em></strong> : permet de supprimer les <strong>Domain Event</strong> quand on les a dispatchés afin de ne pas les traiter deux fois.</li>
</ol>

<p>Pour créer les method liées à cette <strong><em>Interface</em></strong>, il est nécessaire que les <strong>Domain Event</strong> eux-mêmes implémentent une <strong><em>Interface</em></strong>. Celle-ci sera ensuite utilisée pour typer les <strong>Domain Event</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Shared\Domain\Event</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">DomainEventInterface</span>
<span class="p">{</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Il faut ensuite faire en sorte que l’<strong>Entity Country</strong> implémente ces method. Pour ce faire, j’ai choisi de créer un <strong><em>Trait PHP</em></strong>, ce qui permet d’ajouter ces method à l’<strong>Entity</strong> sans avoir à utiliser l’héritage.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Shared\Domain\Entity</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Shared\Domain\Event\DomainEventInterface</span><span class="p">;</span>

<span class="kd">trait</span> <span class="nc">EntityDomainEventTrait</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="kt">array</span> <span class="nv">$recordedEvents</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">getRecordedEvent</span><span class="p">():</span> <span class="kt">array</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">self</span><span class="o">::</span><span class="nv">$recordedEvents</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">recordEvent</span><span class="p">(</span><span class="kt">DomainEventInterface</span> <span class="nv">$event</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="k">self</span><span class="o">::</span><span class="nv">$recordedEvents</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$event</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">eraseRecordedEvents</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="k">self</span><span class="o">::</span><span class="nv">$recordedEvents</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Pour que l’<strong>Entity Country</strong> dispose de ces method, elle doit implémenter l’<strong><em>Interface</em></strong> <strong><em>EntityWithDomainEventInterface</em></strong> et utiliser le <strong><em>trait</em></strong> <strong><em>EntityDomainEventTrait</em></strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Entity</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">Country</span> <span class="kd">implements</span> <span class="nc">EntityWithDomainEventInterface</span>
<span class="p">{</span>
    <span class="kn">use</span> <span class="nc">EntityDomainEventTrait</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">CountryId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">(</span>
        <span class="kt">CountryId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">self</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span>
            <span class="nv">$id</span><span class="p">,</span>
            <span class="nv">$name</span><span class="p">,</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">CountryId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">name</span><span class="p">():</span> <span class="kt">CountryName</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>À présent, l’<strong>Entity Country</strong> est prête à enregistrer des <strong>Domain Event</strong>. L’<strong><em>Event</em></strong> sera en charge d’indiquer qu’un <strong>Country</strong> a été créé, avec pour valeurs l’<strong>id</strong> et le <strong>nom</strong>. Pour cela, on crée un <strong><em>Event</em></strong> <strong>CountryCreated</strong>. Un <strong>Domain Event</strong> doit être identifiable pour vérifier que le même <strong><em>Event</em></strong> n’est pas consommé plusieurs fois. Il doit également avoir une date de publication afin d’être traité dans l’ordre d’enregistrement,  si cet ordre à de l’importance.</p>

<p>Pour répondre à ces besoins, j’ai donc créé une <strong><em>Abstract Class</em></strong> qui permet d’ajouter ces informations à chaque <strong><em>Event</em></strong> que l’on créera en faisant de l’héritage.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Shared\Domain\Event</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Ramsey\Uuid\Uuid</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Contracts\EventDispatcher\Event</span><span class="p">;</span>

<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">DomainEvent</span> <span class="kd">extends</span> <span class="nc">Event</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="nv">$id</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">readonly</span> <span class="kt">int</span> <span class="nv">$occurredOn</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">=</span> <span class="nc">Uuid</span><span class="o">::</span><span class="nf">uuid4</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">toString</span><span class="p">();</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">occurredOn</span> <span class="o">=</span> <span class="nb">time</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>On crée l’<strong><em>Event</em></strong> qui va étendre cette classe et implémenter l’<strong><em>Interface</em></strong> précédemment créée.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Event</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Shared\Domain\Event\DomainEvent</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Shared\Domain\Event\DomainEventInterface</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">CountryCreated</span> <span class="kd">extends</span> <span class="nc">DomainEvent</span> <span class="kd">implements</span> <span class="nc">DomainEventInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$countryId</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="k">parent</span><span class="o">::</span><span class="nf">__construct</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Il ne reste plus qu’à enregistrer cet <strong><em>Event</em></strong> au moment de la création du <strong>Country</strong>.
Enregistrer un <strong>Domain Event</strong> à chaque action dans le système n’est pas obligatoire. C’est cependant très utile pour respecter la <strong>séparation des préoccupations</strong> (<strong>Separation of concerns).</strong> Le <strong>CommandHandler</strong> a pour but de créer l’<strong>Entity Country</strong>. Si d’autres actions doivent être effectuées, elles ne doivent pas faire partie de ce <strong>CommandHandler</strong>. Il est donc important de segmenter le code et les <strong><em>Event</em></strong> : c’est un bon moyen d’y parvenir. On pourrait imaginer que cet <strong><em>Event</em></strong> soit écouté pour effectuer des actions telles que l’écriture du <strong>Country</strong> dans le modèle de lecture, ou pour notifier un autre <strong>Domain</strong> qu’un nouveau <strong>Country</strong> a été créé.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Entity</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">Country</span> <span class="kd">implements</span> <span class="nc">EntityWithDomainEventInterface</span>
<span class="p">{</span>
    <span class="kn">use</span> <span class="nc">EntityDomainEventTrait</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">CountryId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">(</span>
        <span class="kt">CountryId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">self</span> <span class="p">{</span>
        <span class="nv">$country</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span>
            <span class="nv">$id</span><span class="p">,</span>
            <span class="nv">$name</span><span class="p">,</span>
        <span class="p">);</span>

        <span class="nv">$country</span><span class="o">::</span><span class="nf">recordEvent</span><span class="p">(</span>
            <span class="k">new</span> <span class="nc">CountryCreated</span><span class="p">(</span>
                <span class="nv">$country</span><span class="o">-&gt;</span><span class="n">id</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
                <span class="nv">$country</span><span class="o">-&gt;</span><span class="n">name</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
            <span class="p">)</span>
        <span class="p">);</span>

        <span class="k">return</span> <span class="nv">$country</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">CountryId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">name</span><span class="p">():</span> <span class="kt">CountryName</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>L’<strong><em>Event</em></strong> est enregistré et sera dispatché dans le <strong>CommandHandler</strong> grâce à cette ligne :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">dispatcher</span><span class="o">-&gt;</span><span class="nf">dispatch</span><span class="p">(</span><span class="nv">$country</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="vision-du-futur-2">Vision du futur</h3>
<p>C’est très important de <strong><em>dispatch</em></strong> le <strong>Domain Event</strong> après que l’action soit effectué.</p>

<p>La partie création de l’Entity Country est désormais terminée.</p>

<h2 id="exposer-une-liste-de-pays">Exposer une liste de pays</h2>

<p>On souhaite maintenant pouvoir exposer une liste de pays via une API. Pour cela nous allons utiliser <strong><em>Api Platform</em></strong> (https://api-platform.com/), un framework pour faciliter la création d’API REST en respectant les standards du secteur.</p>

<h3 id="explication-rapide-dapi-platform">Explication rapide d’API Platform</h3>

<p>Ce framework très complet se base sur des classes <strong><em>Resources</em></strong> dans lesquelles nous déclarons des opérations. Ces opérations sont liées aux verbes HTTP (GET, PUT, POST, DELETE) et chaque opération se voit attribuer des <strong><em>Processor</em></strong> ( pour PUT, DELETE et POST) et des <strong><em>Provider</em></strong> (pour GET).</p>

<p><strong><em>API Platform</em></strong> offre une multitude d’autres fonctionnalités. J’en effleure seulement la surface pour que vous puissiez comprendre ce qui se passe en lisant le code.</p>

<p>Voilà mon use case :</p>

<p><img src="/assets/images/2025-02-17/reas-list-product.png" alt="Read list product" /></p>

<p>Comme expliqué plus haut, en utilisant <strong><em>Api Platform</em></strong>, le <strong>Primary Adapter</strong> est le <strong><em>Country Provider</em></strong>.</p>

<p>J’écris d’abord un test rapide pour récupérer la liste de mes pays.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">function</span> <span class="n">testGetCollection</span><span class="p">():</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'/api/countries'</span><span class="p">);</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertResponseIsSuccessful</span><span class="p">();</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertJsonContains</span><span class="p">([</span>
        <span class="s1">'@context'</span> <span class="o">=&gt;</span> <span class="s1">'/api/contexts/Country'</span><span class="p">,</span>
        <span class="s1">'@id'</span> <span class="o">=&gt;</span> <span class="s1">'/api/countries'</span><span class="p">,</span>
        <span class="s1">'@type'</span> <span class="o">=&gt;</span> <span class="s1">'Collection'</span><span class="p">,</span>
        <span class="s1">'member'</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="p">[</span>
                <span class="s1">'@type'</span> <span class="o">=&gt;</span> <span class="s1">'Country'</span><span class="p">,</span>
                <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Afghanistan'</span><span class="p">,</span>
            <span class="p">],</span>
            <span class="p">[</span>
                <span class="s1">'@type'</span> <span class="o">=&gt;</span> <span class="s1">'Country'</span><span class="p">,</span>
                <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Afrique du Sud'</span><span class="p">,</span>
            <span class="p">],</span>
        <span class="p">],</span>
        <span class="s1">'totalItems'</span> <span class="o">=&gt;</span> <span class="mi">30</span><span class="p">,</span>
    <span class="p">]);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Dans ce test, je fais une requête sur l’uri ‘/api/countries’, qui renvoie une liste de <strong>Country</strong> avec leur <strong>nom</strong>. Je dois récupérer trente pays, car la pagination est activée pour les récupérer par lot de trente (ce qui géré est par défaut par <strong><em>Api Platform</em></strong>).</p>

<p>On commence donc pas créer la <strong><em>Resource Country</em></strong>, qui est différente de l’<strong>Entity Country</strong>. La responsabilité de cette <strong><em>Resource</em></strong> est de porter l’opération d’<strong><em>Api Platform</em></strong> et de renvoyer les données via notre API.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Infrastructure\ApiPlatform\Resource</span><span class="p">;</span>

<span class="err">#</span><span class="p">[</span><span class="nf">ApiResource</span><span class="p">(</span>
    <span class="n">shortName</span><span class="o">:</span> <span class="s1">'Country'</span><span class="p">,</span>
<span class="p">)]</span>
<span class="err">#</span><span class="p">[</span><span class="nf">GetCollection</span><span class="p">(</span>
    <span class="s1">'/countries'</span><span class="p">,</span>
    <span class="n">filters</span><span class="o">:</span> <span class="p">[</span><span class="nc">CountryFilter</span><span class="o">::</span><span class="n">class</span><span class="p">],</span>
    <span class="n">provider</span><span class="o">:</span> <span class="nc">GetCountryCollectionProvider</span><span class="o">::</span><span class="n">class</span><span class="p">,</span>
<span class="p">)]</span>
<span class="k">final</span> <span class="kd">class</span> <span class="nc">GetCollectionCountryResource</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="na">#[ApiProperty(readable: false, writable: false, identifier: true)]</span>
        <span class="k">public</span> <span class="kt">?AbstractUid</span> <span class="nv">$id</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
        <span class="na">#[ApiProperty]</span>
        <span class="k">public</span> <span class="kt">?string</span> <span class="nv">$name</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">fromModel</span><span class="p">(</span><span class="kt">Country</span> <span class="nv">$country</span><span class="p">):</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span>
            <span class="k">new</span> <span class="nc">Uuid</span><span class="p">(</span><span class="nv">$country</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">),</span>
            <span class="nv">$country</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>On ajoute une opération de type <strong><em>GetCollection</em></strong>, car on veut récupérer une liste de <strong><em>Resource Country</em></strong>. On spécifie un <strong><em>Provider</em></strong> qui sera chargé de dispatcher la <strong>Query</strong> pour lire les données dans le système. On définit ensuite les champs à retourner, on ajoute l’<strong>attribut</strong> <strong><em>ApiProperty</em></strong> pour indiquer que ces propriétés doivent être exposées via l’API. Pour finir, on définit une method <strong><em>fromModel</em></strong> qui permet de transformer les <strong>Entity Country</strong> en <strong>Resource Country</strong>.</p>

<p>J’ai également précisé un argument <strong><em>filters</em></strong> dans l’<strong><em>attribut</em></strong> <strong><em>GetCollection</em></strong> Cela permet de définir un ou plusieurs filtres, utiles pour le côté interne d’<strong><em>Api Platform</em></strong> et pour apparaître dans les metadata du retour de notre API. Je ne rentre pas plus dans le détail car ce n’est pas essentiel pour l’apprentissage du <strong>DDD</strong>, mais voilà à quoi ressemble cette classe <strong><em>CountryFilter</em></strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Infrastructure\ApiPlatform\OpenApi</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">ApiPlatform\Metadata\FilterInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\PropertyInfo\Type</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CountryFilter</span> <span class="kd">implements</span> <span class="nc">FilterInterface</span>
<span class="p">{</span>
    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">getDescription</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$resourceClass</span><span class="p">):</span> <span class="kt">array</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span>
            <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="p">[</span>
                <span class="s1">'property'</span> <span class="o">=&gt;</span> <span class="s1">'name'</span><span class="p">,</span>
                <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="nc">Type</span><span class="o">::</span><span class="no">BUILTIN_TYPE_STRING</span><span class="p">,</span>
                <span class="s1">'required'</span> <span class="o">=&gt;</span> <span class="kc">false</span><span class="p">,</span>
            <span class="p">],</span>
        <span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Ainsi que le Provider :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Infrastructure\ApiPlatform\State\Provider</span><span class="p">;</span>

<span class="cd">/**
 * @implements ProviderInterface&lt;GetCollectionCountryResource&gt;
 */</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">GetCountryCollectionProvider</span> <span class="kd">implements</span> <span class="nc">ProviderInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">QueryBusInterface</span> <span class="nv">$queryBus</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">Pagination</span> <span class="nv">$pagination</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @return Paginator&lt;GetCollectionCountryResource&gt;|list&lt;GetCollectionCountryResource&gt;
     */</span>
    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">provide</span><span class="p">(</span><span class="kt">Operation</span> <span class="nv">$operation</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$uriVariables</span> <span class="o">=</span> <span class="p">[],</span> <span class="kt">array</span> <span class="nv">$context</span> <span class="o">=</span> <span class="p">[]):</span> <span class="kt">array</span><span class="o">|</span><span class="nc">Paginator</span>
    <span class="p">{</span>
        <span class="nv">$name</span> <span class="o">=</span> <span class="nv">$context</span><span class="p">[</span><span class="s1">'filters'</span><span class="p">][</span><span class="s1">'name'</span><span class="p">]</span> <span class="o">??</span> <span class="kc">null</span><span class="p">;</span>
        <span class="nv">$page</span> <span class="o">=</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">pagination</span><span class="o">-&gt;</span><span class="nf">isEnabled</span><span class="p">(</span><span class="nv">$operation</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$page</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">pagination</span><span class="o">-&gt;</span><span class="nf">getPage</span><span class="p">(</span><span class="nv">$context</span><span class="p">);</span>
            <span class="nv">$limit</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">pagination</span><span class="o">-&gt;</span><span class="nf">getLimit</span><span class="p">(</span><span class="nv">$operation</span><span class="p">,</span> <span class="nv">$context</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="nv">$models</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queryBus</span><span class="o">-&gt;</span><span class="nf">ask</span><span class="p">(</span><span class="k">new</span> <span class="nc">GetCountriesQuery</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$page</span><span class="p">,</span> <span class="nv">$limit</span><span class="p">));</span>

        <span class="nv">$resources</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$models</span> <span class="k">as</span> <span class="nv">$model</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$resources</span><span class="p">[]</span> <span class="o">=</span> <span class="nc">GetCollectionCountryResource</span><span class="o">::</span><span class="nf">fromModel</span><span class="p">(</span><span class="nv">$model</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="kc">null</span> <span class="o">!==</span> <span class="nv">$paginator</span> <span class="o">=</span> <span class="nv">$models</span><span class="o">-&gt;</span><span class="nf">paginator</span><span class="p">())</span> <span class="p">{</span>
            <span class="nv">$resources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Paginator</span><span class="p">(</span>
                <span class="k">new</span> <span class="nc">\ArrayIterator</span><span class="p">(</span><span class="nv">$resources</span><span class="p">),</span>
                <span class="p">(</span><span class="n">float</span><span class="p">)</span> <span class="nv">$paginator</span><span class="o">-&gt;</span><span class="nf">getCurrentPage</span><span class="p">(),</span>
                <span class="p">(</span><span class="n">float</span><span class="p">)</span> <span class="nv">$paginator</span><span class="o">-&gt;</span><span class="nf">getItemsPerPage</span><span class="p">(),</span>
                <span class="p">(</span><span class="n">float</span><span class="p">)</span> <span class="nv">$paginator</span><span class="o">-&gt;</span><span class="nf">getLastPage</span><span class="p">(),</span>
                <span class="p">(</span><span class="n">float</span><span class="p">)</span> <span class="nv">$paginator</span><span class="o">-&gt;</span><span class="nf">getTotalItems</span><span class="p">(),</span>
            <span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$resources</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Ce <strong><em>Provider</em></strong> contient beaucoup de code spécifique à <strong><em>Api Platform</em></strong>, mais je vais quand même prendre un peu de temps pour vous l’expliquer, car cela touche à certaines réflexions concernant le <strong>DDD</strong>.</p>

<p>Premièrement, je récupère le filtre par nom s’il est spécifié et j’initialise la pagination à 0. Puis je récupère la pagination dans l’url si c’est activé. Ensuite, je dispatche la <strong>Query</strong>, responsable de lire les données dans le système. Après cela, je parcours toutes les <strong>Entity</strong> retournées par la <strong>Query</strong> et je les transforme en <strong><em>Resource</em></strong>. Pour finir, je mets en place la pagination (si elle est activée pour cette <strong><em>Resource</em></strong>) et je retourne les <strong><em>Resources</em></strong>, qu’elles soient paginées ou non.</p>

<h3 id="vision-du-futur-3">Vision du futur</h3>
<p>Gérer la pagination ne relève pas de la responsabilité du <strong>QueryHandler</strong>, c’est une problématique de l’<strong>Infrastructure</strong> ou de <strong>l’Application</strong>. À nous de nous adapter. Pour faire cela, il faudrait mettre en place un modèle de lecture (via des projections), mais je me suis rendu compte de cela plus tard. Pour l’instant, la pagination est donc portée par le <strong>Repository</strong>, ce qui n’est pas une bonne pratique. Si vous voulez un exemple plus détaillé, j’ai écrit un article à ce sujet que vous pouvez retrouver <a href="https://huguesgobet.com/fr/other/2024-12-16"><em>ici</em></a>.</p>

<p>Maintenant que tout cela est plus clair, voici la Query qu’on dispatch.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Application\Query</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Country\Application\Adapter\CountryRepositoryInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Shared\Application\Query\QueryInterface</span><span class="p">;</span>

<span class="cd">/**
 * @implements QueryInterface&lt;CountryRepositoryInterface&gt;
 */</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">GetCountriesQuery</span> <span class="kd">implements</span> <span class="nc">QueryInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">?string</span> <span class="nv">$name</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">?int</span> <span class="nv">$page</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">?int</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Ensuite le QueryHandler :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Application\Query</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Country\Application\Adapter\CountryRepositoryInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Shared\Application\Query\AsQueryHandler</span><span class="p">;</span>

<span class="na">#[AsQueryHandler]</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">GetCountriesQueryHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">CountryRepositoryInterface</span> <span class="nv">$countryRepository</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">GetCountriesQuery</span> <span class="nv">$query</span><span class="p">):</span> <span class="kt">CountryRepositoryInterface</span>
    <span class="p">{</span>
        <span class="nv">$countryRepository</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">countryRepository</span><span class="p">;</span>

        <span class="nv">$countryRepository</span> <span class="o">=</span> <span class="nv">$countryRepository</span><span class="o">-&gt;</span><span class="nf">sortName</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$query</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$countryRepository</span> <span class="o">=</span> <span class="nv">$countryRepository</span><span class="o">-&gt;</span><span class="nf">withName</span><span class="p">(</span><span class="nv">$query</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$query</span><span class="o">-&gt;</span><span class="n">page</span> <span class="o">!==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="n">limit</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$countryRepository</span> <span class="o">=</span> <span class="nv">$countryRepository</span><span class="o">-&gt;</span><span class="nf">withPagination</span><span class="p">(</span><span class="nv">$query</span><span class="o">-&gt;</span><span class="n">page</span><span class="p">,</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="n">limit</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$countryRepository</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Dans ce <strong>QueryHandler</strong>, je récupère le <strong>Repository</strong> et je lui indique que je veux trier les résultats par nom. Si un filtre par <strong>nom</strong> est spécifié, je demande au <strong>Repository</strong> de ne récupérer que les <strong>Country</strong> correspondant à ce filtre. Si la pagination est activée, je demande au <strong>Repository</strong> de l’appliquer (donc de limiter à trente éléments et de récupérer les <strong>Country</strong> à partir de la page 2, par exemple).</p>

<p>Ce qui peut surprendre, c’est le retour du <strong>Repository</strong> : cela permet de coller au fonctionnement d’<strong><em>Api Platform</em></strong> et à sa manière de gérer la pagination. Le fait de retourner le <strong>Repository</strong> n’enfreint aucune règle du <strong>CQRS</strong> ou du <strong>DDD</strong>, c’est pourquoi j’ai accepté de suivre cette approche.</p>

<h3 id="vision-du-futur-4">Vision du futur</h3>

<p>En utilisant un modèle de lecture, je pourrais m’abstraire de cette partie un peu étrange et le <strong>Repository</strong> ne porterait plus la responsabilité de la lecture, ce qui éliminerait les bizarrerie au sein du <strong>Domain</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Repository</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Country\Domain\Entity\Country</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Shared\Domain\Repository\RepositoryInterface</span><span class="p">;</span>

<span class="cd">/**
* @extends RepositoryInterface&lt;Country&gt;
*/</span>
<span class="kd">interface</span> <span class="nc">CountryRepositoryInterface</span> <span class="kd">extends</span> <span class="nc">RepositoryInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">ofName</span><span class="p">(</span><span class="kt">string</span> <span class="nc">Sname</span><span class="p">):</span> <span class="kt">?Country</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">add</span> <span class="p">(</span><span class="kt">Country</span> <span class="nc">Scountry</span><span class="p">):</span> <span class="kt">void</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">withName</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$name</span><span class="p">):</span> <span class="kt">self</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">sortName</span><span class="p">():</span> <span class="kt">self</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Le <strong>Repository</strong> ressemble à ça. Je vais vous montrer l’implémentation avec <strong><em>Doctrine</em></strong>. Je ne l’expliquerai pas car cela n’a aucun intérêt pour l’article. Je trouve cependant important de vous montrer tout le code pour cette partie.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Infrastructure\Doctrine\Repository</span><span class="p">;</span>

<span class="cd">/**
 * @extends DoctrineRepository&lt;Country&gt;
 */</span>
<span class="k">final</span> <span class="kd">class</span> <span class="nc">CountryDoctrineAdapter</span> <span class="kd">extends</span> <span class="nc">DoctrineRepository</span> <span class="kd">implements</span> <span class="nc">CountryAdapterInterface</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">const</span> <span class="no">string</span> <span class="no">ENTITY_CLASS</span> <span class="o">=</span> <span class="nc">Country</span><span class="o">::</span><span class="n">class</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">const</span> <span class="no">string</span> <span class="no">ALIAS</span> <span class="o">=</span> <span class="s1">'country'</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">DocumentManager</span> <span class="nv">$documentManager</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="k">parent</span><span class="o">::</span><span class="nf">__construct</span><span class="p">(</span><span class="nv">$documentManager</span><span class="p">,</span> <span class="k">self</span><span class="o">::</span><span class="no">ENTITY_CLASS</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">ofName</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$name</span><span class="p">):</span> <span class="kt">?Country</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">documentManager</span><span class="o">-&gt;</span><span class="nf">getRepository</span><span class="p">(</span><span class="k">self</span><span class="o">::</span><span class="no">ENTITY_CLASS</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">findOneBy</span><span class="p">([</span><span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="nv">$name</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">add</span><span class="p">(</span><span class="kt">Country</span> <span class="nv">$country</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">documentManager</span><span class="o">-&gt;</span><span class="nf">persist</span><span class="p">(</span><span class="nv">$country</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">documentManager</span><span class="o">-&gt;</span><span class="nb">flush</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">withName</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">self</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">filter</span><span class="p">(</span><span class="k">static</span> <span class="k">function</span> <span class="p">(</span><span class="kt">Builder</span> <span class="nv">$qb</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$name</span><span class="p">):</span> <span class="kt">void</span> <span class="p">{</span>
            <span class="nv">$qb</span><span class="o">-&gt;</span><span class="nf">field</span><span class="p">(</span><span class="s1">'name'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">text</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">sortName</span><span class="p">():</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">filter</span><span class="p">(</span><span class="k">static</span> <span class="k">function</span> <span class="p">(</span><span class="kt">Builder</span> <span class="nv">$qb</span><span class="p">):</span> <span class="kt">void</span> <span class="p">{</span>
            <span class="nv">$qb</span><span class="o">-&gt;</span><span class="nb">sort</span><span class="p">(</span><span class="s1">'name'</span><span class="p">,</span> <span class="s1">'ASC'</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>C’était un article très copieux ! J’y ai abordé le <strong>TDD</strong> ainsi que la création d’un <strong>Supporting Domain</strong>. Je vous ai également présenté deux nouveaux use case de <strong>Domain</strong>. Pourtant, je n’ai pas encore eu l’occasion d’aborder le <strong>Core Domain</strong>. Ce sera l’objet d’un prochain article, où je discuterai de la communication entre les <strong>Domain</strong> et les nombreuses erreurs que j’ai commises à ce sujet.</p>]]></content><author><name>Hugues Gobet</name><email>hugues.gobet@gmail.com</email></author><category term="ddd-logbook" /><summary type="html"><![CDATA[Dans cet article, je vais aborder la notion de « Country » dans le cadre d’un Supporting Domain en prenant comme exemple un Domain Country. Je vais également détailler l’exposition d’une API permettant de récupérer les informations d’un pays et de vérifier son existence. Je commencerai par rappeler la définition d’un Supporting Subdomain ; ensuite je vous expliquerai comment le mettre en place pas à pas. Supporting Subdomain : qu’est-ce que c’est ? Comme son nom l’indique, un Supporting Subdomain est avant tout un Subdomain : il représente une partie du Domain qui peut être séparé en module. Dans un projet d’entreprise, une équipe distincte pourrait en être responsable. Un Subdomain peut parfaitement disposer de son propre Ubiquitous Language lorsqu’il appartient à un Bounded Context différent du Core Domain. Bien qu’important pour le métier, le Supporting Subdomain l’est pourtant moins que le Core Domain. Il n’est pertinent de créer un Supporting Subdomain que s’il apporte une valeur spécifique ou répond à un besoin particulier. Dans le cas de notre API de gestion de bouteilles de vins, j’ai créé un Domain Country pour séparer cette notion du Core Domain qui gère le Bottle Inventory. Cette séparation permet d’organiser le code dans deux Bounded Context distincts. De plus, ce Domain est essentiel pour pouvoir proposer une liste de pays lors de la création d’une bouteille, tout en s’assurant que le pays existe réellement. Toutefois, comme il reste moins crucial que le Core Domain, il correspond parfaitement à la définition d’un Supporting Subdomain. Comment mettre en place le Domain ? Dans cet article, je vais illustrer la mise en place du Domain à travers deux use cases. J’ai choisi de ne pas séparer ces cas en plusieurs parties, car ils sont assez répétitifs et ne représentent pas un véritable défi en terme de Domain-Driven Design (DDD). Voici les deux scénarios que je vais aborder : La création d’un Country La récupération de la liste de tous les Country Je vous propose d’aborder ce sujet selon une approche différente de celle abordée pour le use case d’authentification. Je commencerai donc par la définition de l’Entity, accompagnée de tests unitaires afin d’intégrer une démarche orientée Test-Driven Development (TDD). Présentation rapide du TDD Le Test-Driven Development (TDD) est une méthodologie de développement très intéressante qui mériterait un article complet à elle-seule. Si vous cherchez des informations pour approfondir le sujet, je vous recommande vivement le livre Test-Driven Development : By Example de Kent Beck. L’idée fondamentale derrière cette méthodologie est d’écrire les tests avant d’écrire la fonctionnalité correspondante. Cependant, l’essence même de cette approche réside dans une démarche progressive et rigoureuse, étape par étape (faire du pas-à-pas). Dans le but d’illustrer cette méthode, je vous propose d’examiner les tests liés à la création d’une Entity Country. Première étape : test de la création d’une Entity Country Nous commencerons par un test simple permettant de valider la création correcte d’une Entity Country. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public function testCreateSuccess(): void { $country = Country::create( CountryId::fromString('af785dbb-4ac1-4786-a5aa-1fed08f6ec26'), CountryName::fromString('France'), ); $this-&gt;assertInstanceOf( Country::class, $country, ); $this-&gt;assertEquals( 'af785dbb-4ac1-4786-a5aa-1fed08f6ec26', $country-&gt;id()-&gt;value(), ); $this-&gt;assertEquals( 'France', $country-&gt;name()-&gt;value(), ); } Ce test permet de décrire précisément ce qui est attendu en sortie de la méthode Factory create. Dans une démarche TDD, le but est d’obtenir un test vert (c’est-à-dire réussi) le plus rapidement possible (c’est-à-dire en succès). Lors de la première exécution du test, une erreur remonte immédiatement : la classe n’existe pas. Cette situation, tout à fait normale, fait partie intégrante de la démarche TDD. Chaque étape de correction vise à résoudre l’erreur actuelle pour progressivement construire une implémentation validée par les tests. Pour obtenir un test vert rapidement, j’ai donc commencé par créer l’Entity Country, ce qui a permis de modifier le message d’erreur. J’ai ensuite créé une method create dans l’Entity Country. Dans un premier temps, cela ne fait rien, mais elle permet de faire progresser le passage au vert du test. 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Entity; final readonly class Country { public static function create(): self { } } Le message d’erreur dit maintenant que le Value Object CountryId n’existe pas. Afin de régler le problème, je le crée, mais le plus simplement possible. 1 2 3 4 5 6 7 8 9 10 &lt;?php declare(strict_types=1); namespace App\Country\Domain\ValueObject; final readonly class CountryId { } Le message suivant précise qu’il ne trouve pas la méthode fromString, que je rajoute également. 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;?php declare(strict_types=1); namespace App\Country\Domain\ValueObject; final readonly class CountryId { public static function fromString(string $value): self { return new self(); } } On a désormais un message qui dit que le Value Object CountryName n’existe pas. Je crée donc cette classe, et comme lors de la création du Value Object CountryId, j’anticipe en ajoutant une method fromString. Vision du futur L’idée est de n’anticiper que de petites portions de code, étape par étape, afin de rester concentré sur l’objectif principal : faire passer le test au vert le plus vite possible. 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;?php declare(strict_types=1); namespace App\Country\Domain\ValueObject; final readonly class CountryName { public static function fromString(string $value): self { return new self(); } } Le message d’erreur des tests indique maintenant que la méthode Factory de l’Entity Country ne retourne pas d’Entity. Pour résoudre ce problème, j’adopte l’approche la plus simple possible. Pour le corriger je fais en sorte que la méthode create retourne une Entity Country. 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Entity; final readonly class Country { public static function create(): self { return new self(); } } Maintenant, la method retourne bien une Entity, mais les tests signalent une nouvelle erreur : l’absence de Method pour exposer mon id. Ce genre de problème se reproduira également pour l’attribut name. Je vais maintenant devoir créer ces Method. Avant de lex implémenter, il est crucial de savoir ce qu’elles doivent retourner. Pour aller au plus simple, elles vont renvoyer exactement ce que le test attend qu’elles retournent. Ce qui nous donne donc : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Entity; use App\Country\Domain\ValueObject\CountryId; use App\Country\Domain\ValueObject\CountryName; final readonly class Country { public static function create(): self { return new self(); } public function id(): CountryId { return CountryId::fromString('af785dbb-4ac1-4786-a5aa-1fed08f6ec26'); } public function name(): CountryName { return CountryName::fromString( 'France' ); } } Le test devrait maintenant être réussi. Cependant, dans les Value Object, il manque la method value pour récupérer leur valeur. Je vais donc l’ajouter. Une autre problématique réside dans l’assignation de la valeur passée dans la méthode fromString. Je vais régler ces deux problèmes en une seule opération. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 &lt;?php declare(strict_types=1); namespace App\Country\Domain\ValueObject; final readonly class CountryId { public function __construct( private string $value, ) {} public static function fromString(string $value): self { return new self($value); } public function value(): string { return $this-&gt;value; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 &lt;?php declare(strict_types=1); namespace App\Country\Domain\ValueObject; final readonly class CountryName { public function __construct( private string $value, ) {} public static function fromString(string $value): self { return new self($value); } public function value(): string { return $this-&gt;value; } } Voici donc à quoi ressemble les Value Object à ce stade. L’objectif de faire passer les tests au vert est atteint, ce qui est parfait. Tout cela est bien beau, mais nous avons un peu triché en mettant les valeurs en dur dans l’Entity. Nous avons atteint l’objectif du test rapidement, de la manière la plus naïve possible. Il faut désormais aborder la deuxième étape : refactorer le code pour l’améliorer et le rendre vraiment fonctionnel. Deuxième étape : rendre le code fonctionnel Pour cela, il faut que l’Entity Country dispose de deux propriétés distinctes pour l’id et le name. Il faut ensuite que les method id et name retournent les valeurs des propriétés. Le refactoring doit être réalisé par petites étapes, en veillant à ne travailler que sur ce qui est couvert par le test. Puisque le test de cet exemple se concentre sur la method create, je vais me limiter à refactorer du code qui concerne cette method, sans toucher à d’autres Entities. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Entity; use App\Country\Domain\ValueObject\CountryId; use App\Country\Domain\ValueObject\CountryName; final readonly class Country { public function __construct( private CountryId $id, private CountryName $name, ) {} public static function create(): self { return new self(); } public function id(): CountryId { return $this-&gt;id; } public function name(): CountryName { return $this-&gt;name; } } Voilà quoi ressemble l’Entity. Relançons maintenant les tests pour voir si cela marche toujours. Et là, c’est le drame ! Le test est cassé. Retour à la case départ : le faire passer vert au plus vite. D’après le message d’erreur, le constructeur de l’Entity Country doit prendre deux paramètres. Or, en regardant de plus près le code de l’Entity, on remarque qu’aucun argument n’est passé au constructeur dans la method create. Il faut cependant que cette method prenne ces deux paramètres pour pouvoir les transmettre au constructeur de l’Entity. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Entity; use App\Country\Domain\ValueObject\CountryId; use App\Country\Domain\ValueObject\CountryName; final readonly class Country { public function __construct( private CountryId $id, private CountryName $name, ) {} public static function create( CountryId $id, CountryName $name, ): self { return new self( $id, $name, ); } public function id(): CountryId { return $this-&gt;id; } public function name(): CountryName { return $this-&gt;name; } } En relançant le test, celui-ci est désormais dans le vert. On a donc créé la method create de l’Entity Country en suivant les bonnes pratiques du TDD. Ce qu’il faut retenir En appliquant le TDD, on peut être sûr que le test reflète parfaitement le besoin du métier et que ce dernier est correctement validé. Je vous recommande de l’adopter autant que possible, car cela facilite la conception de vos use case métier et garantit que votre code métier à un code coverage le plus proche possible des 100%. Ajouter de la valeur aux Value Object Pour renforcer la valeur des Value Objects, il est essentiel d’ajouter des vérifications sur leur contenu. On peut par exemple valider que la Value Object CountryId est bien un UUID: pour cela, on peut utiliser une librairie existante ou écrire son propre code. Il faut, bien entendu, commencer par écrire un test, puis implémenter la validation dans l’Entity correspondante. Voici à quoi ressemble le test : 1 2 3 4 5 6 7 8 9 public function testCreateBadIdNotUuid(): void { $this-&gt;expectException(\InvalidArgumentException::class); Country::create( CountryId::fromString('12'), CountryName::fromString('France'), ); } Sans surprise, il ne passe pas. Pour faire passer le test au vert facilement, on doit ajouter une vérification dans le Value Object pour s’assurer que la valeur passée est bien un UUID. Pour cela, j’utilise la librairie PHP : https://github.com/webmozarts/assert. Premièrement, je l’installe en suivant la documentation officielle. Ensuite, il suffit d’ajouter la vérification appropriée pour émettre l’exception voulue. Voici le code de la Value Object mis à jour : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 &lt;?php declare(strict_types=1); namespace App\Country\Domain\ValueObject; use Webmozart\Assert\Assert; final readonly class CountryId { private string $value; public function __construct( string $value, ) { Assert::uuid($value); $this-&gt;value = $value; } public static function fromString(string $value): self { return new self($value); } public function value(): string { return $this-&gt;value; } } Le test devrait passer : Parfait ! Ce Domain, très simple et avec peu de règles, est terminé. Dans le futur nous verrons des Domain plus complexes. Mise en place des use case Nous allons maintenant développer les use case dans le Domain que nous venons de créer. Création du Country Nous commençons par importer des produits depuis un fichier récupéré sur Internet. La première étape est d’écrire le test du Primary Adapter qui est la Command Symfony ImportCountryCommand. 1 2 3 4 5 6 7 8 9 10 11 public function testExecute(): void { self::bootkernel(); $application = new Application(self::$kernel); $command = $application-&gt;find('country:import'); $commandTester = new CommandTester(Scommand); $commandTester-&gt;execute([]); $commandTester-&gt;assertCommandIsSuccessful(); $output = $commandTester-&gt;getDisplay(); $this-&gt;assertStringContainsString('[OK] Countries created: 241', $output); } Le code en question est lié à Symfony, donc je ne m’y attarderai pas trop longtemps. L’essentiel ici est de comprendre l’assert qui valide le test : à la fin de la commande, le message ‘[OK] Countries created: 241’ doit s’afficher, avec le nombre de pays créés. Une fois cette vérification faite, nous pouvons passer au code. Celui de la Command Symfony n’est pas très intéressant car il s’agit principalement de la lecture de fichier, ce qui relève de la couche Infrastructure, et non du Domain. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 private function handleFile(): int { $countryCreated = 0; $handle = fopen($this-&gt;getFilePath(), 'r'); if ($handle === false) { throw new \RuntimeException('Unable to open file'); } while (($data = fgetcsv($handle, 1000)) !== false) { if ($data[4] === null) { continue; } $this-&gt;commandBus-&gt;dispatch(new CreateCountryCommand($data[4])); ++$countryCreated; } fclose($handle); return $countryCreated; } Vision du futur Ici on pourrait aussi mettre en forme un tableau avec tous les noms des pays et dispatch une Command pour importer tous les pays d’un seul coup. Cette façon de faire respecterais plus le CQRS ou le changement sur le système doit être englobé dans une seule Command. Je pense que ce changement devrait être fait. Voici un extrait de la Command Symfony, qui montre la partie responsable de la lecture du fichier et du dispatch de la Command. Je passe rapidement cette section, car elle n’est pas cruciale ici. Ce qu’il faut retenir, c’est que le fichier est lu et une Command est dispatchée avec le nom du pays qu’il contient. Pour ce Domain, je n’ai besoin d’aucune autre information, donc je ne prends que le nom. Cependant, on pourrait très bien imaginer traiter d’autres informations, selon les besoins du Domain Country ou du Core Domain. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 &lt;?php declare(strict_types=1); namespace App\Country\Application\Command; use TegCorp\SharedKernelBundle\Application\Command\CommandInterface; /** * @implements CommandInterface&lt;void&gt; */ final readonly class CreateCountryCommand implements CommandInterface { public function __construct( public string $name, ) { } } La Command vraiment très simple ne prend qu’un nom. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 &lt;?php declare(strict_types=1); namespace App\Country\Application\Command; #[AsCommandHandler] final readonly class CreateCountryCommandHandler { public function __construct( private CountryRepositoryInterface $countryRepository, private DomainEventDispatcherInterface $dispatcher, private IdFactory $idFactory, ) { } /** * @throws CountryAlreadyExistsException */ public function __invoke(CreateCountryCommand $command): void { if ($this-&gt;countryRepository-&gt;ofName(CountryName::fromString($command-&gt;name)) !== null) { throw new CountryAlreadyExistsException(); } $country = Country::create( CountryId::fromString($this-&gt;idFactory-&gt;create()), CountryName::fromString($command-&gt;name), ); $this-&gt;countryRepository-&gt;add($country); $this-&gt;dispatcher-&gt;dispatch($country); } } Le CommandHandler fait partie de la couche Application, il permet de relier la couche Infrastructure au Domain. Le CommandHandler vérifie si le Country n’existe pas déjà, en utilisant le Repository. Si le pays existe déjà, on throw une exception. On peut se permettre de rechercher par nom pour garantir l’unicité, car chaque nom de pays est unique. La méthode Factory de notre Entity Country permet de créer le Pays. Une fois créé, on l’enregistre dans le système à l’aide du Repository. Pour finir, on dispatche les Domain Events liés à la création du Country. Le Repository est une notion du Domain, nous créons donc une Interface pour utiliser l’Inversion de dépendance : on déclare une Interface dans le Domain pour un Repository (avec la method add par exemple), et on implémente dans la couche Infrastructure la method add du Repository qui enregistre la nouvelle Entity dans la base de données (dans notre cas). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Repository; /** * @extends RepositoryInterface&lt;Country&gt; */ interface CountryRepositoryInterface extends RepositoryInterface { public function ofName(CountryName $name): ?Country; public function add(Country $country): void; } Dans le Repository, on définit les deux method nécessaires pour interagir avec le Domain : – ofName: récupère un pays par son nom ou renvoie null si le Country n’existe pas – add: se charge d’enregistrer le Country dans le système L’implémentation du Repository n’est pas vraiment intéressante, car liée à Symfony, mais je la montre quand même pour compléter l’implémentation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 &lt;?php declare(strict_types=1); namespace App\Country\Infrastructure\Doctrine\Repository; final class CountryDoctrineRepository implements CountryRepositoryInterface { private const string ENTITY_CLASS = CountryDoctrine::class; private const string ALIAS = 'country'; public function __construct(EntityManagerInterface $entityManager) { parent::__construct($entityManager, self::ENTITY_CLASS, self::ALIAS); } #[\Override] public function ofName( CountryName $name, ): ?Country { $country = $this-&gt;entityManager -&gt;getRepository(self::ENTITY_CLASS) -&gt;findOneBy(['name' =&gt; $name-&gt;value()]) ; if ($country === null) { return null; } return CountryMapper::toDomain($country); } #[\Override] public function add(Country $country): void { $countryDoctrine = CountryMapper::toInfrastructurePersist($country); $this-&gt;entityManager-&gt;persist($countryDoctrine); $this-&gt;entityManager-&gt;flush(); } } Je ne rentrerais pas dans le détail de l’implémentation, mais nous retrouvons bien les deux method déclarées dans l’Interface du Repository. Cela clôt l’implémentation du use case pour la création du Country. Je vais maintenant ajouter une petite fonctionnalité dans le Domain: l’enregistrement d’un Domain Event lorsqu’une Entity Country est créée. Enregistrement d’un Domain Event lié à la création d’une Entity Country Pour cela, j’ai créé une Interface que les Entity doivent implémenter pour enregistrer leurs événements métiers. Ensuite, j’utilise un Event Dispatcher pour dispatcher tous les événements d’une Entity. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 &lt;?php declare(strict_types=1); namespace App\Shared\Domain\Entity; use App\Shared\Domain\Event\DomainEventInterface; interface EntityWithDomainEventInterface { /** * @return DomainEventInterface[] */ public static function getRecordedEvent(): array; public static function recordEvent(DomainEventInterface $event): void; public static function eraseRecordedEvents(): void; } Cette Interface définit trois method : getRecordedEvent : permet de récupérer tous les Domain Event enregistrés sur une Entity recordEvent : permet d’enregistrer un Domain Event suite à une action sur le Domain eraseRecordedEvents : permet de supprimer les Domain Event quand on les a dispatchés afin de ne pas les traiter deux fois. Pour créer les method liées à cette Interface, il est nécessaire que les Domain Event eux-mêmes implémentent une Interface. Celle-ci sera ensuite utilisée pour typer les Domain Event. 1 2 3 4 5 6 7 8 9 &lt;?php declare(strict_types=1); namespace App\Shared\Domain\Event; interface DomainEventInterface { } Il faut ensuite faire en sorte que l’Entity Country implémente ces method. Pour ce faire, j’ai choisi de créer un Trait PHP, ce qui permet d’ajouter ces method à l’Entity sans avoir à utiliser l’héritage. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 &lt;?php declare(strict_types=1); namespace App\Shared\Domain\Entity; use App\Shared\Domain\Event\DomainEventInterface; trait EntityDomainEventTrait { private static array $recordedEvents = []; #[\Override] public static function getRecordedEvent(): array { return self::$recordedEvents; } #[\Override] public static function recordEvent(DomainEventInterface $event): void { self::$recordedEvents[] = $event; } #[\Override] public static function eraseRecordedEvents(): void { self::$recordedEvents = []; } } Pour que l’Entity Country dispose de ces method, elle doit implémenter l’Interface EntityWithDomainEventInterface et utiliser le trait EntityDomainEventTrait. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Entity; final class Country implements EntityWithDomainEventInterface { use EntityDomainEventTrait; public function __construct( private CountryId $id, private CountryName $name, ) { } public static function create( CountryId $id, CountryName $name, ): self { return new self( $id, $name, ); } public function id(): CountryId { return $this-&gt;id; } public function name(): CountryName { return $this-&gt;name; } } À présent, l’Entity Country est prête à enregistrer des Domain Event. L’Event sera en charge d’indiquer qu’un Country a été créé, avec pour valeurs l’id et le nom. Pour cela, on crée un Event CountryCreated. Un Domain Event doit être identifiable pour vérifier que le même Event n’est pas consommé plusieurs fois. Il doit également avoir une date de publication afin d’être traité dans l’ordre d’enregistrement, si cet ordre à de l’importance. Pour répondre à ces besoins, j’ai donc créé une Abstract Class qui permet d’ajouter ces informations à chaque Event que l’on créera en faisant de l’héritage. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &lt;?php declare(strict_types=1); namespace App\Shared\Domain\Event; use Ramsey\Uuid\Uuid; use Symfony\Contracts\EventDispatcher\Event; abstract class DomainEvent extends Event { public readonly string $id; public readonly int $occurredOn; public function __construct( ) { $this-&gt;id = Uuid::uuid4()-&gt;toString(); $this-&gt;occurredOn = time(); } } On crée l’Event qui va étendre cette classe et implémenter l’Interface précédemment créée. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Event; use App\Shared\Domain\Event\DomainEvent; use App\Shared\Domain\Event\DomainEventInterface; final class CountryCreated extends DomainEvent implements DomainEventInterface { public function __construct( public string $countryId, public string $name, ) { parent::__construct(); } } Il ne reste plus qu’à enregistrer cet Event au moment de la création du Country. Enregistrer un Domain Event à chaque action dans le système n’est pas obligatoire. C’est cependant très utile pour respecter la séparation des préoccupations (Separation of concerns). Le CommandHandler a pour but de créer l’Entity Country. Si d’autres actions doivent être effectuées, elles ne doivent pas faire partie de ce CommandHandler. Il est donc important de segmenter le code et les Event : c’est un bon moyen d’y parvenir. On pourrait imaginer que cet Event soit écouté pour effectuer des actions telles que l’écriture du Country dans le modèle de lecture, ou pour notifier un autre Domain qu’un nouveau Country a été créé. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Entity; final class Country implements EntityWithDomainEventInterface { use EntityDomainEventTrait; public function __construct( private CountryId $id, private CountryName $name, ) { } public static function create( CountryId $id, CountryName $name, ): self { $country = new self( $id, $name, ); $country::recordEvent( new CountryCreated( $country-&gt;id-&gt;value(), $country-&gt;name-&gt;value(), ) ); return $country; } public function id(): CountryId { return $this-&gt;id; } public function name(): CountryName { return $this-&gt;name; } } L’Event est enregistré et sera dispatché dans le CommandHandler grâce à cette ligne : 1 $this-&gt;dispatcher-&gt;dispatch($country); Vision du futur C’est très important de dispatch le Domain Event après que l’action soit effectué. La partie création de l’Entity Country est désormais terminée. Exposer une liste de pays On souhaite maintenant pouvoir exposer une liste de pays via une API. Pour cela nous allons utiliser Api Platform (https://api-platform.com/), un framework pour faciliter la création d’API REST en respectant les standards du secteur. Explication rapide d’API Platform Ce framework très complet se base sur des classes Resources dans lesquelles nous déclarons des opérations. Ces opérations sont liées aux verbes HTTP (GET, PUT, POST, DELETE) et chaque opération se voit attribuer des Processor ( pour PUT, DELETE et POST) et des Provider (pour GET). API Platform offre une multitude d’autres fonctionnalités. J’en effleure seulement la surface pour que vous puissiez comprendre ce qui se passe en lisant le code. Voilà mon use case : Comme expliqué plus haut, en utilisant Api Platform, le Primary Adapter est le Country Provider. J’écris d’abord un test rapide pour récupérer la liste de mes pays. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public function testGetCollection(): void { $this-&gt;get('/api/countries'); $this-&gt;assertResponseIsSuccessful(); $this-&gt;assertJsonContains([ '@context' =&gt; '/api/contexts/Country', '@id' =&gt; '/api/countries', '@type' =&gt; 'Collection', 'member' =&gt; [ [ '@type' =&gt; 'Country', 'name' =&gt; 'Afghanistan', ], [ '@type' =&gt; 'Country', 'name' =&gt; 'Afrique du Sud', ], ], 'totalItems' =&gt; 30, ]); } Dans ce test, je fais une requête sur l’uri ‘/api/countries’, qui renvoie une liste de Country avec leur nom. Je dois récupérer trente pays, car la pagination est activée pour les récupérer par lot de trente (ce qui géré est par défaut par Api Platform). On commence donc pas créer la Resource Country, qui est différente de l’Entity Country. La responsabilité de cette Resource est de porter l’opération d’Api Platform et de renvoyer les données via notre API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 &lt;?php declare(strict_types=1); namespace App\Country\Infrastructure\ApiPlatform\Resource; #[ApiResource( shortName: 'Country', )] #[GetCollection( '/countries', filters: [CountryFilter::class], provider: GetCountryCollectionProvider::class, )] final class GetCollectionCountryResource { public function __construct( #[ApiProperty(readable: false, writable: false, identifier: true)] public ?AbstractUid $id = null, #[ApiProperty] public ?string $name = null, ) { } public static function fromModel(Country $country): self { return new self( new Uuid($country-&gt;id), $country-&gt;name, ); } } On ajoute une opération de type GetCollection, car on veut récupérer une liste de Resource Country. On spécifie un Provider qui sera chargé de dispatcher la Query pour lire les données dans le système. On définit ensuite les champs à retourner, on ajoute l’attribut ApiProperty pour indiquer que ces propriétés doivent être exposées via l’API. Pour finir, on définit une method fromModel qui permet de transformer les Entity Country en Resource Country. J’ai également précisé un argument filters dans l’attribut GetCollection Cela permet de définir un ou plusieurs filtres, utiles pour le côté interne d’Api Platform et pour apparaître dans les metadata du retour de notre API. Je ne rentre pas plus dans le détail car ce n’est pas essentiel pour l’apprentissage du DDD, mais voilà à quoi ressemble cette classe CountryFilter. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 &lt;?php declare(strict_types=1); namespace App\Country\Infrastructure\ApiPlatform\OpenApi; use ApiPlatform\Metadata\FilterInterface; use Symfony\Component\PropertyInfo\Type; final readonly class CountryFilter implements FilterInterface { #[\Override] public function getDescription(string $resourceClass): array { return [ 'name' =&gt; [ 'property' =&gt; 'name', 'type' =&gt; Type::BUILTIN_TYPE_STRING, 'required' =&gt; false, ], ]; } } Ainsi que le Provider : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 &lt;?php declare(strict_types=1); namespace App\Country\Infrastructure\ApiPlatform\State\Provider; /** * @implements ProviderInterface&lt;GetCollectionCountryResource&gt; */ final readonly class GetCountryCollectionProvider implements ProviderInterface { public function __construct( private QueryBusInterface $queryBus, private Pagination $pagination, ) { } /** * @return Paginator&lt;GetCollectionCountryResource&gt;|list&lt;GetCollectionCountryResource&gt; */ #[\Override] public function provide(Operation $operation, array $uriVariables = [], array $context = []): array|Paginator { $name = $context['filters']['name'] ?? null; $page = $limit = 0; if ($this-&gt;pagination-&gt;isEnabled($operation)) { $page = $this-&gt;pagination-&gt;getPage($context); $limit = $this-&gt;pagination-&gt;getLimit($operation, $context); } $models = $this-&gt;queryBus-&gt;ask(new GetCountriesQuery($name, $page, $limit)); $resources = []; foreach ($models as $model) { $resources[] = GetCollectionCountryResource::fromModel($model); } if (null !== $paginator = $models-&gt;paginator()) { $resources = new Paginator( new \ArrayIterator($resources), (float) $paginator-&gt;getCurrentPage(), (float) $paginator-&gt;getItemsPerPage(), (float) $paginator-&gt;getLastPage(), (float) $paginator-&gt;getTotalItems(), ); } return $resources; } } Ce Provider contient beaucoup de code spécifique à Api Platform, mais je vais quand même prendre un peu de temps pour vous l’expliquer, car cela touche à certaines réflexions concernant le DDD. Premièrement, je récupère le filtre par nom s’il est spécifié et j’initialise la pagination à 0. Puis je récupère la pagination dans l’url si c’est activé. Ensuite, je dispatche la Query, responsable de lire les données dans le système. Après cela, je parcours toutes les Entity retournées par la Query et je les transforme en Resource. Pour finir, je mets en place la pagination (si elle est activée pour cette Resource) et je retourne les Resources, qu’elles soient paginées ou non. Vision du futur Gérer la pagination ne relève pas de la responsabilité du QueryHandler, c’est une problématique de l’Infrastructure ou de l’Application. À nous de nous adapter. Pour faire cela, il faudrait mettre en place un modèle de lecture (via des projections), mais je me suis rendu compte de cela plus tard. Pour l’instant, la pagination est donc portée par le Repository, ce qui n’est pas une bonne pratique. Si vous voulez un exemple plus détaillé, j’ai écrit un article à ce sujet que vous pouvez retrouver ici. Maintenant que tout cela est plus clair, voici la Query qu’on dispatch. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 &lt;?php declare(strict_types=1); namespace App\Country\Application\Query; use App\Country\Application\Adapter\CountryRepositoryInterface; use App\Shared\Application\Query\QueryInterface; /** * @implements QueryInterface&lt;CountryRepositoryInterface&gt; */ final readonly class GetCountriesQuery implements QueryInterface { public function __construct( public ?string $name = null, public ?int $page = null, public ?int $limit = null, ) { } } Ensuite le QueryHandler : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 &lt;?php declare(strict_types=1); namespace App\Country\Application\Query; use App\Country\Application\Adapter\CountryRepositoryInterface; use App\Shared\Application\Query\AsQueryHandler; #[AsQueryHandler] final readonly class GetCountriesQueryHandler { public function __construct( private CountryRepositoryInterface $countryRepository, ) { } public function __invoke(GetCountriesQuery $query): CountryRepositoryInterface { $countryRepository = $this-&gt;countryRepository; $countryRepository = $countryRepository-&gt;sortName(); if ($query-&gt;name !== null) { $countryRepository = $countryRepository-&gt;withName($query-&gt;name); } if ($query-&gt;page !== null &amp;&amp; $query-&gt;limit !== null) { $countryRepository = $countryRepository-&gt;withPagination($query-&gt;page, $query-&gt;limit); } return $countryRepository; } } Dans ce QueryHandler, je récupère le Repository et je lui indique que je veux trier les résultats par nom. Si un filtre par nom est spécifié, je demande au Repository de ne récupérer que les Country correspondant à ce filtre. Si la pagination est activée, je demande au Repository de l’appliquer (donc de limiter à trente éléments et de récupérer les Country à partir de la page 2, par exemple). Ce qui peut surprendre, c’est le retour du Repository : cela permet de coller au fonctionnement d’Api Platform et à sa manière de gérer la pagination. Le fait de retourner le Repository n’enfreint aucune règle du CQRS ou du DDD, c’est pourquoi j’ai accepté de suivre cette approche. Vision du futur En utilisant un modèle de lecture, je pourrais m’abstraire de cette partie un peu étrange et le Repository ne porterait plus la responsabilité de la lecture, ce qui éliminerait les bizarrerie au sein du Domain. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Repository; use App\Country\Domain\Entity\Country; use App\Shared\Domain\Repository\RepositoryInterface; /** * @extends RepositoryInterface&lt;Country&gt; */ interface CountryRepositoryInterface extends RepositoryInterface { public function ofName(string Sname): ?Country; public function add (Country Scountry): void; public function withName(string $name): self; public function sortName(): self; } Le Repository ressemble à ça. Je vais vous montrer l’implémentation avec Doctrine. Je ne l’expliquerai pas car cela n’a aucun intérêt pour l’article. Je trouve cependant important de vous montrer tout le code pour cette partie. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 &lt;?php declare(strict_types=1); namespace App\Country\Infrastructure\Doctrine\Repository; /** * @extends DoctrineRepository&lt;Country&gt; */ final class CountryDoctrineAdapter extends DoctrineRepository implements CountryAdapterInterface { private const string ENTITY_CLASS = Country::class; private const string ALIAS = 'country'; public function __construct( DocumentManager $documentManager, ) { parent::__construct($documentManager, self::ENTITY_CLASS); } #[\Override] public function ofName(string $name): ?Country { return $this-&gt;documentManager-&gt;getRepository(self::ENTITY_CLASS)-&gt;findOneBy(['name' =&gt; $name]); } #[\Override] public function add(Country $country): void { $this-&gt;documentManager-&gt;persist($country); $this-&gt;documentManager-&gt;flush(); } #[\Override] public function withName( string $name, ): self { return $this-&gt;filter(static function (Builder $qb) use ($name): void { $qb-&gt;field('name')-&gt;text($name); }); } #[\Override] public function sortName(): self { return $this-&gt;filter(static function (Builder $qb): void { $qb-&gt;sort('name', 'ASC'); }); } } C’était un article très copieux ! J’y ai abordé le TDD ainsi que la création d’un Supporting Domain. Je vous ai également présenté deux nouveaux use case de Domain. Pourtant, je n’ai pas encore eu l’occasion d’aborder le Core Domain. Ce sera l’objet d’un prochain article, où je discuterai de la communication entre les Domain et les nombreuses erreurs que j’ai commises à ce sujet.]]></summary></entry><entry xml:lang="fr"><title type="html">Journal de bord de l’apprentissage du Domain-Driven Design : Jour 4</title><link href="https://huguesgobet.com/ddd-logbook/2025-01-27" rel="alternate" type="text/html" title="Journal de bord de l’apprentissage du Domain-Driven Design : Jour 4" /><published>2025-01-27T08:00:00+00:00</published><updated>2025-01-27T08:00:00+00:00</updated><id>https://huguesgobet.com/fr/ddd-logbook/journal-de-bord-jour-quatre</id><content type="html" xml:base="https://huguesgobet.com/ddd-logbook/2025-01-27"><![CDATA[<p>Après trois articles axés sur la théorie - indispensables pour poser des bases solides - je vous propose aujourd’hui un cas concret : l’authentification d’un utilisateur. Cet article s’éloigne légèrement du <strong>Domain Driven Design (DDD)</strong> pour se concentrer sur la mise en place et l’utilisation de l’<strong>Architecture Hexagonale</strong> et le <strong>CQRS</strong>. Je mentionnerai tout de même l’<strong>Entity User</strong>, mais l’essentiel portera sur l’aspect pratique. Si vous avez besoin d’un rappel sur ces concepts, vous pouvez vous référer à l’article du jour 2 qui les détaille (mettre un lien vers le jour 2).</p>

<h2 id="firebase-pour-simplifier-lauthentification-utilisateur">Firebase : pour simplifier l’authentification utilisateur</h2>

<p><strong><em>Firebase</em></strong> est une plateforme développée par Google qui fournit un ensemble d’outils et de services destinés à faciliter le développement, la gestion et la scalabilité des applications web et mobiles. Dans notre cas, elle sert de provider d’identité, simplifiant l’implémentation d’un système d’authentification. Cela permet notamment d’intégrer des options comme l’identification via Google ou Apple, sans se soucier du stockage des identifiants ou des mots de passe.</p>

<h3 id="voici-le-processus-général">Voici le processus général :</h3>

<ol>
  <li><strong><em>Firebase</em></strong> se charge de l’authentification et renvoie un <strong><em>JWT</em></strong> (JSON Web Token).</li>
  <li>Ce <strong><em>JWT</em></strong>, un standard pour échanger des informations sécurisées entre un client et un serveur, contient des données comme le nom et l’email de l’utilisateur.</li>
  <li>À chaque requête, on utilise ce <strong><em>JWT</em></strong> pour vérifier l’identité de l’utilisateur sans solliciter Firebase à nouveau. Pour cela, on délègue la partie login à Firebase, qui se charge de l’authentification de l’utilisateur et retourne un <strong><em>JWT</em></strong>.</li>
</ol>

<p><img src="/assets/images/2025-01-27/use-case.png" alt="Use case to be authenticated" /></p>

<h3 id="vision-du-futur">Vision du Futur</h3>

<p>Commencer un projet <strong>DDD</strong> en se focalisant sur l’authentification est une erreur. Cela détourne l’attention du cœur du domaine métier. L’objectif du <strong>DDD</strong> et de l’<strong>Architecture Hexagonale</strong> est de prioriser le métier en mettant de côté les aspects techniques au départ.</p>

<p>Cependant, une fois <strong><em>Firebase</em></strong> intégré, il est impératif de valider les <strong><em>JWT</em></strong> pour extraire des informations comme le nom et l’email.<br />
Pour ce faire, on utilise l’authentification de <strong><em>Symfony</em></strong>, en créant un <strong><em>Authenticator</em></strong> Custom pour s’adapter à <strong><em>Firebase</em></strong>. Notons qu’il existe plusieurs <strong><em>Authenticators</em></strong> déjà fournis dans <strong><em>Symfony</em></strong>, mais qu’aucun ne correspond à notre besoin. Le code de cette authentication n’est pas tellement intéressant au regard de la thématique de cette série d’articles, je ne m’y attarderai donc pas.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
</pre></td><td class="code"><pre><span class="k">try</span> <span class="p">{</span>
    <span class="nc">SuserAuthenticated</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">commandBus</span><span class="o">-&gt;</span><span class="nf">dispatch</span> <span class="p">(</span>
        <span class="k">new</span> <span class="nc">AuthenticateUserCommand</span><span class="p">(</span>
            <span class="nc">Stoken</span><span class="p">,</span>
            <span class="nc">SproviderId</span><span class="p">,</span>
        <span class="p">),</span>
    <span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">InvalidTokenException</span> <span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">logger</span><span class="o">-&gt;</span><span class="nf">error</span><span class="p">(</span>
        <span class="s1">'Log in user: Invalid token'</span><span class="p">,</span>
        <span class="p">[</span>
            <span class="s1">'exception'</span> <span class="o">=&gt;</span> <span class="nv">$exception</span><span class="p">,</span>
            <span class="s1">'provider'</span> <span class="o">=&gt;</span> <span class="nv">$providerId</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">);</span>

    <span class="k">throw</span> <span class="k">new</span> <span class="nc">AuthenticationException</span><span class="p">(</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="nf">getMessage</span><span class="p">());</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">ExpiredTokenException</span> <span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">logger</span><span class="o">-&gt;</span><span class="nf">error</span><span class="p">(</span>
        <span class="s1">'Log in user: Token expired'</span><span class="p">,</span>
        <span class="p">[</span>
            <span class="s1">'exception'</span> <span class="o">=&gt;</span> <span class="nv">$exception</span><span class="p">,</span>
            <span class="s1">'provider'</span> <span class="o">=&gt;</span> <span class="nv">$providerId</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">);</span>

    <span class="k">throw</span> <span class="k">new</span> <span class="nc">AuthenticationException</span><span class="p">(</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="nf">getMessage</span><span class="p">());</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">InvalidPayloadException</span> <span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">logger</span><span class="o">-&gt;</span><span class="nf">error</span><span class="p">(</span>
        <span class="s1">'Log in user: Invalid payload'</span><span class="p">,</span>
        <span class="p">[</span>
            <span class="s1">'exception'</span> <span class="o">=&gt;</span> <span class="nv">$exception</span><span class="p">,</span>
            <span class="s1">'provider'</span> <span class="o">=&gt;</span> <span class="nv">$providerId</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">);</span>

    <span class="k">throw</span> <span class="k">new</span> <span class="nc">AuthenticationException</span><span class="p">(</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="nf">getMessage</span><span class="p">());</span>
<span class="p">}</span>

<span class="nc">Suser</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queryBus</span><span class="o">-&gt;</span><span class="nf">ask</span><span class="p">(</span>
    <span class="k">new</span> <span class="nc">GetUserQuery</span><span class="p">(</span>
        <span class="nc">SuserAuthenticated</span><span class="err">→</span><span class="nf">email</span><span class="p">(),</span>
    <span class="p">)</span>
<span class="p">);</span>

<span class="nc">Semail</span> <span class="o">=</span> <span class="nc">Suser</span><span class="err">→</span><span class="nf">email</span><span class="p">();</span>

<span class="k">return</span> <span class="k">new</span> <span class="nc">SelfValidatingPassport</span><span class="p">(</span>
    <span class="k">new</span> <span class="nc">UserBadge</span><span class="p">(</span>
        <span class="nv">$email</span><span class="p">,</span>
        <span class="k">fn</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nc">Sthis</span><span class="o">-&gt;</span><span class="nf">loadUser</span> <span class="p">(</span><span class="nc">Semail</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="le-commandbus-pour-orchestrer-les-commandes">Le CommandBus : pour orchestrer les commandes</h2>

<p>L’entrée dans le système repose sur un <strong>Primary Adapter</strong> qui dispatche une commande CQRS AuthenticiteUserCommand via le <strong>CommandBus</strong>. Une fois la commande exécutée pour authentifier l’utilisateur, une <strong>Query</strong> GetUserQuery permet de récupérer ses données. Notons que l’<strong><em>Authenticator</em></strong> fait partie de la couche <strong>Infrastructure</strong>.</p>

<p>Le <strong>CommandBus</strong> est un système centralisé :</p>
<ul>
  <li>Il reçoit une commande en paramètre</li>
  <li>Il identifie le <strong>CommandHandler</strong> approprié</li>
  <li>Il exécute sa méthode <strong><em>Handle</em></strong></li>
  <li>Il retourne l’identité du résultat</li>
</ul>

<p>Pour respecter l’<strong>inversion de dépendance</strong> et les couches de l’<strong>Architecture Hexagonale</strong>, on crée une interface <strong><em>CommandBusInterface</em></strong> dans la couche <strong>Application</strong>. L’implémentation du CommandBus en utilisant <strong><em>Messenger</em></strong> (un composant de Symfony pour avoir une gestion de Bus) se trouve dans la couche <strong>Infrastructure</strong>.</p>

<p><strong>Interface CommandBusInterface:</strong></p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">TegCorp\SharedKernelBundle\Application\Command</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">CommandBusInterface</span>
<span class="p">{</span>
    <span class="cd">/**
     * @template T
     *
     * @param CommandInterface&lt;T&gt; $command
     *
     * @return T
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">dispatch</span><span class="p">(</span><span class="kt">CommandInterface</span> <span class="nv">$command</span><span class="p">):</span> <span class="kt">mixed</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><strong>Implémentation du CommandBus utilisant Messenger:</strong></p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="k">final</span> <span class="kd">class</span> <span class="nc">MessengerCommandBus</span> <span class="kd">implements</span> <span class="nc">CommandBusInterface</span>
<span class="p">{</span>
    <span class="kn">use</span> <span class="nc">HandleTrait</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">MessageBusInterface</span> <span class="nv">$commandBus</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">messageBus</span> <span class="o">=</span> <span class="nv">$commandBus</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @template T
     *
     * @param CommandInterface&lt;T&gt; $command
     *
     * @return T
     */</span>
    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">dispatch</span><span class="p">(</span><span class="kt">CommandInterface</span> <span class="nv">$command</span><span class="p">):</span> <span class="kt">mixed</span>
    <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="cm">/* @var T */</span>
            <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">handle</span><span class="p">(</span><span class="nv">$command</span><span class="p">);</span>

            <span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">HandlerFailedException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$exception</span> <span class="o">=</span> <span class="nb">current</span><span class="p">(</span><span class="nv">$e</span><span class="o">-&gt;</span><span class="nf">getWrappedExceptions</span><span class="p">()))</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="nv">$exception</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">throw</span> <span class="nv">$e</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="vision-du-futur-1">Vision du Futur</h3>

<p>Il faudrait gérer les transactions.</p>

<h2 id="command-et-commandhandler">Command et CommandHandler</h2>

<p>Une <strong>Command</strong> est un objet simple, immuable, possédant les propriétés nécessaires à la réalisation de la modification sur le système. Pour respecter le contrat d’interface défini dans le CommandBus, il faut d’abord créer une interface pour les <strong>Command</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">TegCorp\SharedKernelBundle\Application\Command</span><span class="p">;</span>

<span class="cd">/**
 * @template T
 */</span>
<span class="kd">interface</span> <span class="nc">CommandInterface</span>
<span class="p">{</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Cette interface permet d’avoir un retour du <strong>CommandHandler</strong> en utilisant les Generics de <strong><em>PHPStan</em></strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Security\Application\Command</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Security\Domain\Service\AuthenticateUserFromProviderInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\ValueObject\UserAuthenticated</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Application\Command\CommandInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Infrastructure\Webmozart\Assert</span><span class="p">;</span>

<span class="cd">/**
 * @implements CommandInterface&lt;UserAuthenticated&gt;
 */</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">AuthenticateUserCommand</span> <span class="kd">implements</span> <span class="nc">CommandInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="nv">$providerId</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$token</span><span class="p">,</span>
        <span class="kt">string</span> <span class="nv">$providerId</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nc">Assert</span><span class="o">::</span><span class="nf">inArray</span><span class="p">(</span>
            <span class="nv">$providerId</span><span class="p">,</span>
            <span class="p">[</span>
                <span class="nc">AuthenticateUserFromProviderInterface</span><span class="o">::</span><span class="no">IDENTITY_PROVIDER_APPLE</span><span class="p">,</span>
                <span class="nc">AuthenticateUserFromProviderInterface</span><span class="o">::</span><span class="no">IDENTITY_PROVIDER_GOOGLE</span><span class="p">,</span>
                <span class="nc">AuthenticateUserFromProviderInterface</span><span class="o">::</span><span class="no">IDENTITY_PROVIDER_FIREBASE</span><span class="p">,</span>
            <span class="p">],</span>
        <span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">providerId</span> <span class="o">=</span> <span class="nv">$providerId</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Cette <strong>Command</strong> prend en paramètre un JWT envoyé par Firebase et un identifiant de provider qui permet de savoir qui est le provider d’identité (Google, Facebook…). L’id de provider est validée en fonction des valeurs supportées par notre système (Google, Apple et Firebase). Il est important de valider la cohérence des données qui rentrent dans le Domain, cela évite les comportements inattendus.</p>

<p>Ensuite vient le <strong>CommandHandler</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Security\Application\Command</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Security\Domain\Entity\User</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\Exception\InvalidTokenException</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\Repository\UserRepositoryInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\Service\AuthenticateUser</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\ValueObject\UserAuthenticated</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\ValueObject\UserEmail</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Application\Command\AsCommandHandler</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Domain\Service\DomainEventDispatcherInterface</span><span class="p">;</span>

<span class="na">#[AsCommandHandler]</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">AuthenticateUserCommandHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">AuthenticateUser</span> <span class="nv">$authenticateUser</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">DomainEventDispatcherInterface</span> <span class="nv">$dispatcher</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">UserRepositoryInterface</span> <span class="nv">$userRepository</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @throws InvalidTokenException
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">AuthenticateUserCommand</span> <span class="nv">$authenticateUserCommand</span><span class="p">):</span> <span class="kt">UserAuthenticated</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$authenticateUserCommand</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">===</span> <span class="s1">''</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nc">InvalidTokenException</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">match</span> <span class="p">(</span><span class="nv">$providerId</span><span class="p">)</span> <span class="p">{</span>
            <span class="nc">AuthenticateUserFromProviderInterface</span><span class="o">::</span><span class="no">IDENTITY_PROVIDER_APPLE</span> <span class="o">=&gt;</span> <span class="nv">$userAuthenticated</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">authenticateUserFromProvider</span><span class="o">-&gt;</span><span class="nf">authenticateUserWithApple</span><span class="p">(</span><span class="nv">$token</span><span class="p">),</span>
            <span class="nc">AuthenticateUserFromProviderInterface</span><span class="o">::</span><span class="no">IDENTITY_PROVIDER_GOOGLE</span> <span class="o">=&gt;</span> <span class="nv">$userAuthenticated</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">authenticateUserFromProvider</span><span class="o">-&gt;</span><span class="nf">authenticateUserWithGoogle</span><span class="p">(</span><span class="nv">$token</span><span class="p">),</span>
            <span class="nc">AuthenticateUserFromProviderInterface</span><span class="o">::</span><span class="no">IDENTITY_PROVIDER_FIREBASE</span> <span class="o">=&gt;</span> <span class="nv">$userAuthenticated</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">authenticateUserFromProvider</span><span class="o">-&gt;</span><span class="nf">authenticateUserWithFirebase</span><span class="p">(</span><span class="nv">$token</span><span class="p">),</span>
            <span class="k">default</span> <span class="o">=&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">IdentityProviderDoesntExistException</span><span class="p">(</span><span class="s1">'Invalid provider id'</span><span class="p">),</span>
        <span class="p">};</span>

        <span class="k">return</span> <span class="nv">$userAuthenticated</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>J’ai utilisé une fois encore l’inversion de dépendance en injectant une interface d’un service <code class="language-plaintext highlighter-rouge">AuthenticateUserInterface</code> - qui se trouve dans la couche <strong>Application</strong> - dans le <strong>CommandHandler</strong> - qui se trouve aussi dans la couche <strong>Application</strong>. L’implémentation se trouve, quant à elle, dans la couche <strong>Infrastructure</strong> car elle dépend du service externe.</p>

<h3 id="vision-du-futur-2">Vision du Futur</h3>

<ul>
  <li>Il faudrait valider le JWT dans la Command comme dans le provider pour ne pas avoir cette gestion d’erreur.</li>
  <li>Il faudrait aussi réfléchir à l’utilisation du pattern <em>Stratégie</em> pour éviter le match.</li>
</ul>

<p>Dans ce <strong>CommandeHandler</strong>, on authentifie l’utilisateur en utilisant la méthode qui correspond au provider identifié, puis on retourne l’utilisateur authentifié.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Security\Domain\ValueObject</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">UserAuthenticated</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="kt">UserEmail</span> <span class="nv">$email</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$email</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">email</span> <span class="o">=</span> <span class="nc">UserEmail</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="nv">$email</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">email</span><span class="p">():</span> <span class="kt">UserEmail</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">email</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="querybus-et-queryhandler">QueryBus et QueryHandler</h2>

<p>Une fois l’utilisateur authentifié, le <strong>QueryBus</strong> entre en jeu pour récupérer ses données métier. Les <strong>Query</strong> servent à lire des informations sans modifier le système. Ici aussi, une interface <strong><em>QueryBusInterface</em></strong> est définie en <strong>Application</strong>, et son implémentation avec <strong><em>Messenger</em></strong> se situe en <strong>Infrastructure</strong>.</p>

<p>Pour utiliser l’inversion de dépendance et respecter les couches de l’<strong>Architecture Hexagonale</strong>, j’ai créé une interface <strong><em>QueryBusInterface</em></strong> dans la couche Application. L’implémentation du QueryBus en utilisant <strong><em>Messenger</em></strong> se trouve dans la couche <strong>Infrastructure</strong>.</p>

<p><strong>Interface QueryBusInterface</strong></p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">TegCorp\SharedKernelBundle\Application\Query</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">QueryBusInterface</span>
<span class="p">{</span>
    <span class="cd">/**
     * @template T
     *
     * @param QueryInterface&lt;T&gt; $query
     *
     * @return T
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">ask</span><span class="p">(</span><span class="kt">QueryInterface</span> <span class="nv">$query</span><span class="p">):</span> <span class="kt">mixed</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><strong>Implémentation du MessengerQueryBus</strong></p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="k">final</span> <span class="kd">class</span> <span class="nc">MessengerQueryBus</span> <span class="kd">implements</span> <span class="nc">QueryBusInterface</span>
<span class="p">{</span>
    <span class="kn">use</span> <span class="nc">HandleTrait</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">MessageBusInterface</span> <span class="nv">$queryBus</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">messageBus</span> <span class="o">=</span> <span class="nv">$queryBus</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @template T
     *
     * @param QueryInterface&lt;T&gt; $query
     *
     * @return T
     */</span>
    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">ask</span><span class="p">(</span><span class="kt">QueryInterface</span> <span class="nv">$query</span><span class="p">):</span> <span class="kt">mixed</span>
    <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="cm">/* @var T */</span>
            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">handle</span><span class="p">(</span><span class="nv">$query</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">HandlerFailedException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$exception</span> <span class="o">=</span> <span class="nb">current</span><span class="p">(</span><span class="nv">$e</span><span class="o">-&gt;</span><span class="nf">getWrappedExceptions</span><span class="p">()))</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="nv">$exception</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">throw</span> <span class="nv">$e</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="implémentation-de-la-query-et-du-queryhandler">Implémentation de la Query et du QueryHandler</h3>

<p>Après l’interface et l’implémentation du QueryBus, il faut implémenter la <strong>Query</strong> et le <strong>QueryHandler</strong>. Afin de respecter le contrat d’interface défini dans le QueryBu`, on crée une interface pour les <strong>Query</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">TegCorp\SharedKernelBundle\Application\Query</span><span class="p">;</span>

<span class="cd">/**
 * @template T
 */</span>
<span class="kd">interface</span> <span class="nc">QueryInterface</span>
<span class="p">{</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Cette interface permet d’avoir un retour du <strong>QueryHandler</strong> en utilisant les Generics de <strong><em>PHPStan</em></strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Security\Application\Query</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Security\Application\ReadModel\User</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Application\Query\QueryInterface</span><span class="p">;</span>

<span class="cd">/**
 * @implements QueryInterface&lt;User&gt;
 */</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">GetUserQuery</span> <span class="kd">implements</span> <span class="nc">QueryInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$email</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Cette <strong>Query</strong> utilise l’identifiant du User et retourne une <strong>Entity User</strong>.</p>

<p>Ensuite vient le <strong>QueryHandler</strong> :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Security\Application\Query</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Security\Application\Adapter\UserAdapterInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Application\ReadModel\User</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\Exception\UserNotFoundException</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Application\Query\AsQueryHandler</span><span class="p">;</span>

<span class="na">#[AsQueryHandler]</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">GetUserQueryHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">UserAdapterInterface</span> <span class="nv">$userAdapter</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @throws UserNotFoundException
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">GetUserQuery</span> <span class="nv">$getUserQuery</span><span class="p">):</span> <span class="kt">User</span>
    <span class="p">{</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">userAdapter</span><span class="o">-&gt;</span><span class="nf">ofId</span><span class="p">(</span><span class="nv">$getUserQuery</span><span class="o">-&gt;</span><span class="n">email</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$user</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nc">UserNotFoundException</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$user</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Une fois encore, j’ai utilisé l’inversion de dépendance en injectant dans le <strong>QueryHandler</strong> de la couche <strong>Application</strong> une interface d’un Repository <strong><em>UserRepositoryInterface</em></strong> de la couche <strong>Domain</strong>. L’implémentation se trouve toujours dans <strong>Infrastructure</strong> car elle dépend de la base de données que nous utilisons. L’inversion de dépendance laisse la possibilité de sauvegarder les informations où l’on veut et de changer de base de données.</p>

<h3 id="vision-du-futur-3">Vision du Futur</h3>

<p>Pour suivre le <strong>CQRS</strong>, il faudrait lire dans le <strong>Read Model</strong>. Je le mettrai en place plus tard.</p>

<p>Ce <strong>QueryHandler</strong> retourne une <strong>Entity User</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Security\Domain\Entity</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Security\Domain\Event\UserCreated</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\ValueObject\UserEmail</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\ValueObject\UserId</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Doctrine\ORM\Mapping</span> <span class="k">as</span> <span class="no">ORM</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Domain\Entity\EntityDomainEventTrait</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Domain\Entity\EntityWithDomainEventInterface</span><span class="p">;</span>

<span class="na">#[ORM\Entity]</span>
<span class="k">final</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">implements</span> <span class="nc">EntityWithDomainEventInterface</span>
<span class="p">{</span>
    <span class="kn">use</span> <span class="nc">EntityDomainEventTrait</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="na">#[ORM\Embedded(columnPrefix: false)]</span>
        <span class="k">private</span> <span class="kt">UserId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="na">#[ORM\Embedded(columnPrefix: false)]</span>
        <span class="k">private</span> <span class="kt">UserEmail</span> <span class="nv">$email</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">(</span>
        <span class="kt">UserId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="kt">UserEmail</span> <span class="nv">$email</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">self</span> <span class="p">{</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span>
            <span class="nv">$id</span><span class="p">,</span>
            <span class="nv">$email</span><span class="p">,</span>
        <span class="p">);</span>

        <span class="nv">$user</span><span class="o">::</span><span class="nf">recordEvent</span><span class="p">(</span>
            <span class="k">new</span> <span class="nc">UserCreated</span><span class="p">(</span>
                <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">id</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
                <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">email</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
            <span class="p">),</span>
        <span class="p">);</span>

        <span class="k">return</span> <span class="nv">$user</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">UserId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">email</span><span class="p">():</span> <span class="kt">UserEmail</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">email</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Dans cette Entity, on voit plusieurs choses dont on a parlé dans les articles précédents : les <strong>Value Object</strong>, les <strong>Event</strong>, les <strong>Factory</strong>…</p>

<h3 id="vision-du-futur-4">Vision du Futur</h3>

<p>Pour l’instant, il est possible de laisser les <strong><em>Attributs Doctrine</em></strong> dans l’<strong>Entity</strong>, mais je ne le recommande pas. Cela oblige en effet à faire des compromis entre le <strong>DDD</strong> et l’<strong><em>ORM</em></strong> et cela est déconseillé, surtout dans le <strong>Domain</strong>.</p>

<p>Après avoir fait cet <strong><em>Authenticator</em></strong>, à chaque requête, on passe dans cette classe pour authentifier le JWT envoyé. Il faut le faire à chaque fois car les requêtes à une <strong><em>API REST</em></strong> sont <em>stateless</em> (c’est à dire qu’on ne conserve pas d’état entre les requêtes).</p>

<p>Dans cet article j’ai détaillé l’implémentation d’une fonctionnalité du début à la fin, en partant de l’implémentation de la couche <strong>Infrastructure</strong> jusqu’au <strong>Domain</strong>. Je dirai pour conclure que cette fonctionnalité a été totalement pensée à l’envers. Dans le <strong>DDD</strong>, il faut commencer par la modélisation des <strong>Entity</strong> puis descendre jusqu’à l’implémentation des <strong>Interfaces</strong> définies dans le <strong>Domain</strong>. Cela peut également permettre de faire du <strong>TDD</strong> (Test-Driven Developpement) sur nos <strong>Entity</strong>.</p>

<p>J’évoquerai plus en détail la structure de cette <strong>Entity</strong> et de ces méthodes dans le prochain article qui parlera de la création d’un User.</p>]]></content><author><name>Hugues Gobet</name><email>hugues.gobet@gmail.com</email></author><category term="ddd-logbook" /><summary type="html"><![CDATA[Après trois articles axés sur la théorie - indispensables pour poser des bases solides - je vous propose aujourd’hui un cas concret : l’authentification d’un utilisateur. Cet article s’éloigne légèrement du Domain Driven Design (DDD) pour se concentrer sur la mise en place et l’utilisation de l’Architecture Hexagonale et le CQRS. Je mentionnerai tout de même l’Entity User, mais l’essentiel portera sur l’aspect pratique. Si vous avez besoin d’un rappel sur ces concepts, vous pouvez vous référer à l’article du jour 2 qui les détaille (mettre un lien vers le jour 2). Firebase : pour simplifier l’authentification utilisateur Firebase est une plateforme développée par Google qui fournit un ensemble d’outils et de services destinés à faciliter le développement, la gestion et la scalabilité des applications web et mobiles. Dans notre cas, elle sert de provider d’identité, simplifiant l’implémentation d’un système d’authentification. Cela permet notamment d’intégrer des options comme l’identification via Google ou Apple, sans se soucier du stockage des identifiants ou des mots de passe. Voici le processus général : Firebase se charge de l’authentification et renvoie un JWT (JSON Web Token). Ce JWT, un standard pour échanger des informations sécurisées entre un client et un serveur, contient des données comme le nom et l’email de l’utilisateur. À chaque requête, on utilise ce JWT pour vérifier l’identité de l’utilisateur sans solliciter Firebase à nouveau. Pour cela, on délègue la partie login à Firebase, qui se charge de l’authentification de l’utilisateur et retourne un JWT. Vision du Futur Commencer un projet DDD en se focalisant sur l’authentification est une erreur. Cela détourne l’attention du cœur du domaine métier. L’objectif du DDD et de l’Architecture Hexagonale est de prioriser le métier en mettant de côté les aspects techniques au départ. Cependant, une fois Firebase intégré, il est impératif de valider les JWT pour extraire des informations comme le nom et l’email. Pour ce faire, on utilise l’authentification de Symfony, en créant un Authenticator Custom pour s’adapter à Firebase. Notons qu’il existe plusieurs Authenticators déjà fournis dans Symfony, mais qu’aucun ne correspond à notre besoin. Le code de cette authentication n’est pas tellement intéressant au regard de la thématique de cette série d’articles, je ne m’y attarderai donc pas. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 try { SuserAuthenticated = $this-&gt;commandBus-&gt;dispatch ( new AuthenticateUserCommand( Stoken, SproviderId, ), ); } catch (InvalidTokenException $exception) { $this-&gt;logger-&gt;error( 'Log in user: Invalid token', [ 'exception' =&gt; $exception, 'provider' =&gt; $providerId, ], ); throw new AuthenticationException($exception-&gt;getMessage()); } catch (ExpiredTokenException $exception) { $this-&gt;logger-&gt;error( 'Log in user: Token expired', [ 'exception' =&gt; $exception, 'provider' =&gt; $providerId, ], ); throw new AuthenticationException($exception-&gt;getMessage()); } catch (InvalidPayloadException $exception) { $this-&gt;logger-&gt;error( 'Log in user: Invalid payload', [ 'exception' =&gt; $exception, 'provider' =&gt; $providerId, ], ); throw new AuthenticationException($exception-&gt;getMessage()); } Suser = $this-&gt;queryBus-&gt;ask( new GetUserQuery( SuserAuthenticated→email(), ) ); Semail = Suser→email(); return new SelfValidatingPassport( new UserBadge( $email, fn () =&gt; Sthis-&gt;loadUser (Semail), ), ); Le CommandBus : pour orchestrer les commandes L’entrée dans le système repose sur un Primary Adapter qui dispatche une commande CQRS AuthenticiteUserCommand via le CommandBus. Une fois la commande exécutée pour authentifier l’utilisateur, une Query GetUserQuery permet de récupérer ses données. Notons que l’Authenticator fait partie de la couche Infrastructure. Le CommandBus est un système centralisé : Il reçoit une commande en paramètre Il identifie le CommandHandler approprié Il exécute sa méthode Handle Il retourne l’identité du résultat Pour respecter l’inversion de dépendance et les couches de l’Architecture Hexagonale, on crée une interface CommandBusInterface dans la couche Application. L’implémentation du CommandBus en utilisant Messenger (un composant de Symfony pour avoir une gestion de Bus) se trouve dans la couche Infrastructure. Interface CommandBusInterface: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &lt;?php declare(strict_types=1); namespace TegCorp\SharedKernelBundle\Application\Command; interface CommandBusInterface { /** * @template T * * @param CommandInterface&lt;T&gt; $command * * @return T */ public function dispatch(CommandInterface $command): mixed; } Implémentation du CommandBus utilisant Messenger: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 final class MessengerCommandBus implements CommandBusInterface { use HandleTrait; public function __construct( MessageBusInterface $commandBus, ) { $this-&gt;messageBus = $commandBus; } /** * @template T * * @param CommandInterface&lt;T&gt; $command * * @return T */ #[\Override] public function dispatch(CommandInterface $command): mixed { try { /* @var T */ $result = $this-&gt;handle($command); return $result; } catch (HandlerFailedException $e) { if ($exception = current($e-&gt;getWrappedExceptions())) { throw $exception; } throw $e; } } } Vision du Futur Il faudrait gérer les transactions. Command et CommandHandler Une Command est un objet simple, immuable, possédant les propriétés nécessaires à la réalisation de la modification sur le système. Pour respecter le contrat d’interface défini dans le CommandBus, il faut d’abord créer une interface pour les Command. 1 2 3 4 5 6 7 8 9 10 11 12 &lt;?php declare(strict_types=1); namespace TegCorp\SharedKernelBundle\Application\Command; /** * @template T */ interface CommandInterface { } Cette interface permet d’avoir un retour du CommandHandler en utilisant les Generics de PHPStan. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 &lt;?php declare(strict_types=1); namespace App\Security\Application\Command; use App\Security\Domain\Service\AuthenticateUserFromProviderInterface; use App\Security\Domain\ValueObject\UserAuthenticated; use TegCorp\SharedKernelBundle\Application\Command\CommandInterface; use TegCorp\SharedKernelBundle\Infrastructure\Webmozart\Assert; /** * @implements CommandInterface&lt;UserAuthenticated&gt; */ final readonly class AuthenticateUserCommand implements CommandInterface { public string $providerId; public function __construct( public string $token, string $providerId, ) { Assert::inArray( $providerId, [ AuthenticateUserFromProviderInterface::IDENTITY_PROVIDER_APPLE, AuthenticateUserFromProviderInterface::IDENTITY_PROVIDER_GOOGLE, AuthenticateUserFromProviderInterface::IDENTITY_PROVIDER_FIREBASE, ], ); $this-&gt;providerId = $providerId; } } Cette Command prend en paramètre un JWT envoyé par Firebase et un identifiant de provider qui permet de savoir qui est le provider d’identité (Google, Facebook…). L’id de provider est validée en fonction des valeurs supportées par notre système (Google, Apple et Firebase). Il est important de valider la cohérence des données qui rentrent dans le Domain, cela évite les comportements inattendus. Ensuite vient le CommandHandler. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 &lt;?php declare(strict_types=1); namespace App\Security\Application\Command; use App\Security\Domain\Entity\User; use App\Security\Domain\Exception\InvalidTokenException; use App\Security\Domain\Repository\UserRepositoryInterface; use App\Security\Domain\Service\AuthenticateUser; use App\Security\Domain\ValueObject\UserAuthenticated; use App\Security\Domain\ValueObject\UserEmail; use TegCorp\SharedKernelBundle\Application\Command\AsCommandHandler; use TegCorp\SharedKernelBundle\Domain\Service\DomainEventDispatcherInterface; #[AsCommandHandler] final readonly class AuthenticateUserCommandHandler { public function __construct( private AuthenticateUser $authenticateUser, private DomainEventDispatcherInterface $dispatcher, private UserRepositoryInterface $userRepository, ) { } /** * @throws InvalidTokenException */ public function __invoke(AuthenticateUserCommand $authenticateUserCommand): UserAuthenticated { if ($authenticateUserCommand-&gt;token === '') { throw new InvalidTokenException(); } match ($providerId) { AuthenticateUserFromProviderInterface::IDENTITY_PROVIDER_APPLE =&gt; $userAuthenticated = $this-&gt;authenticateUserFromProvider-&gt;authenticateUserWithApple($token), AuthenticateUserFromProviderInterface::IDENTITY_PROVIDER_GOOGLE =&gt; $userAuthenticated = $this-&gt;authenticateUserFromProvider-&gt;authenticateUserWithGoogle($token), AuthenticateUserFromProviderInterface::IDENTITY_PROVIDER_FIREBASE =&gt; $userAuthenticated = $this-&gt;authenticateUserFromProvider-&gt;authenticateUserWithFirebase($token), default =&gt; throw new IdentityProviderDoesntExistException('Invalid provider id'), }; return $userAuthenticated; } } J’ai utilisé une fois encore l’inversion de dépendance en injectant une interface d’un service AuthenticateUserInterface - qui se trouve dans la couche Application - dans le CommandHandler - qui se trouve aussi dans la couche Application. L’implémentation se trouve, quant à elle, dans la couche Infrastructure car elle dépend du service externe. Vision du Futur Il faudrait valider le JWT dans la Command comme dans le provider pour ne pas avoir cette gestion d’erreur. Il faudrait aussi réfléchir à l’utilisation du pattern Stratégie pour éviter le match. Dans ce CommandeHandler, on authentifie l’utilisateur en utilisant la méthode qui correspond au provider identifié, puis on retourne l’utilisateur authentifié. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 &lt;?php declare(strict_types=1); namespace App\Security\Domain\ValueObject; final readonly class UserAuthenticated { private UserEmail $email; public function __construct( string $email, ) { $this-&gt;email = UserEmail::fromString($email); } public function email(): UserEmail { return $this-&gt;email; } } QueryBus et QueryHandler Une fois l’utilisateur authentifié, le QueryBus entre en jeu pour récupérer ses données métier. Les Query servent à lire des informations sans modifier le système. Ici aussi, une interface QueryBusInterface est définie en Application, et son implémentation avec Messenger se situe en Infrastructure. Pour utiliser l’inversion de dépendance et respecter les couches de l’Architecture Hexagonale, j’ai créé une interface QueryBusInterface dans la couche Application. L’implémentation du QueryBus en utilisant Messenger se trouve dans la couche Infrastructure. Interface QueryBusInterface 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &lt;?php declare(strict_types=1); namespace TegCorp\SharedKernelBundle\Application\Query; interface QueryBusInterface { /** * @template T * * @param QueryInterface&lt;T&gt; $query * * @return T */ public function ask(QueryInterface $query): mixed; } Implémentation du MessengerQueryBus 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 final class MessengerQueryBus implements QueryBusInterface { use HandleTrait; public function __construct(MessageBusInterface $queryBus) { $this-&gt;messageBus = $queryBus; } /** * @template T * * @param QueryInterface&lt;T&gt; $query * * @return T */ #[\Override] public function ask(QueryInterface $query): mixed { try { /* @var T */ return $this-&gt;handle($query); } catch (HandlerFailedException $e) { if ($exception = current($e-&gt;getWrappedExceptions())) { throw $exception; } throw $e; } } } Implémentation de la Query et du QueryHandler Après l’interface et l’implémentation du QueryBus, il faut implémenter la Query et le QueryHandler. Afin de respecter le contrat d’interface défini dans le QueryBu`, on crée une interface pour les Query. 1 2 3 4 5 6 7 8 9 10 11 12 &lt;?php declare(strict_types=1); namespace TegCorp\SharedKernelBundle\Application\Query; /** * @template T */ interface QueryInterface { } Cette interface permet d’avoir un retour du QueryHandler en utilisant les Generics de PHPStan. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 &lt;?php declare(strict_types=1); namespace App\Security\Application\Query; use App\Security\Application\ReadModel\User; use TegCorp\SharedKernelBundle\Application\Query\QueryInterface; /** * @implements QueryInterface&lt;User&gt; */ final readonly class GetUserQuery implements QueryInterface { public function __construct( public string $email, ) { } } Cette Query utilise l’identifiant du User et retourne une Entity User. Ensuite vient le QueryHandler : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 &lt;?php declare(strict_types=1); namespace App\Security\Application\Query; use App\Security\Application\Adapter\UserAdapterInterface; use App\Security\Application\ReadModel\User; use App\Security\Domain\Exception\UserNotFoundException; use TegCorp\SharedKernelBundle\Application\Query\AsQueryHandler; #[AsQueryHandler] final readonly class GetUserQueryHandler { public function __construct( private UserAdapterInterface $userAdapter, ) { } /** * @throws UserNotFoundException */ public function __invoke(GetUserQuery $getUserQuery): User { $user = $this-&gt;userAdapter-&gt;ofId($getUserQuery-&gt;email); if ($user === null) { throw new UserNotFoundException(); } return $user; } } Une fois encore, j’ai utilisé l’inversion de dépendance en injectant dans le QueryHandler de la couche Application une interface d’un Repository UserRepositoryInterface de la couche Domain. L’implémentation se trouve toujours dans Infrastructure car elle dépend de la base de données que nous utilisons. L’inversion de dépendance laisse la possibilité de sauvegarder les informations où l’on veut et de changer de base de données. Vision du Futur Pour suivre le CQRS, il faudrait lire dans le Read Model. Je le mettrai en place plus tard. Ce QueryHandler retourne une Entity User. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 &lt;?php declare(strict_types=1); namespace App\Security\Domain\Entity; use App\Security\Domain\Event\UserCreated; use App\Security\Domain\ValueObject\UserEmail; use App\Security\Domain\ValueObject\UserId; use Doctrine\ORM\Mapping as ORM; use TegCorp\SharedKernelBundle\Domain\Entity\EntityDomainEventTrait; use TegCorp\SharedKernelBundle\Domain\Entity\EntityWithDomainEventInterface; #[ORM\Entity] final class User implements EntityWithDomainEventInterface { use EntityDomainEventTrait; public function __construct( #[ORM\Embedded(columnPrefix: false)] private UserId $id, #[ORM\Embedded(columnPrefix: false)] private UserEmail $email, ) { } public static function create( UserId $id, UserEmail $email, ): self { $user = new self( $id, $email, ); $user::recordEvent( new UserCreated( $user-&gt;id-&gt;value(), $user-&gt;email-&gt;value(), ), ); return $user; } public function id(): UserId { return $this-&gt;id; } public function email(): UserEmail { return $this-&gt;email; } } Dans cette Entity, on voit plusieurs choses dont on a parlé dans les articles précédents : les Value Object, les Event, les Factory… Vision du Futur Pour l’instant, il est possible de laisser les Attributs Doctrine dans l’Entity, mais je ne le recommande pas. Cela oblige en effet à faire des compromis entre le DDD et l’ORM et cela est déconseillé, surtout dans le Domain. Après avoir fait cet Authenticator, à chaque requête, on passe dans cette classe pour authentifier le JWT envoyé. Il faut le faire à chaque fois car les requêtes à une API REST sont stateless (c’est à dire qu’on ne conserve pas d’état entre les requêtes). Dans cet article j’ai détaillé l’implémentation d’une fonctionnalité du début à la fin, en partant de l’implémentation de la couche Infrastructure jusqu’au Domain. Je dirai pour conclure que cette fonctionnalité a été totalement pensée à l’envers. Dans le DDD, il faut commencer par la modélisation des Entity puis descendre jusqu’à l’implémentation des Interfaces définies dans le Domain. Cela peut également permettre de faire du TDD (Test-Driven Developpement) sur nos Entity. J’évoquerai plus en détail la structure de cette Entity et de ces méthodes dans le prochain article qui parlera de la création d’un User.]]></summary></entry><entry xml:lang="fr"><title type="html">Journal de bord de l’apprentissage du Domain-Driven Design : Jour 3</title><link href="https://huguesgobet.com/ddd-logbook/2025-01-13" rel="alternate" type="text/html" title="Journal de bord de l’apprentissage du Domain-Driven Design : Jour 3" /><published>2025-01-13T08:00:00+00:00</published><updated>2025-01-13T08:00:00+00:00</updated><id>https://huguesgobet.com/fr/ddd-logbook/journal-de-bord-jour-trois</id><content type="html" xml:base="https://huguesgobet.com/ddd-logbook/2025-01-13"><![CDATA[<p>Dans les premiers articles, j’ai présenté la structure du projet et les concepts fondamentaux du <strong>DDD</strong>, comme l’<strong>Architecture Hexagonale</strong>, le <strong>CQRS</strong> ou l’<strong>Ubiquitous Langage</strong>. Ces bases étant posées, il est temps de plonger dans le cœur du sujet : le <strong>Domaine-Driven Design</strong>. Voici une série de définitions essentielles concernant le <strong>DDD</strong>. Bien qu’elles soient assez théoriques, elles sont nécessaires afin de bien comprendre son fonctionnement.</p>

<h2 id="entity--aggregates">Entity / Aggregates</h2>

<h3 id="quest-ce-quune-entity">Qu’est-ce qu’une Entity ?</h3>

<p>Une <strong>Entity</strong> est un objet métier caractérisé par son identité unique, propre au <strong>Domaine</strong>. Elle peut être composée de <strong>Value Object</strong> ou de variables de types primitifs (integer, boolean, float…) et représente un concept évolutif. Les <strong>Entity</strong> sont souvent persistées en base de données grâce à leur identifiant.</p>

<p>Dans notre système, par exemple, un <strong>Bottle Owner</strong> (la personne ayant ajouté la bouteille dans le système) est une <strong>Entity</strong> avec son <strong>id</strong> et son <strong>email</strong>. J’ai opté pour des <strong>Entity</strong> composées de <strong>Value Object</strong>, sauf pour les booléens, afin de rendre le code plus lisible et plus orienté métier. Cela oblige en revanche à écrire plus de code.</p>

<h3 id="quest-ce-quun-aggregate">Qu’est-ce qu’un Aggregate ?</h3>

<p>Un <strong>Aggregate</strong> est un regroupement logique de plusieurs <strong>Entity</strong> et <strong>Value Object</strong>, qui forment une unité cohérente. Il possède une racine unique (<strong>Aggregate Root</strong>), qui est l’entité principale par laquelle l’<strong>Aggregate</strong> est référencé et manipulé. Toute modification des éléments internes de l’<strong>Aggregate</strong> passe obligatoirement par cette racine.</p>

<p>N’ayant pas d’exemple d’<strong>Aggregate</strong> dans mon application, on pourrait imaginer une dégustation de vin liée à des <strong>Entity Invitations</strong>. La racine serait la dégustation, et les <strong>Entity Invitations</strong> ne pourraient être modifiées qu’à travers elle.</p>

<p>L’<strong>Aggregate</strong> pourrait également inclure des <strong>Value Object</strong>, tels qu’une date de dégustation ou un nom de bouteille.</p>

<p>Si vous utilisez <strong><em>Doctrine</em></strong> pour gérer vos bases de données, vous pouvez décider de mettre ces <em>Attributs</em> dans les <strong>Entity</strong>. Cependant, il ne faut pas oublier que le code du <strong>Domaine</strong> doit pouvoir être extrait de votre application et continuer de fonctionner dans un autre contexte, sans dépendance à <strong><em>Doctrine</em></strong>. Dans notre cas, les <strong><em>Attributs</em></strong> seront reconnus comme des commentaires dans d’autres langages.</p>

<h4 id="vision-du-futur">Vision du Futur</h4>

<p>Je ne recommande pas le couplage entre les <strong>Entity</strong> du <strong>Domaine</strong> et celles de <strong><em>Doctrine</em></strong>, car cela peut créer des problématiques de modélisation, une violation de la séparation des préoccupations ou des difficultés lors des tests. J’ai déjà fait cette erreur, je vous l’expliquerai bientôt plus en détail.</p>

<h2 id="validations-et-assertions">Validations et Assertions</h2>

<p>Les données d’une <strong>Entity</strong> doivent respecter les règles métiers applicables. Par exemple, une <strong>Bottle</strong> avec un <strong>Price</strong> doit être strictement supérieur à 0. Ces contraintes (appelées <strong><em>Assertions</em></strong>) doivent être vérifiées dans une <strong>Factory</strong> qui garantit la validité des <strong>Entity</strong> dès leur création.</p>

<p>Toutes les actions affectant une <strong>Entity</strong> doivent être représentées par des méthodes spécifiques. Par exemple, une méthode <code class="language-plaintext highlighter-rouge">Create</code> pour créer une <strong>Entity</strong>, ou <code class="language-plaintext highlighter-rouge">Taste</code> pour déguster une bouteille. Ces actions déclenchent parfois des <strong>Domain Events</strong>.</p>

<h2 id="value-object">Value Object</h2>

<p>Voyons maintenant ce qui constitue les <strong>Entity</strong> et les <strong>Aggregate</strong> : les <strong>Value Object</strong>.</p>

<p>Un <strong>Value Object</strong> est une représentation d’un concept métier. Il doit être <strong>immuable</strong>. Ce sont des représentations de concepts métiers, définies par leurs attributs plutôt que par une identité unique. Son immutabilité garantit qu’il ne change pas d’état après sa création.</p>

<p>Dans l’exemple précédent, le <strong>Bottle Name</strong> est un <strong>Value Object</strong>.</p>

<h2 id="factory">Factory</h2>

<p>Parfois, la création d’un objet n’a sa place ni dans l’<strong>Entity</strong>, ni dans le <strong>Value Object</strong>, ni dans l’<strong>Aggregate</strong>. On crée alors des <strong>Factory</strong>. Leur responsabilité reste ancrée dans le <strong>Domain</strong>.</p>

<p>Dans ce projet, j’ai pris la décision d’utiliser des <strong><em>méthodes Static</em></strong> pour mes <strong>Factories</strong>. Cette approche était suffisante, mais il est totalement envisageable d’utiliser un <strong>Service</strong> à la place.</p>

<h2 id="repository">Repository</h2>

<p>Le <strong>Repository</strong> est une interface dont le rôle est de stocker, lire et modifier les <strong>Aggregates</strong> et les <strong>Entity</strong>. On fait abstraction de l’endroit où ils sont persistés. Une seule règle clé : chaque <strong>Aggregate</strong> ou <strong>Entity</strong> ne doit avoir qu’un (et un seul) <strong>Repository</strong>.</p>

<p>Nous aurons par exemple un <strong>Repository</strong> pour les <strong>Bottles</strong>, avec une méthode <code class="language-plaintext highlighter-rouge">Add</code> pour ajouter et une méthode <code class="language-plaintext highlighter-rouge">OfId</code> pour récupérer une <strong>Bottle</strong> par son <strong>id</strong>.</p>

<p>J’ai pris le parti de laisser au <strong>Repository</strong> le soin de gérer les identités des <strong>Entity</strong> et des <strong>Aggregates</strong>. J’ai donc créé pour cela une méthode <code class="language-plaintext highlighter-rouge">NextIdentity</code> dans les <strong>Repository</strong>, responsable de générer les <strong>id</strong>.</p>

<h2 id="domain-event">Domain Event</h2>

<p>Un <strong>Domain Event</strong> est une représentation d’un événement significatif qui s’est produit dans le <strong>Domain</strong>, reflétant un changement d’état important d’une <strong>Entity</strong> ou d’un <strong>Aggregate</strong>. Un <strong>Domain Event</strong> est <strong>immuable</strong>, identifiable par un <strong>id</strong> unique et horodaté, pour permettre le suivi et la gestion de l’ordre des <strong>Domain Event</strong>. Il est utilisé pour notifier d’autres parties du système (ou d’autres systèmes) des actions effectuées.</p>

<p>Par exemple, quand on appelle la méthode <code class="language-plaintext highlighter-rouge">Create</code> sur l’<strong>Aggregate</strong>, on enregistre un <strong>Domain Event</strong> qui sera émis après avoir été stocké dans le système. Ce <strong>Domain Event</strong> doit être représentatif de l’action réalisée par le système (dans notre cas, <strong>BottleCreated</strong>).</p>

<h2 id="domain-service">Domain Service</h2>

<p>Un <strong>Domain Service</strong> est un composant sans état qui encapsule une logique métier importante ne pouvant être attribuée à une seule <strong>Entity</strong>, à un <strong>Aggregate</strong> ou à un <strong>Value Object</strong>. Il représente des opérations ou des processus métier impliquant plusieurs <strong>Entity</strong> ou <strong>Aggregate</strong> et opère uniquement sur les objets du <strong>Domaine</strong>.</p>

<p>Je n’ai pas d’exemple dans le cas des <strong>Bottles</strong>. Mais si on reprend le cas de la dégustation d’une bouteille de vin et de l’invitation de personnes, on peut créer un <strong>Domain Service</strong> en charge de vérifier si un participant peut être invité (s’il n’est pas déjà invité, ou s’il n’est pas l’organisateur de la dégustation). Le <strong>Domain Service</strong> pourrait ensuite créer les différentes invitations.</p>

<h2 id="shared-kernel">Shared Kernel</h2>

<p>Le <strong>Shared Kernel</strong> est une partie du domaine partagée entre deux <strong>Bounded Contexts</strong>. Ceci inclut le code ou la base de données associée. La partie partagée a un statut spécial et ne doit pas être changée sans consulter les deux équipes qui maintiennent les <strong>Bounded Context</strong>. Il faut intégrer des tests fonctionnels sur cette partie et les lancer fréquemment.</p>

<h4 id="vision-du-futur-1">Vision du Futur</h4>

<p>J’ai eu une mauvaise vision du <strong>Shared Kernel</strong>. Je pensais pouvoir l’utiliser pour partager du code technique, mais il n’est censé partager que des notions métiers.</p>

<p>Voilà pour cet article très théorique. La prochaine fois, j’aimerais rentrer dans le concret en partageant des exemples liés aux cas pratiques.</p>

<p><strong>À très bientôt !</strong></p>]]></content><author><name>Hugues Gobet</name><email>hugues.gobet@gmail.com</email></author><category term="ddd-logbook" /><summary type="html"><![CDATA[Dans les premiers articles, j’ai présenté la structure du projet et les concepts fondamentaux du DDD, comme l’Architecture Hexagonale, le CQRS ou l’Ubiquitous Langage. Ces bases étant posées, il est temps de plonger dans le cœur du sujet : le Domaine-Driven Design. Voici une série de définitions essentielles concernant le DDD. Bien qu’elles soient assez théoriques, elles sont nécessaires afin de bien comprendre son fonctionnement. Entity / Aggregates Qu’est-ce qu’une Entity ? Une Entity est un objet métier caractérisé par son identité unique, propre au Domaine. Elle peut être composée de Value Object ou de variables de types primitifs (integer, boolean, float…) et représente un concept évolutif. Les Entity sont souvent persistées en base de données grâce à leur identifiant. Dans notre système, par exemple, un Bottle Owner (la personne ayant ajouté la bouteille dans le système) est une Entity avec son id et son email. J’ai opté pour des Entity composées de Value Object, sauf pour les booléens, afin de rendre le code plus lisible et plus orienté métier. Cela oblige en revanche à écrire plus de code. Qu’est-ce qu’un Aggregate ? Un Aggregate est un regroupement logique de plusieurs Entity et Value Object, qui forment une unité cohérente. Il possède une racine unique (Aggregate Root), qui est l’entité principale par laquelle l’Aggregate est référencé et manipulé. Toute modification des éléments internes de l’Aggregate passe obligatoirement par cette racine. N’ayant pas d’exemple d’Aggregate dans mon application, on pourrait imaginer une dégustation de vin liée à des Entity Invitations. La racine serait la dégustation, et les Entity Invitations ne pourraient être modifiées qu’à travers elle. L’Aggregate pourrait également inclure des Value Object, tels qu’une date de dégustation ou un nom de bouteille. Si vous utilisez Doctrine pour gérer vos bases de données, vous pouvez décider de mettre ces Attributs dans les Entity. Cependant, il ne faut pas oublier que le code du Domaine doit pouvoir être extrait de votre application et continuer de fonctionner dans un autre contexte, sans dépendance à Doctrine. Dans notre cas, les Attributs seront reconnus comme des commentaires dans d’autres langages. Vision du Futur Je ne recommande pas le couplage entre les Entity du Domaine et celles de Doctrine, car cela peut créer des problématiques de modélisation, une violation de la séparation des préoccupations ou des difficultés lors des tests. J’ai déjà fait cette erreur, je vous l’expliquerai bientôt plus en détail. Validations et Assertions Les données d’une Entity doivent respecter les règles métiers applicables. Par exemple, une Bottle avec un Price doit être strictement supérieur à 0. Ces contraintes (appelées Assertions) doivent être vérifiées dans une Factory qui garantit la validité des Entity dès leur création. Toutes les actions affectant une Entity doivent être représentées par des méthodes spécifiques. Par exemple, une méthode Create pour créer une Entity, ou Taste pour déguster une bouteille. Ces actions déclenchent parfois des Domain Events. Value Object Voyons maintenant ce qui constitue les Entity et les Aggregate : les Value Object. Un Value Object est une représentation d’un concept métier. Il doit être immuable. Ce sont des représentations de concepts métiers, définies par leurs attributs plutôt que par une identité unique. Son immutabilité garantit qu’il ne change pas d’état après sa création. Dans l’exemple précédent, le Bottle Name est un Value Object. Factory Parfois, la création d’un objet n’a sa place ni dans l’Entity, ni dans le Value Object, ni dans l’Aggregate. On crée alors des Factory. Leur responsabilité reste ancrée dans le Domain. Dans ce projet, j’ai pris la décision d’utiliser des méthodes Static pour mes Factories. Cette approche était suffisante, mais il est totalement envisageable d’utiliser un Service à la place. Repository Le Repository est une interface dont le rôle est de stocker, lire et modifier les Aggregates et les Entity. On fait abstraction de l’endroit où ils sont persistés. Une seule règle clé : chaque Aggregate ou Entity ne doit avoir qu’un (et un seul) Repository. Nous aurons par exemple un Repository pour les Bottles, avec une méthode Add pour ajouter et une méthode OfId pour récupérer une Bottle par son id. J’ai pris le parti de laisser au Repository le soin de gérer les identités des Entity et des Aggregates. J’ai donc créé pour cela une méthode NextIdentity dans les Repository, responsable de générer les id. Domain Event Un Domain Event est une représentation d’un événement significatif qui s’est produit dans le Domain, reflétant un changement d’état important d’une Entity ou d’un Aggregate. Un Domain Event est immuable, identifiable par un id unique et horodaté, pour permettre le suivi et la gestion de l’ordre des Domain Event. Il est utilisé pour notifier d’autres parties du système (ou d’autres systèmes) des actions effectuées. Par exemple, quand on appelle la méthode Create sur l’Aggregate, on enregistre un Domain Event qui sera émis après avoir été stocké dans le système. Ce Domain Event doit être représentatif de l’action réalisée par le système (dans notre cas, BottleCreated). Domain Service Un Domain Service est un composant sans état qui encapsule une logique métier importante ne pouvant être attribuée à une seule Entity, à un Aggregate ou à un Value Object. Il représente des opérations ou des processus métier impliquant plusieurs Entity ou Aggregate et opère uniquement sur les objets du Domaine. Je n’ai pas d’exemple dans le cas des Bottles. Mais si on reprend le cas de la dégustation d’une bouteille de vin et de l’invitation de personnes, on peut créer un Domain Service en charge de vérifier si un participant peut être invité (s’il n’est pas déjà invité, ou s’il n’est pas l’organisateur de la dégustation). Le Domain Service pourrait ensuite créer les différentes invitations. Shared Kernel Le Shared Kernel est une partie du domaine partagée entre deux Bounded Contexts. Ceci inclut le code ou la base de données associée. La partie partagée a un statut spécial et ne doit pas être changée sans consulter les deux équipes qui maintiennent les Bounded Context. Il faut intégrer des tests fonctionnels sur cette partie et les lancer fréquemment. Vision du Futur J’ai eu une mauvaise vision du Shared Kernel. Je pensais pouvoir l’utiliser pour partager du code technique, mais il n’est censé partager que des notions métiers. Voilà pour cet article très théorique. La prochaine fois, j’aimerais rentrer dans le concret en partageant des exemples liés aux cas pratiques. À très bientôt !]]></summary></entry><entry xml:lang="fr"><title type="html">Journal de bord de l’apprentissage du Domain-Driven Design : Jour 2</title><link href="https://huguesgobet.com/ddd-logbook/2024-12-30" rel="alternate" type="text/html" title="Journal de bord de l’apprentissage du Domain-Driven Design : Jour 2" /><published>2024-12-30T10:00:00+00:00</published><updated>2024-12-30T10:00:00+00:00</updated><id>https://huguesgobet.com/fr/ddd-logbook/journal-de-bord-jour-deux</id><content type="html" xml:base="https://huguesgobet.com/ddd-logbook/2024-12-30"><![CDATA[<p>Dans mon précédent article du journal de bord, j’ai introduit les concepts de base du <strong>Domain-Driven Design (DDD)</strong>, et en particulier l’importance de l’<em>Ubiquitous Langage</em>. Aujourd’hui, j’expose la mise en place et la structure de mon projet.</p>

<h2 id="mise-en-place-du-projet">Mise en place du projet</h2>

<p>J’ai démarré le développement avec <strong><em>Symfony</em></strong>, mon framework <strong><em>PHP</em></strong> préféré. Il facilite vraiment la création d’applications web complexes grâce à son ensemble de bibliothèques modulaires, tout en encourageant les bonnes pratiques de développement.</p>

<p>Pour l’environnement de travail, j’ai mis en place un conteneur <strong><em>Docker</em></strong> avec <strong><em>MariaDB</em></strong>, <strong><em>Nginx</em></strong>, et un proxy pour gérer le <strong><em>HTTPS</em></strong>, garantissant un déploiement local fluide.</p>

<p>Le plus gros défi au lancement d’un nouveau projet est l’absence de revue externe. Après des heures et des heures passées sur la même fonctionnalité, il devient difficile de discerner les points faibles. Pour garantir le respect des règles de développement que je me suis fixées, j’ai intégré des outils essentiels.</p>

<h3 id="quatre-outils-pour-respecter-les-standards">Quatre outils pour respecter les standards</h3>

<ol>
  <li><strong><em>PHP CS Fixer</em></strong> : garantit que mon code est conforme aux standards de style et de bonnes pratiques d’écriture</li>
  <li><strong><em>PHPStan</em></strong> : analyse le code pour détecter les bugs, les oublis de typage et d’autres erreurs potentielles</li>
  <li><strong><em>Rector</em></strong> : un puissant outil pour refactoriser le code et gérer facilement les montées de versions de PHP et de Symfony</li>
  <li><strong><em>Deptrac</em></strong> : crucial pour vérifier que je respecte les principes de l’architecture hexagonale ou ceux des <em>Bounded Context</em>.</li>
</ol>

<h2 id="structure-et-architecture-du-projet">Structure et architecture du projet</h2>

<p>Pour ce projet, en plus du <strong>DDD</strong>, je souhaite partir sur une <strong>architecture hexagonale</strong> combinée au pattern <strong>CQRS</strong>, afin de créer une application adaptable et aisément testable. Cela facilite en plus l’évolution de la base de code.</p>

<h3 id="architecture-hexagonale">Architecture Hexagonale</h3>

<p>L’architecture est organisée autour de deux zones principales : l’intérieur (la logique métier) et l’extérieur (les interfaces).</p>

<p>L’extérieur se compose des <em>Ports</em> et d’<em>Adapter</em>, qui gèrent l’interaction avec les clients en transformant les requêtes en actions compréhensibles pour l’interface. Ces Ports permettent la communication avec le monde extérieur, que ce soit pour des demandes HTTP ou des messages. L’extérieur fournit également des mécanismes pour récupérer des données sauvegardées, stocker les résultats de l’application et les envoyer ailleurs.</p>

<p>La logique métier (l’application et le domaine) se trouve à l’intérieur de l’hexagone. J’ai défini un type d’interface client avec quatre types de requêtes. Trois utilisent le même Port (probablement via HTTP) et la quatrième passe par un Port différent (comme AMQP).</p>

<p>Les <em>Adapter</em> d’entrées convertissent ces demandes en opérations pour l’application, qui les traite ensuite en interne.</p>

<p>L’<em>Adapter</em> de sortie, quant à lui, envoie des données vers des systèmes externes, comme un message AMQP pour notifier un changement d’état. Le Port utilisé est différent de celui utilisé pour la persistance.</p>

<p><img src="/assets/images/2024-12-30/hexagonal-architecture.png" alt="Architecture héxagonale" /></p>

<h3 id="cqrs-command-query-responsibility-segregation">CQRS (Command Query Responsibility Segregation)</h3>

<p>Le <strong>CQRS</strong> est un pattern qui stipule que toutes les méthodes doivent être séparées en deux catégories : les <strong>Command</strong> et les <strong>Query</strong>.</p>

<ul>
  <li>Une <strong>Command</strong> exécute une action. Elle modifie l’état d’un objet et ne retourne pas de valeur, à l’exception de l’id de la ressource créée si nécessaire.</li>
  <li>Une <strong>Query</strong>, en revanche, ne fait que retourner des données, sans jamais changer l’état d’un objet.</li>
</ul>

<p>La séparation stricte clarifie la structure et rend le code plus lisible et maintenable.</p>

<h4 id="vision-du-futur">Vision du Futur</h4>

<p>Il y a une autre partie du <strong>CQRS</strong> que je n’évoque pas ici, car je ne l’ai découverte que plus tard : la séparation de la couche de lecture et d’écriture. J’aborderai ce point plus en détail dans un article ultérieur du Journal.</p>

<p><img src="/assets/images/2024-12-30/cqrs.png" alt="CQRS" /></p>

<h3 id="bounded-context">Bounded Context</h3>

<p>Afin de mieux structurer un projet, la notion de <strong>Bounded Context</strong> est importante.</p>

<h4 id="quest-ce-quun-bounded-context">Qu’est-ce qu’un Bounded Context ?</h4>

<p>Chaque <strong>Bounded Context</strong> est délimité de manière à encapsuler les concepts, les règles métier, les processus et les modèles de données relevant de sa responsabilité. Il représente les limites où s’applique l’<em>Ubiquitous Language</em>.</p>

<h4 id="comment-identifier-un-bounded-context">Comment identifier un Bounded Context ?</h4>

<p>En m’appuyant sur mon <strong>Domain Vision Statement</strong> [lien vers l’article 1], j’ai identifié trois <strong>Bounded Context</strong> :</p>
<ul>
  <li><strong>Country</strong> : gère la liste des pays</li>
  <li><strong>Bottle</strong> : gère les bouteilles et les cépages (variété de plants de vigne cultivée)</li>
  <li><strong>User</strong> : gère les utilisateurs et la sécurité</li>
</ul>

<p><img src="/assets/images/2024-12-30/bottles.png" alt="Des amis, du vin context map" /></p>

<h2 id="structure-du-projet">Structure du projet</h2>

<p>Chaque <strong>Bounded Context</strong> a son propre dossier. Dans mon cas, je vais donc en avoir trois : <strong>Bottle</strong>, <strong>Country</strong> et <strong>User</strong>. Il est crucial qu’aucun code ne traverse les frontières des <strong>Bounded Context</strong>. Si on veut faire communiquer des <strong>Bounded Context</strong>, on doit passer par des messages asynchrones ou des appels API. On valide cette règle avec l’outil <strong><em>Deptrac</em></strong>.</p>

<p>Dans chaque <strong>Bounded Context</strong>, on va retrouver :</p>

<ul>
  <li>Un dossier <strong>Domain</strong>, dans lequel on retrouve les <strong>Entity</strong>, les <strong>Value Object</strong>, les <strong>Repository</strong>, les <em>Services</em> liés au Domaine, les <em>Events</em> du Domaine.</li>
  <li>Un dossier <strong>Application</strong>, dans lequel se trouve toute la couche <strong>CQRS</strong>, avec un dossier <strong>Command</strong> et un dossier <strong>Query</strong>. J’ai ajouté également les <em>Event Listener</em> qui écoutent les <em>Events</em> du Domaine. Cette couche est le liant entre la partie <strong>Infrastructure</strong> et la couche du <strong>Domain</strong>.</li>
  <li>Un dossier <strong>Infrastructure</strong>, dans lequel on place les implémentations concrètes des interfaces définies dans le <strong>Domaine</strong> et tout ce qui est en charge de la communication avec l’extérieur (stockage, mailing, authentification), mais aussi les ressources API.</li>
</ul>

<p>Voici ce que ça donne pour mon projet (j’utilise <strong><em>PHPStorm</em></strong> pour développer) :</p>

<p><img src="/assets/images/2024-12-30/code-structure.png" alt="Des amis, du vin structure du projet" width="25%" /></p>

<p>La couche <strong>Application</strong> est facultative. On peut avoir des implémentations de l’<strong>Architecture Hexagonale</strong> avec seulement le <strong>Domaine</strong> et l’<strong>Infrastructure</strong>.</p>

<p>Ce journal de bord est, une fois encore, dense en nouveaux concepts. Se lancer dans un projet avec toutes ces nouvelles idées est à la fois un défi et une opportunité d’apprentissage. Je vous donne rendez-vous très bientôt pour un nouvel épisode.</p>]]></content><author><name>Hugues Gobet</name><email>hugues.gobet@gmail.com</email></author><category term="ddd-logbook" /><summary type="html"><![CDATA[Dans mon précédent article du journal de bord, j’ai introduit les concepts de base du Domain-Driven Design (DDD), et en particulier l’importance de l’Ubiquitous Langage. Aujourd’hui, j’expose la mise en place et la structure de mon projet. Mise en place du projet J’ai démarré le développement avec Symfony, mon framework PHP préféré. Il facilite vraiment la création d’applications web complexes grâce à son ensemble de bibliothèques modulaires, tout en encourageant les bonnes pratiques de développement. Pour l’environnement de travail, j’ai mis en place un conteneur Docker avec MariaDB, Nginx, et un proxy pour gérer le HTTPS, garantissant un déploiement local fluide. Le plus gros défi au lancement d’un nouveau projet est l’absence de revue externe. Après des heures et des heures passées sur la même fonctionnalité, il devient difficile de discerner les points faibles. Pour garantir le respect des règles de développement que je me suis fixées, j’ai intégré des outils essentiels. Quatre outils pour respecter les standards PHP CS Fixer : garantit que mon code est conforme aux standards de style et de bonnes pratiques d’écriture PHPStan : analyse le code pour détecter les bugs, les oublis de typage et d’autres erreurs potentielles Rector : un puissant outil pour refactoriser le code et gérer facilement les montées de versions de PHP et de Symfony Deptrac : crucial pour vérifier que je respecte les principes de l’architecture hexagonale ou ceux des Bounded Context. Structure et architecture du projet Pour ce projet, en plus du DDD, je souhaite partir sur une architecture hexagonale combinée au pattern CQRS, afin de créer une application adaptable et aisément testable. Cela facilite en plus l’évolution de la base de code. Architecture Hexagonale L’architecture est organisée autour de deux zones principales : l’intérieur (la logique métier) et l’extérieur (les interfaces). L’extérieur se compose des Ports et d’Adapter, qui gèrent l’interaction avec les clients en transformant les requêtes en actions compréhensibles pour l’interface. Ces Ports permettent la communication avec le monde extérieur, que ce soit pour des demandes HTTP ou des messages. L’extérieur fournit également des mécanismes pour récupérer des données sauvegardées, stocker les résultats de l’application et les envoyer ailleurs. La logique métier (l’application et le domaine) se trouve à l’intérieur de l’hexagone. J’ai défini un type d’interface client avec quatre types de requêtes. Trois utilisent le même Port (probablement via HTTP) et la quatrième passe par un Port différent (comme AMQP). Les Adapter d’entrées convertissent ces demandes en opérations pour l’application, qui les traite ensuite en interne. L’Adapter de sortie, quant à lui, envoie des données vers des systèmes externes, comme un message AMQP pour notifier un changement d’état. Le Port utilisé est différent de celui utilisé pour la persistance. CQRS (Command Query Responsibility Segregation) Le CQRS est un pattern qui stipule que toutes les méthodes doivent être séparées en deux catégories : les Command et les Query. Une Command exécute une action. Elle modifie l’état d’un objet et ne retourne pas de valeur, à l’exception de l’id de la ressource créée si nécessaire. Une Query, en revanche, ne fait que retourner des données, sans jamais changer l’état d’un objet. La séparation stricte clarifie la structure et rend le code plus lisible et maintenable. Vision du Futur Il y a une autre partie du CQRS que je n’évoque pas ici, car je ne l’ai découverte que plus tard : la séparation de la couche de lecture et d’écriture. J’aborderai ce point plus en détail dans un article ultérieur du Journal. Bounded Context Afin de mieux structurer un projet, la notion de Bounded Context est importante. Qu’est-ce qu’un Bounded Context ? Chaque Bounded Context est délimité de manière à encapsuler les concepts, les règles métier, les processus et les modèles de données relevant de sa responsabilité. Il représente les limites où s’applique l’Ubiquitous Language. Comment identifier un Bounded Context ? En m’appuyant sur mon Domain Vision Statement [lien vers l’article 1], j’ai identifié trois Bounded Context : Country : gère la liste des pays Bottle : gère les bouteilles et les cépages (variété de plants de vigne cultivée) User : gère les utilisateurs et la sécurité Structure du projet Chaque Bounded Context a son propre dossier. Dans mon cas, je vais donc en avoir trois : Bottle, Country et User. Il est crucial qu’aucun code ne traverse les frontières des Bounded Context. Si on veut faire communiquer des Bounded Context, on doit passer par des messages asynchrones ou des appels API. On valide cette règle avec l’outil Deptrac. Dans chaque Bounded Context, on va retrouver : Un dossier Domain, dans lequel on retrouve les Entity, les Value Object, les Repository, les Services liés au Domaine, les Events du Domaine. Un dossier Application, dans lequel se trouve toute la couche CQRS, avec un dossier Command et un dossier Query. J’ai ajouté également les Event Listener qui écoutent les Events du Domaine. Cette couche est le liant entre la partie Infrastructure et la couche du Domain. Un dossier Infrastructure, dans lequel on place les implémentations concrètes des interfaces définies dans le Domaine et tout ce qui est en charge de la communication avec l’extérieur (stockage, mailing, authentification), mais aussi les ressources API. Voici ce que ça donne pour mon projet (j’utilise PHPStorm pour développer) : La couche Application est facultative. On peut avoir des implémentations de l’Architecture Hexagonale avec seulement le Domaine et l’Infrastructure. Ce journal de bord est, une fois encore, dense en nouveaux concepts. Se lancer dans un projet avec toutes ces nouvelles idées est à la fois un défi et une opportunité d’apprentissage. Je vous donne rendez-vous très bientôt pour un nouvel épisode.]]></summary></entry><entry xml:lang="fr"><title type="html">La pagination : besoin métier ou besoin technique ?</title><link href="https://huguesgobet.com/other/2024-12-16" rel="alternate" type="text/html" title="La pagination : besoin métier ou besoin technique ?" /><published>2024-12-16T14:00:00+00:00</published><updated>2024-12-16T14:00:00+00:00</updated><id>https://huguesgobet.com/other/pagination-besoin-metier-ou-technique</id><content type="html" xml:base="https://huguesgobet.com/other/2024-12-16"><![CDATA[<p>Lors du développement d’une application pour un site e-commerce, j’ai récemment rencontré un problème épineux : comment gérer la pagination des produits tout en respectant les principes du <strong>Domain-Driven Design (DDD)</strong>, de l’<strong>Architecture Hexagonale</strong> et du <strong>Command Query Responsibility Segregation (CQRS)</strong> ? Je me suis longtemps demandé si la pagination devait faire partie du <strong>Domaine</strong>, et si non, comment faire le lien entre la couche <strong>Infrastructure</strong>, ou la couche <strong>Application</strong>, et le <strong>Repository</strong> qui se trouve dans la couche <strong>Domaine</strong>. Comment alors respecter les règles des architectures qu’on a choisi d’utiliser ? Je vous livre dans cet article mon cheminement et mes analyses.</p>

<h2 id="rappel-des-différentes-méthodologies-de-développement-utilisées">Rappel des différentes méthodologies de développement utilisées</h2>

<h3 id="domain-driven-design"><strong>Domain-Driven Design</strong></h3>

<p>Le <strong>DDD</strong> est une approche de développement logiciel qui place le <strong>Domaine</strong> métier au cœur du développement. Pour cela, on utilise plusieurs patterns logiciels, comme par exemple les <strong>Entity</strong>, les <strong>Aggregate</strong>, les <strong>Value Object</strong>, les <strong>Repository</strong>… Cependant, utiliser seulement les patterns techniques est une mauvaise utilisation du <strong>DDD</strong>. En effet, l’essentiel réside dans l’utilisation de l’<strong>Ubiquitous Language</strong> et dans la modélisation du <strong>Domaine</strong>. Le <strong>DDD</strong> encourage une collaboration étroite entre les développeurs et les experts métier pour créer un modèle commun. De plus, le concept de <strong>Bounded Context</strong> est essentiel pour délimiter les sous-domaines et gérer la complexité du système.</p>

<h3 id="architecture-hexagonale"><strong>Architecture Hexagonale</strong></h3>

<p>L’<strong>Architecture Hexagonale</strong> (aussi connue sous le nom d’architecture Port/Adapter) prône la séparation d’une application en plusieurs couches et vise à rendre le <strong>Domaine</strong> indépendant de l’extérieur (base de données, framework…). Deux couches sont obligatoires : le <strong>Domaine</strong>, avec le code métier (les <strong>Entity</strong>, les <strong>Aggregate</strong>, les <strong>Value Object</strong>, les <strong>Repository</strong>…), et l’<strong>Infrastructure</strong>, qui gère les communications avec l’extérieur grâce aux Adapters d’entrées (les <strong><em>Controllers</em></strong>) et aux Adapters de sorties (les <strong>Repository</strong>).</p>

<p>Les deux couches communiquent en utilisant l’inversion de dépendance. On définit une interface dans le <strong>Domaine</strong> (par exemple un <strong>Repository</strong>, avec la méthode <strong><em>Add</em></strong>) et l’<strong>Infrastructure</strong> fournit l’implémentation de la méthode <strong><em>Add</em></strong> du <strong>Repository</strong> pour enregistrer la nouvelle <strong>Entity</strong> en base de données.</p>

<p><img src="/assets/images/2024-12-16/hexagonal-architecture.png" alt="Architecture héxagonale" /></p>

<h3 id="command-query-responsibility-segregation-cqrs"><strong>Command Query Responsibility Segregation (CQRS)</strong></h3>

<p>Le <strong>CQRS</strong> est un pattern qui stipule que toute action sur le système est soit une <strong>Query</strong> (pour lire dans le système) soit une <strong>Command</strong> (pour effectuer une action et modifier le système). Une <strong>Command</strong> ne retourne rien ou l’identifiant de la ressource créée. Le <strong>CQRS</strong> impose aussi de séparer le modèle d’écriture et le modèle de lecture.</p>

<p><img src="/assets/images/2024-12-16/cqrs.png" alt="CQRS" /></p>

<h2 id="cas-pratique-liste-de-produits-paginée-pour-un-site-de-e-commerce">Cas pratique : liste de produits paginée pour un site de e-commerce</h2>

<p>Pour cet article, je vais prendre comme exemple un cas classique pour les sites de e-commerce : une liste de <u>produits</u> paginée sur laquelle on peut faire une recherche par <u>nom de produits</u>. J’exposerai ensuite pourquoi la solution peut sembler simple mais qu’elle soulève une question.</p>

<p><img src="/assets/images/2024-12-16/fr-use-case-product.png" alt="Cas d'usage pour la lecture d'un produit" /></p>

<h2 id="mise-en-œuvre-initiale">Mise en œuvre initiale</h2>

<p>Pour commencer, j’ai créé une <strong>Entity</strong> <u>Produit</u> dans le <strong>Domaine</strong> :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Domain\Entity</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">Product</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">ProductId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">ProductName</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">ProductPrice</span> <span class="nv">$price</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">ProductId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">name</span><span class="p">():</span> <span class="kt">ProductName</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">price</span><span class="p">():</span> <span class="kt">ProductPrice</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">price</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>L’<u>id</u>, le <u>name</u> et le <u>price</u> sont tous les trois des <strong>Value Object</strong>.</p>

<p>L’interface du <strong>Repository</strong> fait aussi partie du <strong>Domaine</strong> :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Domain\Repository</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Domain\Entity\Product</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Domain\ValueObject\ProductName</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">ProductRepository</span>
<span class="p">{</span>
    <span class="cd">/**
     * @return Product[]
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">getProductsWithName</span><span class="p">(</span><span class="kt">ProductName</span> <span class="nv">$name</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$itemPerPage</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$page</span><span class="p">):</span> <span class="kt">array</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Je ne parlerai pas de l’implémentation de cette interface dans cet article, car cela n’a aucun intérêt pour traiter le sujet du jour.</p>

<p>La <strong>Query</strong> et le <strong>QueryHandler</strong>, qui sont en charge de formater et de faire le lien entre le <strong>Domaine</strong> et l’extérieur, peuvent se trouver soit dans la couche <strong>Infrastructure</strong>, soit dans la couche <strong>Application</strong>. Pour éviter de rajouter une couche dans cet exemple, je les ai mis dans la couche <strong>Infrastructure</strong>, même si personnellement je préfère les mettre dans la couche <strong>Application</strong>.</p>

<p>Voici la <strong>Query</strong> :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Query</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">ListProductsWithNameQuery</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="nv">$itemPerPage</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="nv">$page</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Et le <strong>QueryHandler</strong> :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Query</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">ListProductsWithNameQueryHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">ProductRepository</span> <span class="nv">$productRepository</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="cd">/**
     * @return Product[]
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">ListProductsWithNameQuery</span> <span class="nv">$query</span><span class="p">):</span> <span class="kt">array</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">productRepository</span><span class="o">-&gt;</span><span class="nf">getProductsWithName</span><span class="p">(</span>
            <span class="nc">ProductName</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="nv">$query</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">),</span>
            <span class="nv">$query</span><span class="o">-&gt;</span><span class="n">itemPerPage</span><span class="p">,</span>
            <span class="nv">$query</span><span class="o">-&gt;</span><span class="n">page</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>J’ai placé le <strong><em>Controller</em></strong> dans la couche <strong>Infrastructure</strong>. Il a pour but de transformer ce qui vient de la requête HTTP en <strong>Query</strong> pour ensuite la dispatcher.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Controller</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="kd">extends</span> <span class="nc">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="kt">QueryBus</span> <span class="nv">$queryBus</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">Request</span> <span class="nv">$request</span><span class="p">):</span> <span class="kt">Response</span>
    <span class="p">{</span>
        <span class="nv">$products</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queryBus</span><span class="o">-&gt;</span><span class="nf">ask</span><span class="p">(</span>
            <span class="k">new</span> <span class="nc">ListProductsWithNameQuery</span><span class="p">(</span>
                <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'name'</span><span class="p">),</span>
                <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'itemPerPage'</span><span class="p">),</span>
                <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'page'</span><span class="p">),</span>
            <span class="p">)</span>
        <span class="p">);</span>

        <span class="nv">$paginatedProduct</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PaginatedProduct</span><span class="p">(</span>
            <span class="n">products</span><span class="o">:</span> <span class="nv">$products</span><span class="p">,</span>
            <span class="n">total</span><span class="o">:</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$products</span><span class="p">),</span>
            <span class="n">page</span><span class="o">:</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'page'</span><span class="p">),</span>
        <span class="p">);</span>

        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">json</span><span class="p">(</span><span class="nv">$paginatedProduct</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="analyse-de-la-mise-en-œuvre">Analyse de la mise en œuvre</h2>

<p>Cet exemple d’implémentation d’une recherche de <u>produit</u> paginé respecte la séparation des couches de l’<strong>Architecture Hexagonale</strong> : le code métier est bien séparé de la couche <strong>Infrastructure</strong>. Il respecte aussi une partie du <strong>CQRS</strong> puisque je passe par une <strong>Query</strong> pour interroger le système.</p>

<p>En revanche, le modèle de lecture n’est pas séparé du modèle d’écriture, ce qui est un non-respect du <strong>CQRS</strong>. J’ai initialement pensé que ce n’était pas grave jusqu’à ce que cela induise une erreur : mon <strong>Domaine</strong> est pollué par des notions de la couche <strong>Infrastructure</strong> (ou de présentation). La pagination n’étant pas une partie du <strong>Domaine</strong>, elle ne lui apporte aucune valeur et peut changer en fonction de l’Adapter primaire (HTTP, Console…). Le filtre par nom, quant à lui, est un use case métier, mais il n’apporte pas grand-chose au <strong>Domaine</strong> et fait aussi partie de la couche de présentation.</p>

<p>Mais alors, comment gérer la pagination sans polluer mon <strong>Domaine</strong> ?</p>

<p>Ce n’est certainement pas la seule façon de faire, mais j’ai choisi de me conformer au <strong>CQRS</strong> complètement et de séparer le modèle d’écriture du modèle de lecture. J’ai donc déplacé le modèle de lecture dans la couche <strong>Infrastructure</strong> (ou la couche <strong>Application</strong>) ; il peut même être extrait du projet qui gère le <strong>Domaine</strong> des <u>produits</u>. Pour cela, à chaque action sur le modèle (création, modification ou suppression d’<strong>Aggregate</strong> ou d’<strong>Entity</strong>), je le répercute dans le modèle de lecture.</p>

<h2 id="avantages-de-cette-approche">Avantages de cette approche</h2>

<ul>
  <li>Ce modèle de lecture est adapté à un besoin de présentation. Vous n’êtes donc pas contraints de sauvegarder les données de l’<strong>Aggregate</strong> ou de l’<strong>Entity</strong> si vous n’en avez pas besoin.</li>
  <li>Vous n’êtes pas obligés de respecter la structure de votre modèle d’écriture. Par exemple, si vous gérez une <u>soirée</u> avec des <u>invitations</u> et que vous devez filtrer ces <u>invitations</u> pour n’afficher que celles correspondant à un utilisateur spécifique, vous créez un modèle dédié aux <u>invitations</u> dans votre modèle de lecture et vous y incluez toutes les informations nécessaires (qu’elles proviennent de la <u>soirée</u> ou de l’<u>invitation</u>). La duplication des données n’a ici aucune importance.</li>
  <li>Pas de contrainte de stockage du modèle. Vous pouvez utiliser le même serveur pour mutualiser les coûts, je recommande juste de séparer les bases de données pour une séparation physique minimale. Vous pouvez également utiliser un stockage adapté comme Elasticsearch ou MongoDB. Cette problématique ne concernant pas l’Architecture du logiciel, je n’en parlerai pas plus dans cet article.</li>
</ul>

<h2 id="mise-en-œuvre-de-cette-solution">Mise en œuvre de cette solution</h2>

<p>Je vais détailler ici les différentes étapes que j’ai mises en œuvre afin de séparer le modèle d’écriture et le modèle de lecture.</p>

<h3 id="transformation-de-modèle-décriture-en-modèle-de-lecture">Transformation de modèle d’écriture en modèle de lecture</h3>

<p>J’utilise pour cela les <strong>événements du Domaine</strong> et les <strong>Projections</strong>.</p>

<ul>
  <li>Qu’est-ce qu’un <strong>événement du Domaine</strong> ? C’est un événement dispatché quand une action se produit dans le <strong>Domaine</strong>. Par exemple, lors de la création d’un <u>produit</u>, on dispatche un événement <u>produit créé</u>.</li>
  <li>Qu’est-ce qu’une <strong>Projection</strong> ? C’est le fait de projeter le modèle d’écriture dans le modèle de lecture. C’est une partie de la couche <strong>Infrastructure</strong> ou de la couche <strong>Application</strong>. Une <strong>Projection</strong> est appelée en réponse à l’événement émis par le <strong>Domaine</strong>.</li>
</ul>

<h3 id="création-du-modèle-de-lecture">Création du modèle de lecture</h3>

<p>Je vais maintenant présenter la création du modèle de lecture et ensuite la partie lecture transformée pour utiliser le Read Model.</p>

<p><img src="/assets/images/2024-12-16/fr-use-case-create-read-model-product.png" alt="Cas d'usage pour la création du modèle de lecture d'un produit" /></p>

<p>Voici l’<strong>Entity</strong> <u>Product</u> avec l’enregistrement de l’évènement lors de la création du <u>Product</u> :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Domain\Entity</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="kd">extends</span> <span class="nc">Aggregate</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">ProductId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">ProductName</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">ProductPrice</span> <span class="nv">$price</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">create</span><span class="p">(</span>
        <span class="kt">ProductId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="kt">ProductName</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="kt">ProductPrice</span> <span class="nv">$price</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">self</span> <span class="p">{</span>
        <span class="nv">$product</span> <span class="o">=</span>  <span class="k">new</span> <span class="nc">self</span><span class="p">(</span>
            <span class="nv">$id</span><span class="p">,</span>
            <span class="nv">$name</span><span class="p">,</span>
            <span class="nv">$price</span><span class="p">,</span>
        <span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">record</span><span class="p">(</span><span class="k">new</span> <span class="nc">ProductCreated</span><span class="p">(</span>
            <span class="nv">$id</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
            <span class="nv">$name</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
            <span class="nv">$price</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
        <span class="p">));</span>

        <span class="k">return</span> <span class="nv">$product</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">ProductId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">name</span><span class="p">():</span> <span class="kt">ProductName</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">price</span><span class="p">():</span> <span class="kt">ProductPrice</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">price</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Voilà la <strong>Projection</strong> qui peut soit être appelée, soit être déjà présente dans un <strong><em>EventListener</em></strong> ou un <strong><em>MessageHandler</em></strong>. Pour le besoin d’un exemple court, j’ai mis le code directement dans l’<strong><em>EventListener</em></strong>. Je recommande de le sortir dans une classe dédiée.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Projection</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CreateProductProjection</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">ProductAdapterInterface</span> <span class="nv">$productAdapter</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">ProductCreated</span> <span class="nv">$event</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$product</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="p">(</span>
            <span class="nv">$event</span><span class="o">-&gt;</span><span class="n">productId</span><span class="p">,</span>
            <span class="nv">$event</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span>
            <span class="nv">$event</span><span class="o">-&gt;</span><span class="n">price</span><span class="p">,</span>
        <span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">productAdapter</span><span class="o">-&gt;</span><span class="nf">add</span><span class="p">(</span><span class="nv">$product</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Voilà l’Adapter qui sera en charge de stocker les données dans le modèle de lecture :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Adapter</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">ProductAdapterInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">add</span><span class="p">(</span><span class="kt">Product</span> <span class="nv">$product</span><span class="p">):</span> <span class="kt">void</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>L’implémentation dépendra de la solution que vous choisirez.</p>

<p>Voici à quoi ressemble le modèle de lecture du <u>Product</u> :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\ReadModel</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">Product</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">float</span> <span class="nv">$price</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Le modèle de lecture est désormais prêt, il faut maintenant l’interroger.</p>

<h3 id="interrogation-du-modèle-de-lecture">Interrogation du modèle de lecture</h3>

<p>Pour cela, j’ai repris le schéma du Use Case que j’ai un peu modifié :</p>

<p><img src="/assets/images/2024-12-16/fr-use-case-list-product.png" alt="Cas d'usage pour la lecture d'un produit" /></p>

<p>L’Adapter de lecture ne se trouve donc maintenant plus dans le <strong>Domaine</strong>, mais dans la couche <strong>Infrastructure</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Adapter</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">ProductAdapterInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">add</span><span class="p">(</span><span class="kt">Product</span> <span class="nv">$product</span><span class="p">):</span> <span class="kt">void</span><span class="p">;</span>

    <span class="cd">/**
     * @return Product[]
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">getProductsWithName</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$itemPerPage</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$page</span><span class="p">):</span> <span class="kt">array</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>L’Adapter est donc en charge de lire le modèle de lecture, on y retrouve la méthode qui était dans le <strong>Repository</strong> de l’exemple précédent. J’ai modifié le paramètre <u>name</u>, pour que ce ne soit plus qu’une simple String. Puisqu’on est en dehors du <strong>Domaine</strong>, il n’est plus nécessaire que ce soit un <strong>Value Object</strong>.</p>

<p>La <strong>Query</strong> ne change pas :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Query</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">ListProductsWithNameQuery</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="nv">$itemPerPage</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="nv">$page</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Dorénavant, le <strong>QueryHandler</strong> n’appellera plus le <strong>Repository</strong> du <strong>Domaine</strong> mais l’Adapter qui lit dans le Read Model :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Query</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">ListProductsWithNameQueryHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">ProductAdapterInterface</span> <span class="nv">$productAdapter</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="cd">/**
     * @return Product[]
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">ListProductsWithNameQuery</span> <span class="nv">$query</span><span class="p">):</span> <span class="kt">array</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">productAdapter</span><span class="o">-&gt;</span><span class="nf">getProductsWithName</span><span class="p">(</span>
            <span class="nv">$query</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span>
            <span class="nv">$query</span><span class="o">-&gt;</span><span class="n">itemPerPage</span><span class="p">,</span>
            <span class="nv">$query</span><span class="o">-&gt;</span><span class="n">page</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Le <strong><em>Controller</em></strong> ne change pas non plus :</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Controller</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="kd">extends</span> <span class="nc">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="kt">QueryBus</span> <span class="nv">$queryBus</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">Request</span> <span class="nv">$request</span><span class="p">):</span> <span class="kt">Response</span>
    <span class="p">{</span>
        <span class="nv">$products</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queryBus</span><span class="o">-&gt;</span><span class="nf">ask</span><span class="p">(</span>
            <span class="k">new</span> <span class="nc">ListProductsWithNameQuery</span><span class="p">(</span>
                <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'name'</span><span class="p">),</span>
                <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'itemPerPage'</span><span class="p">),</span>
                <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'page'</span><span class="p">),</span>
            <span class="p">)</span>
        <span class="p">);</span>

        <span class="nv">$paginatedProduct</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PaginatedProduct</span><span class="p">(</span>
            <span class="n">products</span><span class="o">:</span> <span class="nv">$products</span><span class="p">,</span>
            <span class="n">total</span><span class="o">:</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$products</span><span class="p">),</span>
            <span class="n">page</span><span class="o">:</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'page'</span><span class="p">),</span>
        <span class="p">);</span>

        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">json</span><span class="p">(</span><span class="nv">$paginatedProduct</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>J’ai tenté de répondre à la question : la pagination est-elle un besoin métier ou un besoin technique ? De ce qu’on a vu, la pagination fait partie des use cases métier mais ne relève pas de la responsabilité du <strong>Domaine</strong>. Il est donc nécessaire de l’intégrer en dissociant le modèle de lecture du modèle du <strong>Domaine</strong>. Une telle approche permet de garder l’intégrité du <strong>Domaine</strong> en le maintenant à l’écart des problématiques qui ne relèvent pas de son périmètre.</p>

<p>Pour les intéressés, vous pouvez retrouver tout le code de cet article sur <a href="https://github.com/tegbessou/ddd-pagination"><em>GitHub</em></a>. Vous y trouverez le code sans le Read Model ainsi que la dernière version.</p>

<p>Je vous donne rendez-vous dans quinze jours pour un prochain article du Journal de Bord du <strong>DDD</strong>.</p>]]></content><author><name>Hugues Gobet</name><email>hugues.gobet@gmail.com</email></author><category term="other" /><summary type="html"><![CDATA[Lors du développement d’une application pour un site e-commerce, j’ai récemment rencontré un problème épineux : comment gérer la pagination des produits tout en respectant les principes du Domain-Driven Design (DDD), de l’Architecture Hexagonale et du Command Query Responsibility Segregation (CQRS) ? Je me suis longtemps demandé si la pagination devait faire partie du Domaine, et si non, comment faire le lien entre la couche Infrastructure, ou la couche Application, et le Repository qui se trouve dans la couche Domaine. Comment alors respecter les règles des architectures qu’on a choisi d’utiliser ? Je vous livre dans cet article mon cheminement et mes analyses. Rappel des différentes méthodologies de développement utilisées Domain-Driven Design Le DDD est une approche de développement logiciel qui place le Domaine métier au cœur du développement. Pour cela, on utilise plusieurs patterns logiciels, comme par exemple les Entity, les Aggregate, les Value Object, les Repository… Cependant, utiliser seulement les patterns techniques est une mauvaise utilisation du DDD. En effet, l’essentiel réside dans l’utilisation de l’Ubiquitous Language et dans la modélisation du Domaine. Le DDD encourage une collaboration étroite entre les développeurs et les experts métier pour créer un modèle commun. De plus, le concept de Bounded Context est essentiel pour délimiter les sous-domaines et gérer la complexité du système. Architecture Hexagonale L’Architecture Hexagonale (aussi connue sous le nom d’architecture Port/Adapter) prône la séparation d’une application en plusieurs couches et vise à rendre le Domaine indépendant de l’extérieur (base de données, framework…). Deux couches sont obligatoires : le Domaine, avec le code métier (les Entity, les Aggregate, les Value Object, les Repository…), et l’Infrastructure, qui gère les communications avec l’extérieur grâce aux Adapters d’entrées (les Controllers) et aux Adapters de sorties (les Repository). Les deux couches communiquent en utilisant l’inversion de dépendance. On définit une interface dans le Domaine (par exemple un Repository, avec la méthode Add) et l’Infrastructure fournit l’implémentation de la méthode Add du Repository pour enregistrer la nouvelle Entity en base de données. Command Query Responsibility Segregation (CQRS) Le CQRS est un pattern qui stipule que toute action sur le système est soit une Query (pour lire dans le système) soit une Command (pour effectuer une action et modifier le système). Une Command ne retourne rien ou l’identifiant de la ressource créée. Le CQRS impose aussi de séparer le modèle d’écriture et le modèle de lecture. Cas pratique : liste de produits paginée pour un site de e-commerce Pour cet article, je vais prendre comme exemple un cas classique pour les sites de e-commerce : une liste de produits paginée sur laquelle on peut faire une recherche par nom de produits. J’exposerai ensuite pourquoi la solution peut sembler simple mais qu’elle soulève une question. Mise en œuvre initiale Pour commencer, j’ai créé une Entity Produit dans le Domaine : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 namespace App\Domain\Entity; final class Product { public function __construct( private ProductId $id, private ProductName $name, private ProductPrice $price, ) {} public function id(): ProductId { return $this-&gt;id; } public function name(): ProductName { return $this-&gt;name; } public function price(): ProductPrice { return $this-&gt;price; } } L’id, le name et le price sont tous les trois des Value Object. L’interface du Repository fait aussi partie du Domaine : 1 2 3 4 5 6 7 8 9 10 11 12 namespace App\Domain\Repository; use App\Domain\Entity\Product; use App\Domain\ValueObject\ProductName; interface ProductRepository { /** * @return Product[] */ public function getProductsWithName(ProductName $name, int $itemPerPage, int $page): array; } Je ne parlerai pas de l’implémentation de cette interface dans cet article, car cela n’a aucun intérêt pour traiter le sujet du jour. La Query et le QueryHandler, qui sont en charge de formater et de faire le lien entre le Domaine et l’extérieur, peuvent se trouver soit dans la couche Infrastructure, soit dans la couche Application. Pour éviter de rajouter une couche dans cet exemple, je les ai mis dans la couche Infrastructure, même si personnellement je préfère les mettre dans la couche Application. Voici la Query : 1 2 3 4 5 6 7 8 9 10 11 namespace App\Infrastructure\Query; final readonly class ListProductsWithNameQuery { public function __construct( public string $name, public int $itemPerPage, public int $page, ) { } } Et le QueryHandler : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 namespace App\Infrastructure\Query; final readonly class ListProductsWithNameQueryHandler { public function __construct( private ProductRepository $productRepository ) {} /** * @return Product[] */ public function __invoke(ListProductsWithNameQuery $query): array { return $this-&gt;productRepository-&gt;getProductsWithName( ProductName::fromString($query-&gt;name), $query-&gt;itemPerPage, $query-&gt;page ); } } J’ai placé le Controller dans la couche Infrastructure. Il a pour but de transformer ce qui vient de la requête HTTP en Query pour ensuite la dispatcher. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 namespace App\Infrastructure\Controller; final class ProductController extends AbstractController { public function __construct( private readonly QueryBus $queryBus, ) {} public function __invoke(Request $request): Response { $products = $this-&gt;queryBus-&gt;ask( new ListProductsWithNameQuery( $request-&gt;query-&gt;get('name'), (int) $request-&gt;query-&gt;get('itemPerPage'), (int) $request-&gt;query-&gt;get('page'), ) ); $paginatedProduct = new PaginatedProduct( products: $products, total: count($products), page: (int) $request-&gt;query-&gt;get('page'), ); return $this-&gt;json($paginatedProduct); } } Analyse de la mise en œuvre Cet exemple d’implémentation d’une recherche de produit paginé respecte la séparation des couches de l’Architecture Hexagonale : le code métier est bien séparé de la couche Infrastructure. Il respecte aussi une partie du CQRS puisque je passe par une Query pour interroger le système. En revanche, le modèle de lecture n’est pas séparé du modèle d’écriture, ce qui est un non-respect du CQRS. J’ai initialement pensé que ce n’était pas grave jusqu’à ce que cela induise une erreur : mon Domaine est pollué par des notions de la couche Infrastructure (ou de présentation). La pagination n’étant pas une partie du Domaine, elle ne lui apporte aucune valeur et peut changer en fonction de l’Adapter primaire (HTTP, Console…). Le filtre par nom, quant à lui, est un use case métier, mais il n’apporte pas grand-chose au Domaine et fait aussi partie de la couche de présentation. Mais alors, comment gérer la pagination sans polluer mon Domaine ? Ce n’est certainement pas la seule façon de faire, mais j’ai choisi de me conformer au CQRS complètement et de séparer le modèle d’écriture du modèle de lecture. J’ai donc déplacé le modèle de lecture dans la couche Infrastructure (ou la couche Application) ; il peut même être extrait du projet qui gère le Domaine des produits. Pour cela, à chaque action sur le modèle (création, modification ou suppression d’Aggregate ou d’Entity), je le répercute dans le modèle de lecture. Avantages de cette approche Ce modèle de lecture est adapté à un besoin de présentation. Vous n’êtes donc pas contraints de sauvegarder les données de l’Aggregate ou de l’Entity si vous n’en avez pas besoin. Vous n’êtes pas obligés de respecter la structure de votre modèle d’écriture. Par exemple, si vous gérez une soirée avec des invitations et que vous devez filtrer ces invitations pour n’afficher que celles correspondant à un utilisateur spécifique, vous créez un modèle dédié aux invitations dans votre modèle de lecture et vous y incluez toutes les informations nécessaires (qu’elles proviennent de la soirée ou de l’invitation). La duplication des données n’a ici aucune importance. Pas de contrainte de stockage du modèle. Vous pouvez utiliser le même serveur pour mutualiser les coûts, je recommande juste de séparer les bases de données pour une séparation physique minimale. Vous pouvez également utiliser un stockage adapté comme Elasticsearch ou MongoDB. Cette problématique ne concernant pas l’Architecture du logiciel, je n’en parlerai pas plus dans cet article. Mise en œuvre de cette solution Je vais détailler ici les différentes étapes que j’ai mises en œuvre afin de séparer le modèle d’écriture et le modèle de lecture. Transformation de modèle d’écriture en modèle de lecture J’utilise pour cela les événements du Domaine et les Projections. Qu’est-ce qu’un événement du Domaine ? C’est un événement dispatché quand une action se produit dans le Domaine. Par exemple, lors de la création d’un produit, on dispatche un événement produit créé. Qu’est-ce qu’une Projection ? C’est le fait de projeter le modèle d’écriture dans le modèle de lecture. C’est une partie de la couche Infrastructure ou de la couche Application. Une Projection est appelée en réponse à l’événement émis par le Domaine. Création du modèle de lecture Je vais maintenant présenter la création du modèle de lecture et ensuite la partie lecture transformée pour utiliser le Read Model. Voici l’Entity Product avec l’enregistrement de l’évènement lors de la création du Product : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 namespace App\Domain\Entity; final class Product extends Aggregate { public function __construct( private ProductId $id, private ProductName $name, private ProductPrice $price, ) { } public function create( ProductId $id, ProductName $name, ProductPrice $price, ): self { $product = new self( $id, $name, $price, ); $this-&gt;record(new ProductCreated( $id-&gt;value(), $name-&gt;value(), $price-&gt;value(), )); return $product; } public function id(): ProductId { return $this-&gt;id; } public function name(): ProductName { return $this-&gt;name; } public function price(): ProductPrice { return $this-&gt;price; } } Voilà la Projection qui peut soit être appelée, soit être déjà présente dans un EventListener ou un MessageHandler. Pour le besoin d’un exemple court, j’ai mis le code directement dans l’EventListener. Je recommande de le sortir dans une classe dédiée. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 namespace App\Infrastructure\Projection; final readonly class CreateProductProjection { public function __construct( private ProductAdapterInterface $productAdapter, ) { } public function __invoke(ProductCreated $event): void { $product = new Product( $event-&gt;productId, $event-&gt;name, $event-&gt;price, ); $this-&gt;productAdapter-&gt;add($product); } } Voilà l’Adapter qui sera en charge de stocker les données dans le modèle de lecture : 1 2 3 4 5 6 namespace App\Infrastructure\Adapter; interface ProductAdapterInterface { public function add(Product $product): void; } L’implémentation dépendra de la solution que vous choisirez. Voici à quoi ressemble le modèle de lecture du Product : 1 2 3 4 5 6 7 8 9 10 namespace App\Infrastructure\ReadModel; final readonly class Product { public function __construct( public string $id, public string $name, public float $price, ) {} } Le modèle de lecture est désormais prêt, il faut maintenant l’interroger. Interrogation du modèle de lecture Pour cela, j’ai repris le schéma du Use Case que j’ai un peu modifié : L’Adapter de lecture ne se trouve donc maintenant plus dans le Domaine, mais dans la couche Infrastructure. 1 2 3 4 5 6 7 8 9 10 11 namespace App\Infrastructure\Adapter; interface ProductAdapterInterface { public function add(Product $product): void; /** * @return Product[] */ public function getProductsWithName(string $name, int $itemPerPage, int $page): array; } L’Adapter est donc en charge de lire le modèle de lecture, on y retrouve la méthode qui était dans le Repository de l’exemple précédent. J’ai modifié le paramètre name, pour que ce ne soit plus qu’une simple String. Puisqu’on est en dehors du Domaine, il n’est plus nécessaire que ce soit un Value Object. La Query ne change pas : 1 2 3 4 5 6 7 8 9 10 11 namespace App\Infrastructure\Query; final readonly class ListProductsWithNameQuery { public function __construct( public string $name, public int $itemPerPage, public int $page, ) { } } Dorénavant, le QueryHandler n’appellera plus le Repository du Domaine mais l’Adapter qui lit dans le Read Model : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 namespace App\Infrastructure\Query; final readonly class ListProductsWithNameQueryHandler { public function __construct( private ProductAdapterInterface $productAdapter ) {} /** * @return Product[] */ public function __invoke(ListProductsWithNameQuery $query): array { return $this-&gt;productAdapter-&gt;getProductsWithName( $query-&gt;name, $query-&gt;itemPerPage, $query-&gt;page ); } } Le Controller ne change pas non plus : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 namespace App\Infrastructure\Controller; final class ProductController extends AbstractController { public function __construct( private readonly QueryBus $queryBus, ) {} public function __invoke(Request $request): Response { $products = $this-&gt;queryBus-&gt;ask( new ListProductsWithNameQuery( $request-&gt;query-&gt;get('name'), (int) $request-&gt;query-&gt;get('itemPerPage'), (int) $request-&gt;query-&gt;get('page'), ) ); $paginatedProduct = new PaginatedProduct( products: $products, total: count($products), page: (int) $request-&gt;query-&gt;get('page'), ); return $this-&gt;json($paginatedProduct); } } J’ai tenté de répondre à la question : la pagination est-elle un besoin métier ou un besoin technique ? De ce qu’on a vu, la pagination fait partie des use cases métier mais ne relève pas de la responsabilité du Domaine. Il est donc nécessaire de l’intégrer en dissociant le modèle de lecture du modèle du Domaine. Une telle approche permet de garder l’intégrité du Domaine en le maintenant à l’écart des problématiques qui ne relèvent pas de son périmètre. Pour les intéressés, vous pouvez retrouver tout le code de cet article sur GitHub. Vous y trouverez le code sans le Read Model ainsi que la dernière version. Je vous donne rendez-vous dans quinze jours pour un prochain article du Journal de Bord du DDD.]]></summary></entry><entry xml:lang="fr"><title type="html">Journal de bord de l’apprentissage du Domain-Driven Design : Jour 1</title><link href="https://huguesgobet.com/ddd-logbook/2024-12-02" rel="alternate" type="text/html" title="Journal de bord de l’apprentissage du Domain-Driven Design : Jour 1" /><published>2024-12-02T15:00:00+00:00</published><updated>2024-12-02T15:00:00+00:00</updated><id>https://huguesgobet.com/fr/ddd-logbook/journal-de-bord-jour-un</id><content type="html" xml:base="https://huguesgobet.com/ddd-logbook/2024-12-02"><![CDATA[<p>Bienvenue dans ce journal de bord où je partage mon expérience du <strong>Domain-Driven Design (DDD)</strong>, une approche stratégique pour concevoir des logiciels complexes. Il place le <strong>domaine métier</strong> au cœur de la modélisation pour la rendre plus cohérente et compréhensible. À travers une série d’articles, nous explorerons ensemble les concepts fondamentaux, les bonnes pratiques et les pièges à éviter, le tout à travers mon expérience personnelle. Que vous soyez développeur, architecte logiciel ou professionnel, vous trouverez ici une présentation progressive du <strong>DDD</strong> et de ses fondamentaux.</p>

<h2 id="avant-de-plonger-dans-le-vif-du-sujet">Avant de plonger dans le vif du sujet</h2>

<p>Les termes en gras font partie du lexique DDD ou sont liés à des notions d’architecture système, vous pouvez retrouver leur définition dans un chapitre annexe.</p>

<p>Les références en italique mentionnent les auteurs de livre et leurs ouvrages.</p>

<p>Les mots en gras et en italique font référence aux noms des fonctions et aux termes de code spécifiques à mon projet.</p>

<p>Les mots soulignés en rouge sont issus de l’Ubiquitous Language.</p>

<h2 id="pourquoi-écrire-un-journal-de-bord">Pourquoi écrire un journal de bord ?</h2>

<p>L’idée de cette série d’articles est de documenter mon expérience du <strong>DDD</strong>, en partageant chaque étape de mon processus d’apprentissage et de création de projet. Grâce à vos retours et à vos discussions, je souhaite continuer à apprendre et à affiner ma compréhension de ce sujet fascinant.</p>

<p>Je partagerai donc mes erreurs, les corrections que j’ai apportées et les raisonnements derrière mes choix, dans le but que d’autres puissent apprendre de mes découvertes (et évitent ainsi de refaire les mêmes erreurs que moi !). Les encadrés « Vision du Futur » servent à expliquer les erreurs avant que je n’aborde le sujet dans le journal de bord.</p>

<h2 id="pourquoi-utiliser-le-ddd">Pourquoi utiliser le <strong>DDD</strong> ?</h2>

<p>C’est en commençant à m’intéresser à cette pratique que j’ai découvert son intérêt dans la gestion de projets.</p>

<h3 id="la-découverte">La découverte</h3>

<p>Tout a commencé lorsque j’ai dû m’intéresser au <strong>DDD</strong> pour l’une de mes missions freelance. J’ai donc acheté le livre d’<em>Éric Evans</em> (le créateur du <em>Domain Driven Design</em>) mais j’ai remisé le livre dans ma bibliothèque sans le lire, ayant été finalement engagé pour la mission sans qu’on ne m’en demande plus.</p>

<p>J’ai repris ce livre lors d’une période d’inter-contrat, intrigué par son contenu. En le lisant, j’ai trouvé le concept très compliqué, bien plus que ce que j’avais lu auparavant. Mais en m’y intéressant, j’ai découvert une façon fascinante de concevoir des logiciels. Plus j’avançais dans la lecture, plus j’avais envie d’essayer cette méthode. Cela donnait un sens nouveau à la création de logiciel. J’ai terminé le livre dans son intégralité en prenant des notes pour garder près de moi les aspects les plus importants.</p>

<p>Après un mois, j’avais presque autant de questions que de réponses. J’ai donc enrichi mon apprentissage avec d’autres lectures, notamment <em>Advanced Web Application Architecture</em> de <em>Matthias Noback</em>. Ce dernier livre m’a permis d’avoir une approche plus concrète du <strong>DDD</strong> même si ce n’est pas l’objet principal du livre. Je me suis alors senti prêt à développer mon premier projet en <strong>DDD</strong>.</p>

<p>Tout en avançant sur mon premier projet, j’ai lu <em>Implementing Domain Driven Design</em>, de <em>Vernon Vaughn</em>, qui a enrichi mon approche du <strong>DDD</strong>.</p>

<p><img src="/assets/images/2024-12-02/fr.png" alt="Livres" /></p>

<h2 id="ubiquitous-language">Ubiquitous Language</h2>

<p>Terme clé du <strong>DDD</strong>, l’<strong>Ubiquitous Language</strong> représente les termes liés au métier de votre domaine. Il est le cœur de votre système et doit être développé grâce à une collaboration entre les développeurs et les experts métiers.</p>

<p>Toutes les fonctionnalités découlent de l’<strong>Ubiquitous Language</strong> et le code doit en être le reflet.</p>

<h2 id="le-premier-projet-développé-en-domain-driven-design">Le premier projet développé en Domain-Driven Design</h2>

<p>Pour mettre en pratique le <strong>DDD</strong>, j’ai décidé de créer une API qui référence les <u>vins</u> que je bois, permettant de les enregistrer, de les visualiser (via une application mobile qui arrivera plus tard) et de créer des fiches de <u>dégustation</u>. Il ne restait plus qu’à trouver le nom, <strong><em>Des amis, du vin</em></strong>, m’est venu naturellement.</p>

<h3 id="domain-vision-statement">Domain Vision Statement</h3>

<p>Avant de commencer le projet, j’ai suivi la pratique recommandée par <em>Eric Evans</em> : écrire un <strong>Domain Vision Statement</strong>.</p>

<h4 id="quest-ce-que-cest">Qu’est-ce que c’est ?</h4>

<p>Un <strong>Domain Vision Statement</strong> peut être utilisé comme un guide qui maintient l’équipe de développement concentrée dans la même direction pour la distillation du modèle et du code.</p>

<p>Pour le mettre en place, il suffit d’écrire une courte description du <strong>Core Domain</strong> et la valeur qu’il apporte. Ignorez les aspects qui distinguent ce <strong>Domain</strong> d’un autre et montrez comment le modèle sert et équilibre les intérêts divers. Il est important d’écrire ce document le plus tôt possible et de le réviser à chaque nouveau retour.</p>

<h4 id="pour-mon-projet">Pour mon projet</h4>

<p>Voici donc la version initiale, elle concerne uniquement les fonctionnalités principales :</p>

<p>Une <u>bouteille</u> est constituée d’un <u>nom</u>, d’un <u>nom de domaine</u>, d’un <u>type</u> (<u>blanc</u>, <u>rouge</u>, <u>rosé</u>, <u>champagne</u>, <u>pétillant rouge</u>, <u>pétillant blanc</u>), d’une <u>année</u>, d’un <u>cépage</u>, d’un <u>pays</u>, d’un <u>prix</u>, d’une <u>note</u>, d’une <u>remarque</u>, d’une <u>photo</u> et de la <u>date d'ajout</u>.</p>

<p>Les fonctionnalités à inclure sont la <u>création</u>, la <u>modification</u> et la <u>suppression</u> d’une <u>bouteille</u> avec toutes les informations, et la <u>recherche</u> par divers critères (<u>nom du vin</u>, <u>nom du domaine</u>, <u>type</u>, <u>date d'ajout</u>/<u>de dégustation</u>, <u>année du vin</u>, <u>note</u>).</p>

<h3 id="vision-du-futur">Vision du Futur</h3>

<p>Je n’avais à ce moment-là pas la notion du <strong>Core Domain</strong>, j’ai donc écrit uniquement les fonctionnalités principales. Mais je partage néanmoins les définitions du <strong>Core Domain</strong> et des différents <strong>Subdomain</strong>, avant de les détailler de façon plus précise dans un prochain article.</p>

<h2 id="core-domain-et-subdomain">Core Domain et Subdomain</h2>

<p>Le <strong>Core Domain</strong> est là où il faut mettre le plus de valeur. Il est nécessaire de trouver le domaine central et de fournir un moyen de le distinguer facilement de la masse du support du milieu et du code. Le <strong>Core Domain</strong> doit amener la plus grande valeur ainsi que des concepts. Il peut être composé de plusieurs <strong>Bounded Context</strong>.</p>

<p>Un <strong>Subdomain</strong> représente une petite partie du domaine qui peut être découpée en modules pour séparer le domaine. Il y a plusieurs types de sous-domaines :</p>

<ul>
  <li><strong>Supporting Subdomains</strong> : un ou plusieurs domaines importants pour le métier, mais moins que le core. On crée un domaine de support parce qu’il a quelque chose de spécial.</li>
  <li><strong>Generic Subdomains</strong> : s’il n’y a pas de spécificité métier alors on parle de domaine générique.</li>
</ul>

<h3 id="vision-du-futur-1">Vision du Futur</h3>

<p>Dans mon cas, le <strong>Core Domain</strong> est de faire un inventaire de <u>bouteilles de vins</u>.</p>

<p>Tout cela représente déjà beaucoup d’informations à retenir. Si vous deviez ne retenir qu’une seule chose, souvenez-vous de l’<strong>Ubiquitous Language</strong> : c’est la notion centrale du <strong>DDD</strong>. Il est le lien entre le métier et l’équipe technique. Il est primordial qu’il transparaisse dans le code.</p>

<p>N’hésitez pas à commenter cet article. Connaissiez-vous le <strong>DDD</strong> ? Quels livres et ressources vous ont aidé à vous lancer ?</p>

<p>À très bientôt pour un nouvel épisode de ce journal de bord.</p>]]></content><author><name>Hugues Gobet</name><email>hugues.gobet@gmail.com</email></author><category term="ddd-logbook" /><summary type="html"><![CDATA[Bienvenue dans ce journal de bord où je partage mon expérience du Domain-Driven Design (DDD), une approche stratégique pour concevoir des logiciels complexes. Il place le domaine métier au cœur de la modélisation pour la rendre plus cohérente et compréhensible. À travers une série d’articles, nous explorerons ensemble les concepts fondamentaux, les bonnes pratiques et les pièges à éviter, le tout à travers mon expérience personnelle. Que vous soyez développeur, architecte logiciel ou professionnel, vous trouverez ici une présentation progressive du DDD et de ses fondamentaux. Avant de plonger dans le vif du sujet Les termes en gras font partie du lexique DDD ou sont liés à des notions d’architecture système, vous pouvez retrouver leur définition dans un chapitre annexe. Les références en italique mentionnent les auteurs de livre et leurs ouvrages. Les mots en gras et en italique font référence aux noms des fonctions et aux termes de code spécifiques à mon projet. Les mots soulignés en rouge sont issus de l’Ubiquitous Language. Pourquoi écrire un journal de bord ? L’idée de cette série d’articles est de documenter mon expérience du DDD, en partageant chaque étape de mon processus d’apprentissage et de création de projet. Grâce à vos retours et à vos discussions, je souhaite continuer à apprendre et à affiner ma compréhension de ce sujet fascinant. Je partagerai donc mes erreurs, les corrections que j’ai apportées et les raisonnements derrière mes choix, dans le but que d’autres puissent apprendre de mes découvertes (et évitent ainsi de refaire les mêmes erreurs que moi !). Les encadrés « Vision du Futur » servent à expliquer les erreurs avant que je n’aborde le sujet dans le journal de bord. Pourquoi utiliser le DDD ? C’est en commençant à m’intéresser à cette pratique que j’ai découvert son intérêt dans la gestion de projets. La découverte Tout a commencé lorsque j’ai dû m’intéresser au DDD pour l’une de mes missions freelance. J’ai donc acheté le livre d’Éric Evans (le créateur du Domain Driven Design) mais j’ai remisé le livre dans ma bibliothèque sans le lire, ayant été finalement engagé pour la mission sans qu’on ne m’en demande plus. J’ai repris ce livre lors d’une période d’inter-contrat, intrigué par son contenu. En le lisant, j’ai trouvé le concept très compliqué, bien plus que ce que j’avais lu auparavant. Mais en m’y intéressant, j’ai découvert une façon fascinante de concevoir des logiciels. Plus j’avançais dans la lecture, plus j’avais envie d’essayer cette méthode. Cela donnait un sens nouveau à la création de logiciel. J’ai terminé le livre dans son intégralité en prenant des notes pour garder près de moi les aspects les plus importants. Après un mois, j’avais presque autant de questions que de réponses. J’ai donc enrichi mon apprentissage avec d’autres lectures, notamment Advanced Web Application Architecture de Matthias Noback. Ce dernier livre m’a permis d’avoir une approche plus concrète du DDD même si ce n’est pas l’objet principal du livre. Je me suis alors senti prêt à développer mon premier projet en DDD. Tout en avançant sur mon premier projet, j’ai lu Implementing Domain Driven Design, de Vernon Vaughn, qui a enrichi mon approche du DDD. Ubiquitous Language Terme clé du DDD, l’Ubiquitous Language représente les termes liés au métier de votre domaine. Il est le cœur de votre système et doit être développé grâce à une collaboration entre les développeurs et les experts métiers. Toutes les fonctionnalités découlent de l’Ubiquitous Language et le code doit en être le reflet. Le premier projet développé en Domain-Driven Design Pour mettre en pratique le DDD, j’ai décidé de créer une API qui référence les vins que je bois, permettant de les enregistrer, de les visualiser (via une application mobile qui arrivera plus tard) et de créer des fiches de dégustation. Il ne restait plus qu’à trouver le nom, Des amis, du vin, m’est venu naturellement. Domain Vision Statement Avant de commencer le projet, j’ai suivi la pratique recommandée par Eric Evans : écrire un Domain Vision Statement. Qu’est-ce que c’est ? Un Domain Vision Statement peut être utilisé comme un guide qui maintient l’équipe de développement concentrée dans la même direction pour la distillation du modèle et du code. Pour le mettre en place, il suffit d’écrire une courte description du Core Domain et la valeur qu’il apporte. Ignorez les aspects qui distinguent ce Domain d’un autre et montrez comment le modèle sert et équilibre les intérêts divers. Il est important d’écrire ce document le plus tôt possible et de le réviser à chaque nouveau retour. Pour mon projet Voici donc la version initiale, elle concerne uniquement les fonctionnalités principales : Une bouteille est constituée d’un nom, d’un nom de domaine, d’un type (blanc, rouge, rosé, champagne, pétillant rouge, pétillant blanc), d’une année, d’un cépage, d’un pays, d’un prix, d’une note, d’une remarque, d’une photo et de la date d'ajout. Les fonctionnalités à inclure sont la création, la modification et la suppression d’une bouteille avec toutes les informations, et la recherche par divers critères (nom du vin, nom du domaine, type, date d'ajout/de dégustation, année du vin, note). Vision du Futur Je n’avais à ce moment-là pas la notion du Core Domain, j’ai donc écrit uniquement les fonctionnalités principales. Mais je partage néanmoins les définitions du Core Domain et des différents Subdomain, avant de les détailler de façon plus précise dans un prochain article. Core Domain et Subdomain Le Core Domain est là où il faut mettre le plus de valeur. Il est nécessaire de trouver le domaine central et de fournir un moyen de le distinguer facilement de la masse du support du milieu et du code. Le Core Domain doit amener la plus grande valeur ainsi que des concepts. Il peut être composé de plusieurs Bounded Context. Un Subdomain représente une petite partie du domaine qui peut être découpée en modules pour séparer le domaine. Il y a plusieurs types de sous-domaines : Supporting Subdomains : un ou plusieurs domaines importants pour le métier, mais moins que le core. On crée un domaine de support parce qu’il a quelque chose de spécial. Generic Subdomains : s’il n’y a pas de spécificité métier alors on parle de domaine générique. Vision du Futur Dans mon cas, le Core Domain est de faire un inventaire de bouteilles de vins. Tout cela représente déjà beaucoup d’informations à retenir. Si vous deviez ne retenir qu’une seule chose, souvenez-vous de l’Ubiquitous Language : c’est la notion centrale du DDD. Il est le lien entre le métier et l’équipe technique. Il est primordial qu’il transparaisse dans le code. N’hésitez pas à commenter cet article. Connaissiez-vous le DDD ? Quels livres et ressources vous ont aidé à vous lancer ? À très bientôt pour un nouvel épisode de ce journal de bord.]]></summary></entry></feed>