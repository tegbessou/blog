<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://huguesgobet.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://huguesgobet.com/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-02-17T09:32:26+00:00</updated><id>https://huguesgobet.com/feed.xml</id><title type="html">Blog - Hugues Gobet</title><subtitle>Your Site Description
</subtitle><author><name>Hugues Gobet</name><email>hugues.gobet@gmail.com</email></author><entry xml:lang="en"><title type="html">Logbook of Learning Domain-Driven Design: Day 5</title><link href="https://huguesgobet.com/ddd-logbook/2025-02-17" rel="alternate" type="text/html" title="Logbook of Learning Domain-Driven Design: Day 5" /><published>2025-02-17T08:00:00+00:00</published><updated>2025-02-17T08:00:00+00:00</updated><id>https://huguesgobet.com/ddd-logbook/logbook-day-five</id><content type="html" xml:base="https://huguesgobet.com/ddd-logbook/2025-02-17"><![CDATA[<p>In this article, I will discuss the concept of <strong>Country</strong> within the framework of a <strong>Supporting Domain</strong>, using a <strong>Domain Country</strong> as an example. I will also detail the exposure of an API that allows retrieving information about a <strong>Country</strong> and verifying its existence. I will begin by revisiting the definition of a <strong>Supporting Subdomain</strong>, then explain how to implement it step by step.</p>

<h2 id="supporting-subdomain-what-is-it">Supporting Subdomain: What Is It?</h2>

<p>As the name suggests, a <strong>Supporting Subdomain</strong> is, first and foremost, a <strong>Subdomain</strong>: it represents a part of the <strong>Domain</strong> that can be separated into a <strong>module</strong>. In a business project, a dedicated team could be responsible for it. A <strong>Subdomain</strong> can also have its own <strong>Ubiquitous Language</strong> when it belongs to a <strong>Bounded Context</strong> different from the <strong>Core Domain</strong>.</p>

<p>Although important to the business, the <strong>Supporting Subdomain</strong> is less critical than the <strong>Core Domain</strong>. Creating a <strong>Supporting Domain</strong> is only relevant if it provides specific value or addresses a particular need.</p>

<p>In the case of our wine bottle management API, I created a <strong>Domain Country</strong> to separate this concept from the <strong>Core Domain</strong>, which manages the <strong>Bottle Inventory</strong>. This separation helps organize the code into two distinct <strong>Bounded Contexts</strong>. Additionally, this <strong>Domain</strong> is essential for providing a list of countries when creating a bottle while ensuring that the country actually exists. However, since it remains less crucial than the <strong>Core Domain</strong>, it fits perfectly within the definition of a <strong>Supporting Subdomain</strong>.</p>

<h2 id="how-to-implement-the-domain">How to Implement the Domain?</h2>

<p>In this article, I will illustrate the implementation of the <strong>Domain</strong> through two use cases. I have chosen not to separate these cases into multiple sections because they are quite repetitive and do not pose a significant challenge in terms of <strong>Domain-Driven Design (DDD)</strong>. Here are the two scenarios I will cover:</p>
<ul>
  <li>Creating a <strong>Country</strong></li>
  <li>Retrieving the list of all <strong>Countries</strong></li>
</ul>

<p>I propose tackling this topic using a different approach than the one taken for the authentication use case. Therefore, I will start by defining the <strong>Entity</strong>, along with unit tests, to integrate a <strong>Test-Driven Development (TDD)</strong> approach.</p>

<h2 id="quick-introduction-to-tdd">Quick Introduction to TDD</h2>

<p><strong>Test-Driven Development (TDD)</strong> is a very interesting development methodology that would deserve a dedicated article (maybe an idea for a future special edition). If you’re looking for more in-depth information, I highly recommend the book <em>Test-Driven Development: By Example</em> by Kent Beck.</p>

<p>The fundamental idea behind this methodology is to write tests before writing the corresponding functionality. However, the essence of this approach lies in a step-by-step, progressive, and rigorous process.</p>

<p>To illustrate this method, I will walk you through the tests related to the creation of a <strong>Country Entity</strong>.</p>

<h3 id="step-1-testing-the-creation-of-a-country-entity">Step 1: Testing the Creation of a Country Entity</h3>

<p>We will begin with a simple test to validate the correct creation of a <strong>Country Entity</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">function</span> <span class="n">testCreateSuccess</span><span class="p">():</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="nv">$country</span> <span class="o">=</span> <span class="nc">Country</span><span class="o">::</span><span class="nf">create</span><span class="p">(</span>
        <span class="nc">CountryId</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="s1">'af785dbb-4ac1-4786-a5aa-1fed08f6ec26'</span><span class="p">),</span>
        <span class="nc">CountryName</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="s1">'France'</span><span class="p">),</span>
    <span class="p">);</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertInstanceOf</span><span class="p">(</span>
        <span class="nc">Country</span><span class="o">::</span><span class="n">class</span><span class="p">,</span>
        <span class="nv">$country</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertEquals</span><span class="p">(</span>
        <span class="s1">'af785dbb-4ac1-4786-a5aa-1fed08f6ec26'</span><span class="p">,</span>
        <span class="nv">$country</span><span class="o">-&gt;</span><span class="nf">id</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
    <span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertEquals</span><span class="p">(</span>
        <span class="s1">'France'</span><span class="p">,</span>
        <span class="nv">$country</span><span class="o">-&gt;</span><span class="nf">name</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
    <span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This test precisely defines the expected output of the <strong>Factory</strong> <strong><em>create</em></strong> method. In a <strong>TDD</strong> approach, the goal is to obtain a green test (i.e., a successful test) as quickly as possible.</p>

<p>Upon the first execution of the test, an error occurs immediately: the class does not exist.</p>

<p><img src="/assets/images/2025-02-17/first-step-test.png" alt="First error Unit Test" /></p>

<p>This situation is completely normal and is an integral part of the <strong>TDD</strong> process. Each correction step aims to fix the current error in order to gradually build an implementation validated by tests.</p>

<p>To quickly obtain a green test, I started by creating the Country Entity, which changed the error message.</p>

<p><img src="/assets/images/2025-02-17/first-bis-step-test.png" alt="First bis error Unit Test" /></p>

<p>I then created a <strong><em>create</em></strong> method in the <strong>Country Entity</strong>. At first, this method does nothing, but it helps progress toward a successful test.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Entity</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">Country</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">():</span> <span class="kt">self</span>
    <span class="p">{</span>

    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The new error message indicates that the <strong>Value Object CountryId</strong> does not exist.</p>

<p><img src="/assets/images/2025-02-17/second-step-test.png" alt="Second error Unit Test" /></p>

<p>To resolve this issue, I created the <strong>CountryId Value Object</strong>, keeping it as simple as possible.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\ValueObject</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CountryId</span>
<span class="p">{</span>
    
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The next message states that it cannot find the <strong><em>fromString</em></strong> method. So, I added it.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\ValueObject</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CountryId</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">fromString</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$value</span><span class="p">):</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>At this point, we get another message indicating that the <strong>Value Object CountryName</strong> does not exist.</p>

<p><img src="/assets/images/2025-02-17/third-step-test.png" alt="Third error Unit Test" /></p>

<p>I then created the class, and just like with <strong>CountryId</strong>, I anticipated the need by adding a <strong><em>fromString</em></strong> method.</p>

<h3 id="future-considerations">Future Considerations</h3>

<p>The idea is to only anticipate small portions of code, step by step, to stay focused on the main goal: making the test pass (turn green) as quickly as possible.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\ValueObject</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CountryName</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">fromString</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$value</span><span class="p">):</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The test error message has now evolved and indicates that the <strong>Factory</strong> method of the <strong>Country Entity</strong> does not return an <strong>Entity</strong>. To fix this issue, we adopt the simplest possible approach.</p>

<p><img src="/assets/images/2025-02-17/fifth-step-test.png" alt="Fifth error Unit Test" /></p>

<p>To correct this, I ensure that the <strong><em>create</em></strong> method returns a <strong>Country Entity</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Entity</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">Country</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">():</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Now, the method does return an <strong>Entity</strong>, but the tests report a new error: the absence of a method to expose the <strong>identifier</strong>. The same issue will also arise for the <strong>name</strong> attribute.</p>

<p><img src="/assets/images/2025-02-17/sixth-step-test.png" alt="Sixth error Unit Test" /></p>

<p>I now need to create these methods. Before implementing them, it is crucial to determine what they should return. To keep it simple, they will return exactly what the test expects them to return.</p>

<p>At this point:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Entity</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Country\Domain\ValueObject\CountryId</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Country\Domain\ValueObject\CountryName</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">Country</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">():</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">CountryId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nc">CountryId</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="s1">'af785dbb-4ac1-4786-a5aa-1fed08f6ec26'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">name</span><span class="p">():</span> <span class="kt">CountryName</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nc">CountryName</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span>
            <span class="s1">'France'</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The test should now pass. However, in the <strong>Value Objects</strong>, the <strong><em>value</em></strong> method is missing, which is needed to retrieve their value. I will now add it.</p>

<p>Another issue lies in assigning the value passed into the <strong><em>fromString</em></strong> method. I will resolve both problems in a single operation.</p>

<p>Current State of the <strong>Value Objects</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\ValueObject</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CountryId</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">string</span> <span class="nv">$value</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">fromString</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$value</span><span class="p">):</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">value</span><span class="p">():</span> <span class="kt">string</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\ValueObject</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CountryName</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">string</span> <span class="nv">$value</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">fromString</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$value</span><span class="p">):</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">value</span><span class="p">():</span> <span class="kt">string</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>At this stage, here’s what the <strong>Value Objects</strong> look like. The goal of making the tests pass (turn green) has been achieved, which is perfect.</p>

<p><img src="/assets/images/2025-02-17/seventh-step-test.png" alt="Seventh error Unit Test" /></p>

<p>All of this is great, but we took a shortcut by hardcoding the values inside the <strong>Entity</strong>. We achieved the test’s goal quickly, in the most naive way possible. Now, we need to move on to the second step: refactoring the code to improve it and make it fully functional.</p>

<h3 id="step-two-making-the-code-functional">Step Two: Making the Code Functional</h3>

<p>To achieve this, the <strong>Country Entity</strong> must have two distinct properties: one for the <strong>ID</strong> and one for the <strong>name</strong>. Additionally, the <strong><em>id</em></strong> and <strong><em>name</em></strong> methods should return the values of these properties. The refactoring must be done in small steps, ensuring that we only work on what is covered by the test. Since the test in this example focuses on the <strong><em>create</em></strong> method, I will limit my refactoring to code related to this method, without modifying other <strong>Entities</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Entity</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Country\Domain\ValueObject\CountryId</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Country\Domain\ValueObject\CountryName</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">Country</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">CountryId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">():</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">CountryId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">name</span><span class="p">():</span> <span class="kt">CountryName</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This is what the <strong>Entity</strong> looks like now. Let’s rerun the tests to see if they still pass.</p>

<p><img src="/assets/images/2025-02-17/eighth-step-test.png" alt="Eighth error Unit Test" /></p>

<p>And then… disaster strikes! The test fails. We’re back to square one: getting the test to pass again as quickly as possible.
According to the error message, the <strong>Country Entity</strong> constructor must take two parameters. However, looking at the <strong>Entity</strong>’s code, we notice that no arguments are passed to the constructor inside the <strong><em>create</em></strong> method. Therefore, this method must accept these two parameters so they can be passed to the <strong>Entity</strong>’s constructor.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Entity</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Country\Domain\ValueObject\CountryId</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Country\Domain\ValueObject\CountryName</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">Country</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">CountryId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">(</span>
        <span class="kt">CountryId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span>
            <span class="nv">$id</span><span class="p">,</span>
            <span class="nv">$name</span><span class="p">,</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">CountryId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">name</span><span class="p">():</span> <span class="kt">CountryName</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>After rerunning the test, it finally passes (turns green).</p>

<p><img src="/assets/images/2025-02-17/nineth-step-test.png" alt="Nineth error Unit Test" /></p>

<p>We have now created the <strong>Country Entity</strong>’s method following <strong>TDD</strong> best practices.</p>

<h3 id="key-takeaways">Key Takeaways</h3>

<p>By following <strong>TDD</strong>, we ensure that the test perfectly reflects the business requirement and that it is correctly validated. I highly recommend adopting this approach as much as possible, as it simplifies the design of business use cases and ensures that your business logic has near 100% code coverage.</p>

<h2 id="adding-value-to-value-object">Adding Value to Value Object</h2>

<p>To increase the value of <strong>Value Objects</strong>, it is essential to add validation rules for their content. For example, we can verify that the <strong>CountryId Value Object</strong> is a valid <strong><em>UUID</em></strong>. To do this, we can either use an existing library or write our own validation logic. Of course, we start by writing a test, then implement the validation inside the corresponding <strong>Entity</strong>.</p>

<p>Here is what the test looks like:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">function</span> <span class="n">testCreateBadIdNotUuid</span><span class="p">():</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">expectException</span><span class="p">(</span><span class="nc">\InvalidArgumentException</span><span class="o">::</span><span class="n">class</span><span class="p">);</span>

    <span class="nc">Country</span><span class="o">::</span><span class="nf">create</span><span class="p">(</span>
        <span class="nc">CountryId</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="s1">'12'</span><span class="p">),</span>
        <span class="nc">CountryName</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="s1">'France'</span><span class="p">),</span>
    <span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>As expected, it fails.</p>

<p><img src="/assets/images/2025-02-17/ten-step-test.png" alt="Ten error Unit Test" /></p>

<p>To make the test pass quickly, we need to add a verification in the <strong>Value Object</strong> to ensure that the provided value is a valid <strong><em>UUID</em></strong>.
For this, I use the PHP library: https://github.com/webmozarts/assert. First, I install it following the official documentation. Then, I simply add the appropriate validation to throw the expected exception.
Here is the updated <strong>Value Object</strong> code:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\ValueObject</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Webmozart\Assert\Assert</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CountryId</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="kt">string</span> <span class="nv">$value</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$value</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nc">Assert</span><span class="o">::</span><span class="nf">uuid</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">value</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">fromString</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$value</span><span class="p">):</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">value</span><span class="p">():</span> <span class="kt">string</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Now, let’s run the test:</p>

<p><img src="/assets/images/2025-02-17/eleven-step-test.png" alt="Eleven error Unit Test" /></p>

<p>Perfect! 
This <strong>Domain</strong>, being very simple and with few rules, is now complete. In the future, we will explore more complex <strong>Domains</strong>.</p>

<h2 id="implementing-use-cases">Implementing Use Cases</h2>

<p>Now, we will proceed to develop the use cases within the Domain we just created.</p>

<h3 id="creating-a-country">Creating a Country</h3>

<p>We start by importing products from a file retrieved online.</p>

<p><img src="/assets/images/2025-02-17/import-country-usecase.png" alt="Import countries use case" /></p>

<p>The first step is to write the test for the <strong>Primary Adapter</strong>, which is the <strong><em>Symfony Command ImportCountryCommand</em></strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">function</span> <span class="n">testExecute</span><span class="p">():</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="k">self</span><span class="o">::</span><span class="nf">bootkernel</span><span class="p">();</span>
    <span class="nv">$application</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Application</span><span class="p">(</span><span class="k">self</span><span class="o">::</span><span class="nv">$kernel</span><span class="p">);</span>
    <span class="nv">$command</span> <span class="o">=</span> <span class="nv">$application</span><span class="o">-&gt;</span><span class="nf">find</span><span class="p">(</span><span class="s1">'country:import'</span><span class="p">);</span>
    <span class="nv">$commandTester</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CommandTester</span><span class="p">(</span><span class="nc">Scommand</span><span class="p">);</span>
    <span class="nv">$commandTester</span><span class="o">-&gt;</span><span class="nf">execute</span><span class="p">([]);</span>
    <span class="nv">$commandTester</span><span class="o">-&gt;</span><span class="nf">assertCommandIsSuccessful</span><span class="p">();</span>
    <span class="nv">$output</span> <span class="o">=</span> <span class="nv">$commandTester</span><span class="o">-&gt;</span><span class="nf">getDisplay</span><span class="p">();</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertStringContainsString</span><span class="p">(</span><span class="s1">'[OK] Countries created: 241'</span><span class="p">,</span> <span class="nv">$output</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The code in question is related to <strong><em>Symfony</em></strong>, so I won’t dwell on it too much. The key point here is understanding the assertion that validates the test: at the end of the command, the message “[OK] Countries created: 241” must be displayed, showing the number of countries created.</p>

<p>Once this verification is complete, we can move on to the code. The <strong><em>Symfony Command</em></strong> itself is not particularly interesting, as it mainly handles file reading, which falls under the <strong>Infrastructure</strong> layer , not the <strong>Domain</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="k">private</span> <span class="k">function</span> <span class="n">handleFile</span><span class="p">():</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="nv">$countryCreated</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$handle</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getFilePath</span><span class="p">(),</span> <span class="s1">'r'</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$handle</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nc">\RuntimeException</span><span class="p">(</span><span class="s1">'Unable to open file'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">while</span> <span class="p">((</span><span class="nv">$data</span> <span class="o">=</span> <span class="nb">fgetcsv</span><span class="p">(</span><span class="nv">$handle</span><span class="p">,</span> <span class="mi">1000</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">commandBus</span><span class="o">-&gt;</span><span class="nf">dispatch</span><span class="p">(</span><span class="k">new</span> <span class="nc">CreateCountryCommand</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="mi">4</span><span class="p">]));</span>
        <span class="o">++</span><span class="nv">$countryCreated</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$handle</span><span class="p">);</span>

    <span class="k">return</span> <span class="nv">$countryCreated</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="future-considerations-1">Future Considerations</h3>

<p>Here, we could also format a table containing all the country names and dispatch a <strong>Command</strong> to import them all at once. This approach would better align with <strong>CQRS</strong>, where any change to the system should be encapsulated in a single <strong>Command</strong>. I believe this modification should be made.</p>

<p>Here is an excerpt from the <strong><em>Symfony Command</em></strong>, showing the section responsible for reading the file and dispatching the <strong>Command</strong>. I will go over this part quickly, as it is not crucial here. What matters is that the file is read, and a <strong>Command</strong> is dispatched with the country name contained in it. For this <strong>Domain</strong>, I only need the name—no other information. However, depending on the needs of the <strong>Domain Country</strong> or the <strong>Core Domain</strong>, additional details could be processed.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Application\Command</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Application\Command\CommandInterface</span><span class="p">;</span>

<span class="cd">/**
 * @implements CommandInterface&lt;void&gt;
 */</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CreateCountryCommand</span> <span class="kd">implements</span> <span class="nc">CommandInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The Command is very simple and only takes a <strong>name</strong> as input.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Application\Command</span><span class="p">;</span>

<span class="na">#[AsCommandHandler]</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CreateCountryCommandHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">CountryRepositoryInterface</span> <span class="nv">$countryRepository</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">DomainEventDispatcherInterface</span> <span class="nv">$dispatcher</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">IdFactory</span> <span class="nv">$idFactory</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @throws CountryAlreadyExistsException
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">CreateCountryCommand</span> <span class="nv">$command</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">countryRepository</span><span class="o">-&gt;</span><span class="nf">ofName</span><span class="p">(</span><span class="nc">CountryName</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="nv">$command</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">))</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nc">CountryAlreadyExistsException</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="nv">$country</span> <span class="o">=</span> <span class="nc">Country</span><span class="o">::</span><span class="nf">create</span><span class="p">(</span>
            <span class="nc">CountryId</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">idFactory</span><span class="o">-&gt;</span><span class="nf">create</span><span class="p">()),</span>
            <span class="nc">CountryName</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="nv">$command</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">),</span>
        <span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">countryRepository</span><span class="o">-&gt;</span><span class="nf">add</span><span class="p">(</span><span class="nv">$country</span><span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">dispatcher</span><span class="o">-&gt;</span><span class="nf">dispatch</span><span class="p">(</span><span class="nv">$country</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The <strong>CommandHandler</strong> is part of the <strong>Application</strong> layer. It serves as a bridge between the <strong>Infrastructure</strong> layer and the <strong>Domain</strong>. The <strong>CommandHandler</strong> first checks if the <strong>Country</strong> already exists using the <strong>Repository</strong>. If the <strong>Country</strong> is already present, an exception is thrown. Since each <strong>Country</strong> <strong>name</strong> is unique, we can safely search by <strong>name</strong> to ensure uniqueness. The <strong>Factory</strong> method of our <strong>Country Entity</strong> allows us to create the <strong>Country</strong>. Once created, it is stored in the system using the <strong>Repository</strong>. Finally, we dispatch the <strong>Domain Events</strong> related to the creation of the <strong>Country</strong>.</p>

<p>The <strong>Repository</strong> is a <strong>Domain</strong>-level concept, so we create an <strong><em>Interface</em></strong> to apply <strong>Dependency Inversion</strong>: We declare an <strong><em>Interface</em></strong> for a <strong>Repository</strong> (e.g., with an add method) inside the <strong>Domain</strong>. We then implement the add method in the <strong>Infrastructure</strong>  layer, which saves the new <strong>Entity</strong> in the database.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Repository</span><span class="p">;</span>

<span class="cd">/**
 * @extends RepositoryInterface&lt;Country&gt;
 */</span>
<span class="kd">interface</span> <span class="nc">CountryRepositoryInterface</span> <span class="kd">extends</span> <span class="nc">RepositoryInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">ofName</span><span class="p">(</span><span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">):</span> <span class="kt">?Country</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">add</span><span class="p">(</span><span class="kt">Country</span> <span class="nv">$country</span><span class="p">):</span> <span class="kt">void</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>In the <strong>Repository</strong>, we define two essential methods to interact with the <strong>Domain</strong>:
– <strong><em>ofName</em></strong>: Retrieves a <strong>Country</strong> by its name or returns null if the <strong>Country</strong> does not exist.
– <strong><em>add</em></strong>: Saves the <strong>Country</strong> in the system.</p>

<p>The implementation of the <strong>Repository</strong> is not particularly complex since it is <strong><em>Symfony-related</em></strong>, but I am including it here to complete the implementation.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Infrastructure\Doctrine\Repository</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">CountryDoctrineRepository</span> <span class="kd">implements</span> <span class="nc">CountryRepositoryInterface</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">const</span> <span class="no">string</span> <span class="no">ENTITY_CLASS</span> <span class="o">=</span> <span class="nc">CountryDoctrine</span><span class="o">::</span><span class="n">class</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">const</span> <span class="no">string</span> <span class="no">ALIAS</span> <span class="o">=</span> <span class="s1">'country'</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">EntityManagerInterface</span> <span class="nv">$entityManager</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">parent</span><span class="o">::</span><span class="nf">__construct</span><span class="p">(</span><span class="nv">$entityManager</span><span class="p">,</span> <span class="k">self</span><span class="o">::</span><span class="no">ENTITY_CLASS</span><span class="p">,</span> <span class="k">self</span><span class="o">::</span><span class="no">ALIAS</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">ofName</span><span class="p">(</span>
        <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">?Country</span> <span class="p">{</span>
        <span class="nv">$country</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">entityManager</span>
            <span class="o">-&gt;</span><span class="nf">getRepository</span><span class="p">(</span><span class="k">self</span><span class="o">::</span><span class="no">ENTITY_CLASS</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="nf">findOneBy</span><span class="p">([</span><span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="nv">$name</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">()])</span>
        <span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$country</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nc">CountryMapper</span><span class="o">::</span><span class="nf">toDomain</span><span class="p">(</span><span class="nv">$country</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">add</span><span class="p">(</span><span class="kt">Country</span> <span class="nv">$country</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$countryDoctrine</span> <span class="o">=</span> <span class="nc">CountryMapper</span><span class="o">::</span><span class="nf">toInfrastructurePersist</span><span class="p">(</span><span class="nv">$country</span><span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">entityManager</span><span class="o">-&gt;</span><span class="nf">persist</span><span class="p">(</span><span class="nv">$countryDoctrine</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">entityManager</span><span class="o">-&gt;</span><span class="nb">flush</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>I won’t go into the details of the implementation, but we can clearly see the two methods declared in the <strong>Repository</strong> <strong><em>Interface</em></strong>.</p>

<p>This concludes the implementation of the use case for creating a <strong>Country</strong>. Now, I will add a small feature to the <strong>Domain</strong>: registering a <strong>Domain Event</strong> when a <strong>Country Entity</strong> is created.</p>

<h2 id="registering-a-domain-event-for-the-creation-of-a-country-entity">Registering a Domain Event for the Creation of a Country Entity</h2>
<p>To achieve this, I created an <strong><em>Interface</em></strong> that <strong>Entities</strong> must implement to record their business events. Then, I use an <strong><em>Event Dispatcher</em></strong> to dispatch all the events of an <strong>Entity</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Shared\Domain\Entity</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Shared\Domain\Event\DomainEventInterface</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">EntityWithDomainEventInterface</span>
<span class="p">{</span>
    <span class="cd">/**
     * @return DomainEventInterface[]
     */</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">getRecordedEvent</span><span class="p">():</span> <span class="kt">array</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">recordEvent</span><span class="p">(</span><span class="kt">DomainEventInterface</span> <span class="nv">$event</span><span class="p">):</span> <span class="kt">void</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">eraseRecordedEvents</span><span class="p">():</span> <span class="kt">void</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This <strong><em>Interface</em></strong> defines three methods:</p>
<ol>
  <li><strong><em>getRecordedEvent</em></strong>: Retrieves all <strong>Domain Events</strong> recorded for an <strong>Entity</strong>.</li>
  <li><strong><em>recordEvent</em></strong>: Records a <strong>Domain Event</strong> after an action in the <strong>Domain</strong>.</li>
  <li><strong><em>eraseRecordedEvents</em></strong>: Deletes recorded <strong>Domain Events</strong> after they are dispatched, ensuring they are not processed twice.</li>
</ol>

<p>To create the methods linked to this <strong><em>Interface</em></strong>, <strong>Domain Events</strong> themselves must also implement an <strong><em>Interface</em></strong>. This <strong><em>Interface</em></strong> will be used to type the <strong>Domain Events</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Shared\Domain\Event</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">DomainEventInterface</span>
<span class="p">{</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Next, we must ensure that the <strong>Country Entity</strong> implements these methods. To do so, I chose to create a <strong><em>PHP Trait</em></strong>, allowing us to add these methods to the <strong>Entity</strong> without using inheritance.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Shared\Domain\Entity</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Shared\Domain\Event\DomainEventInterface</span><span class="p">;</span>

<span class="kd">trait</span> <span class="nc">EntityDomainEventTrait</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="kt">array</span> <span class="nv">$recordedEvents</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">getRecordedEvent</span><span class="p">():</span> <span class="kt">array</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">self</span><span class="o">::</span><span class="nv">$recordedEvents</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">recordEvent</span><span class="p">(</span><span class="kt">DomainEventInterface</span> <span class="nv">$event</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="k">self</span><span class="o">::</span><span class="nv">$recordedEvents</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$event</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">eraseRecordedEvents</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="k">self</span><span class="o">::</span><span class="nv">$recordedEvents</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>For the <strong>Country Entity</strong> to use these methods, it must: Implement the <strong><em>interface</em></strong> <strong><em>EntityWithDomainEventInterface</em></strong>, and Use the Trait. <strong><em>EntityDomainEventTrait</em></strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Entity</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">Country</span> <span class="kd">implements</span> <span class="nc">EntityWithDomainEventInterface</span>
<span class="p">{</span>
    <span class="kn">use</span> <span class="nc">EntityDomainEventTrait</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">CountryId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">(</span>
        <span class="kt">CountryId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">self</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span>
            <span class="nv">$id</span><span class="p">,</span>
            <span class="nv">$name</span><span class="p">,</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">CountryId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">name</span><span class="p">():</span> <span class="kt">CountryName</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>At this point, the <strong>Country Entity</strong> is ready to record <strong>Domain Events</strong>. The <strong>Domain Event</strong> will indicate that a <strong>Country</strong> has been created, containing the <strong>ID</strong> and <strong>name</strong>. To implement this, we create a <strong>Domain Event</strong>: <strong>CountryCreated</strong>. A <strong>Domain Event</strong> must be identifiable to ensure the same <strong>Domain Event</strong> is not processed multiple times. It must also have a publication date, so it can be processed in the correct order if event sequencing is important.</p>

<p>To meet these requirements, I created an <strong><em>Abstract Class</em></strong>, which adds these details to every <strong>Domain Event</strong> we create through inheritance.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Shared\Domain\Event</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Ramsey\Uuid\Uuid</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Contracts\EventDispatcher\Event</span><span class="p">;</span>

<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">DomainEvent</span> <span class="kd">extends</span> <span class="nc">Event</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="nv">$id</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">readonly</span> <span class="kt">int</span> <span class="nv">$occurredOn</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">=</span> <span class="nc">Uuid</span><span class="o">::</span><span class="nf">uuid4</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">toString</span><span class="p">();</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">occurredOn</span> <span class="o">=</span> <span class="nb">time</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Next, we create the <strong><em>Event</em></strong> that extends this class and implements the previously created <strong><em>Interface</em></strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Event</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Shared\Domain\Event\DomainEvent</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Shared\Domain\Event\DomainEventInterface</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">CountryCreated</span> <span class="kd">extends</span> <span class="nc">DomainEvent</span> <span class="kd">implements</span> <span class="nc">DomainEventInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$countryId</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="k">parent</span><span class="o">::</span><span class="nf">__construct</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The final step is to register this <strong>Domain Event</strong> when the <strong>Country</strong> is created.</p>

<p>Registering a <strong>Domain Event</strong> for every system action is not mandatory. However, it is very useful to maintain a clear separation of concerns. The <strong>CommandHandler</strong> is responsible for creating the <strong>Country Entity</strong>. If additional actions need to be performed, they should not be part of the <strong>CommandHandler</strong> itself. Segmenting code and <strong>Domain Events</strong> is a great way to achieve this separation. For instance, this <strong>Domain Event</strong> could be listened to in order to: Write the <strong>Country</strong> into the read model, and Notify another <strong>Domain</strong> that a new <strong>Country</strong> has been created.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Entity</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">Country</span> <span class="kd">implements</span> <span class="nc">EntityWithDomainEventInterface</span>
<span class="p">{</span>
    <span class="kn">use</span> <span class="nc">EntityDomainEventTrait</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">CountryId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">(</span>
        <span class="kt">CountryId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="kt">CountryName</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">self</span> <span class="p">{</span>
        <span class="nv">$country</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span>
            <span class="nv">$id</span><span class="p">,</span>
            <span class="nv">$name</span><span class="p">,</span>
        <span class="p">);</span>

        <span class="nv">$country</span><span class="o">::</span><span class="nf">recordEvent</span><span class="p">(</span>
            <span class="k">new</span> <span class="nc">CountryCreated</span><span class="p">(</span>
                <span class="nv">$country</span><span class="o">-&gt;</span><span class="n">id</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
                <span class="nv">$country</span><span class="o">-&gt;</span><span class="n">name</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
            <span class="p">)</span>
        <span class="p">);</span>

        <span class="k">return</span> <span class="nv">$country</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">CountryId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">name</span><span class="p">():</span> <span class="kt">CountryName</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The <strong>Domain Event</strong> is registered and will be dispatched in the <strong>CommandHandler</strong> using this line:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">dispatcher</span><span class="o">-&gt;</span><span class="nf">dispatch</span><span class="p">(</span><span class="nv">$country</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="future-considerations-2">Future Considerations</h3>
<p>It’s very important to dispatch the <strong>Domain Event</strong> after the action has been performed.</p>

<p>The creation process for the <strong>Country Entity</strong> is now complete.</p>

<h2 id="exposing-a-list-of-countries">Exposing a List of Countries</h2>

<p>Now, we want to expose a list of countries via an API. To achieve this, we will use <strong><em>API Platform</em></strong> (https://api-platform.com/), a framework that simplifies the creation of REST APIs while adhering to industry standards.</p>

<h3 id="quick-overview-of-api-platform">Quick Overview of API Platform</h3>

<p>This comprehensive framework is based on <strong><em>Resource</em></strong> classes, where we declare operations. These operations are linked to HTTP verbs (GET, PUT, POST, DELETE), and each operation is assigned: A <strong><em>Processor</em></strong> (for PUT, DELETE, and POST). A <strong><em>Provider</em></strong> (for GET).
API Platform offers a vast array of features, but I will only scratch the surface to ensure you understand the key elements when reading the code.</p>

<p>Here is my use case:</p>

<p><img src="/assets/images/2025-02-17/reas-list-product.png" alt="Read list product" /></p>

<p>As explained earlier, when using <strong><em>API Platform</em></strong>, the <strong>Primary Adapter</strong> is the <strong>Country</strong> <strong><em>Provider</em></strong>.</p>

<p>I start by writing a quick test to retrieve my list of <strong>countries</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">function</span> <span class="n">testGetCollection</span><span class="p">():</span> <span class="kt">void</span>
<span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'/api/countries'</span><span class="p">);</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertResponseIsSuccessful</span><span class="p">();</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertJsonContains</span><span class="p">([</span>
        <span class="s1">'@context'</span> <span class="o">=&gt;</span> <span class="s1">'/api/contexts/Country'</span><span class="p">,</span>
        <span class="s1">'@id'</span> <span class="o">=&gt;</span> <span class="s1">'/api/countries'</span><span class="p">,</span>
        <span class="s1">'@type'</span> <span class="o">=&gt;</span> <span class="s1">'Collection'</span><span class="p">,</span>
        <span class="s1">'member'</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="p">[</span>
                <span class="s1">'@type'</span> <span class="o">=&gt;</span> <span class="s1">'Country'</span><span class="p">,</span>
                <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Afghanistan'</span><span class="p">,</span>
            <span class="p">],</span>
            <span class="p">[</span>
                <span class="s1">'@type'</span> <span class="o">=&gt;</span> <span class="s1">'Country'</span><span class="p">,</span>
                <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Afrique du Sud'</span><span class="p">,</span>
            <span class="p">],</span>
        <span class="p">],</span>
        <span class="s1">'totalItems'</span> <span class="o">=&gt;</span> <span class="mi">30</span><span class="p">,</span>
    <span class="p">]);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>In this test, I send a request to the URI /api/countries, which returns a list of <strong>Country</strong> objects with their names. I expect to retrieve thirty <strong>countries</strong>, as pagination is enabled by default in <strong><em>API Platform</em></strong>, grouping results into batches of thirty.</p>

<p>The next step is to create the <strong><em>Resource Country</em></strong>, which is different from the <strong>Country Entity</strong>. The responsibility of this <strong><em>Resource</em></strong> is to: Manage the <strong><em>API Platform</em></strong> operation and return the requested data via the API.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Infrastructure\ApiPlatform\Resource</span><span class="p">;</span>

<span class="err">#</span><span class="p">[</span><span class="nf">ApiResource</span><span class="p">(</span>
    <span class="n">shortName</span><span class="o">:</span> <span class="s1">'Country'</span><span class="p">,</span>
<span class="p">)]</span>
<span class="err">#</span><span class="p">[</span><span class="nf">GetCollection</span><span class="p">(</span>
    <span class="s1">'/countries'</span><span class="p">,</span>
    <span class="n">filters</span><span class="o">:</span> <span class="p">[</span><span class="nc">CountryFilter</span><span class="o">::</span><span class="n">class</span><span class="p">],</span>
    <span class="n">provider</span><span class="o">:</span> <span class="nc">GetCountryCollectionProvider</span><span class="o">::</span><span class="n">class</span><span class="p">,</span>
<span class="p">)]</span>
<span class="k">final</span> <span class="kd">class</span> <span class="nc">GetCollectionCountryResource</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="na">#[ApiProperty(readable: false, writable: false, identifier: true)]</span>
        <span class="k">public</span> <span class="kt">?AbstractUid</span> <span class="nv">$id</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
        <span class="na">#[ApiProperty]</span>
        <span class="k">public</span> <span class="kt">?string</span> <span class="nv">$name</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">fromModel</span><span class="p">(</span><span class="kt">Country</span> <span class="nv">$country</span><span class="p">):</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span>
            <span class="k">new</span> <span class="nc">Uuid</span><span class="p">(</span><span class="nv">$country</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">),</span>
            <span class="nv">$country</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>To achieve this, we: Add a <strong><em>GetCollection</em></strong> operation, since we want to retrieve a list of <strong><em>Country Resources</em></strong>. Specify a <strong><em>Provider</em></strong>, which will be responsible for dispatching the <strong>Query</strong> to fetch the data. Define the fields to be returned. Add the <strong><em>ApiProperty</em></strong> attribute to indicate that these properties must be exposed via the API. Create a <strong><em>fromModel</em></strong> method to transform <strong>Country Entities</strong> into <strong><em>Country Resources</em></strong>.</p>

<p>Additionally, I have specified a filters argument in the <strong><em>GetCollection</em></strong> attribute. This allows us to define one or multiple filters, which are useful: Internally for <strong><em>API Platform</em></strong>. To appear in the API response metadata. I won’t go into further detail here, as it’s not essential for understanding <strong>DDD</strong>, but here is what the <strong><em>CountryFilter</em></strong> class looks like:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Infrastructure\ApiPlatform\OpenApi</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">ApiPlatform\Metadata\FilterInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\PropertyInfo\Type</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CountryFilter</span> <span class="kd">implements</span> <span class="nc">FilterInterface</span>
<span class="p">{</span>
    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">getDescription</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$resourceClass</span><span class="p">):</span> <span class="kt">array</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span>
            <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="p">[</span>
                <span class="s1">'property'</span> <span class="o">=&gt;</span> <span class="s1">'name'</span><span class="p">,</span>
                <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="nc">Type</span><span class="o">::</span><span class="no">BUILTIN_TYPE_STRING</span><span class="p">,</span>
                <span class="s1">'required'</span> <span class="o">=&gt;</span> <span class="kc">false</span><span class="p">,</span>
            <span class="p">],</span>
        <span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The <strong><em>Country Provider</em></strong>:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Infrastructure\ApiPlatform\State\Provider</span><span class="p">;</span>

<span class="cd">/**
 * @implements ProviderInterface&lt;GetCollectionCountryResource&gt;
 */</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">GetCountryCollectionProvider</span> <span class="kd">implements</span> <span class="nc">ProviderInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">QueryBusInterface</span> <span class="nv">$queryBus</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">Pagination</span> <span class="nv">$pagination</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @return Paginator&lt;GetCollectionCountryResource&gt;|list&lt;GetCollectionCountryResource&gt;
     */</span>
    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">provide</span><span class="p">(</span><span class="kt">Operation</span> <span class="nv">$operation</span><span class="p">,</span> <span class="kt">array</span> <span class="nv">$uriVariables</span> <span class="o">=</span> <span class="p">[],</span> <span class="kt">array</span> <span class="nv">$context</span> <span class="o">=</span> <span class="p">[]):</span> <span class="kt">array</span><span class="o">|</span><span class="nc">Paginator</span>
    <span class="p">{</span>
        <span class="nv">$name</span> <span class="o">=</span> <span class="nv">$context</span><span class="p">[</span><span class="s1">'filters'</span><span class="p">][</span><span class="s1">'name'</span><span class="p">]</span> <span class="o">??</span> <span class="kc">null</span><span class="p">;</span>
        <span class="nv">$page</span> <span class="o">=</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">pagination</span><span class="o">-&gt;</span><span class="nf">isEnabled</span><span class="p">(</span><span class="nv">$operation</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$page</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">pagination</span><span class="o">-&gt;</span><span class="nf">getPage</span><span class="p">(</span><span class="nv">$context</span><span class="p">);</span>
            <span class="nv">$limit</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">pagination</span><span class="o">-&gt;</span><span class="nf">getLimit</span><span class="p">(</span><span class="nv">$operation</span><span class="p">,</span> <span class="nv">$context</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="nv">$models</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queryBus</span><span class="o">-&gt;</span><span class="nf">ask</span><span class="p">(</span><span class="k">new</span> <span class="nc">GetCountriesQuery</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$page</span><span class="p">,</span> <span class="nv">$limit</span><span class="p">));</span>

        <span class="nv">$resources</span> <span class="o">=</span> <span class="p">[];</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$models</span> <span class="k">as</span> <span class="nv">$model</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$resources</span><span class="p">[]</span> <span class="o">=</span> <span class="nc">GetCollectionCountryResource</span><span class="o">::</span><span class="nf">fromModel</span><span class="p">(</span><span class="nv">$model</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="kc">null</span> <span class="o">!==</span> <span class="nv">$paginator</span> <span class="o">=</span> <span class="nv">$models</span><span class="o">-&gt;</span><span class="nf">paginator</span><span class="p">())</span> <span class="p">{</span>
            <span class="nv">$resources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Paginator</span><span class="p">(</span>
                <span class="k">new</span> <span class="nc">\ArrayIterator</span><span class="p">(</span><span class="nv">$resources</span><span class="p">),</span>
                <span class="p">(</span><span class="n">float</span><span class="p">)</span> <span class="nv">$paginator</span><span class="o">-&gt;</span><span class="nf">getCurrentPage</span><span class="p">(),</span>
                <span class="p">(</span><span class="n">float</span><span class="p">)</span> <span class="nv">$paginator</span><span class="o">-&gt;</span><span class="nf">getItemsPerPage</span><span class="p">(),</span>
                <span class="p">(</span><span class="n">float</span><span class="p">)</span> <span class="nv">$paginator</span><span class="o">-&gt;</span><span class="nf">getLastPage</span><span class="p">(),</span>
                <span class="p">(</span><span class="n">float</span><span class="p">)</span> <span class="nv">$paginator</span><span class="o">-&gt;</span><span class="nf">getTotalItems</span><span class="p">(),</span>
            <span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$resources</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This <strong><em>Provider</em></strong> contains a lot of <strong><em>API Platform</em></strong>-specific code, but I will take a moment to explain it, as it touches on some important <strong>DDD</strong> considerations.</p>

<p>First, I retrieve the name filter (if specified) and initialize pagination at 0. Then, I extract the pagination parameters from the URL (if pagination is enabled). Next, I dispatch the <strong>Query</strong>, responsible for fetching data from the system. After that, I iterate over the <strong>Entities</strong> returned by the <strong>Query</strong> and convert them into <strong><em>Resources</em></strong>. Finally, I apply pagination (if enabled) and return the <strong><em>Resources</em></strong>, whether paginated or not.</p>

<h3 id="future-considerations-3">Future Considerations</h3>
<p>Managing pagination should not be the responsibility of the <strong>QueryHandler</strong>—this is a concern of the <strong>Infrastructure</strong> or <strong>Application</strong> layer. We should adapt accordingly. To handle this correctly, we should implement a read model (via projections), but I realized this too late. For now, pagination is handled by the <strong>Repository</strong>, which is not a best practice. If you want a more detailed example, I have written an article on this topic <a href="https://huguesgobet.com/other/2024-12-16"><em>ici</em></a>.</p>

<p>Now that everything is clear, here is the <strong>Query</strong> we dispatch.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Application\Query</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Country\Application\Adapter\CountryRepositoryInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Shared\Application\Query\QueryInterface</span><span class="p">;</span>

<span class="cd">/**
 * @implements QueryInterface&lt;CountryRepositoryInterface&gt;
 */</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">GetCountriesQuery</span> <span class="kd">implements</span> <span class="nc">QueryInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">?string</span> <span class="nv">$name</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">?int</span> <span class="nv">$page</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">?int</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Within the <strong>QueryHandler</strong>:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Application\Query</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Country\Application\Adapter\CountryRepositoryInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Shared\Application\Query\AsQueryHandler</span><span class="p">;</span>

<span class="na">#[AsQueryHandler]</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">GetCountriesQueryHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">CountryRepositoryInterface</span> <span class="nv">$countryRepository</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">GetCountriesQuery</span> <span class="nv">$query</span><span class="p">):</span> <span class="kt">CountryRepositoryInterface</span>
    <span class="p">{</span>
        <span class="nv">$countryRepository</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">countryRepository</span><span class="p">;</span>

        <span class="nv">$countryRepository</span> <span class="o">=</span> <span class="nv">$countryRepository</span><span class="o">-&gt;</span><span class="nf">sortName</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$query</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$countryRepository</span> <span class="o">=</span> <span class="nv">$countryRepository</span><span class="o">-&gt;</span><span class="nf">withName</span><span class="p">(</span><span class="nv">$query</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$query</span><span class="o">-&gt;</span><span class="n">page</span> <span class="o">!==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="n">limit</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$countryRepository</span> <span class="o">=</span> <span class="nv">$countryRepository</span><span class="o">-&gt;</span><span class="nf">withPagination</span><span class="p">(</span><span class="nv">$query</span><span class="o">-&gt;</span><span class="n">page</span><span class="p">,</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="n">limit</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$countryRepository</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>I retrieve the <strong>Repository</strong> and specify that I want to sort results by name. If a <strong>name</strong> filter is provided, I instruct the <strong>Repository</strong> to only fetch matching <strong>Countries</strong>. If pagination is enabled, I tell the <strong>Repository</strong> to apply it (e.g., limiting results to thirty elements and fetching countries from page 2 onward).</p>

<p>What might seem unusual is that the <strong>Repository</strong> itself is returned—this is to align with <strong><em>API Platform</em></strong>’s structure and its pagination handling. Returning the <strong>Repository</strong> does not violate <strong>CQRS</strong> or <strong>DDD</strong> principles, which is why I accepted this approach.</p>

<h3 id="future-considerations-4">Future Considerations</h3>

<p>Using a read model would allow me to avoid this slightly unusual approach and remove pagination responsibility from the <strong>Repository</strong>, eliminating these oddities within the <strong>Domain</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Domain\Repository</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Country\Domain\Entity\Country</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Shared\Domain\Repository\RepositoryInterface</span><span class="p">;</span>

<span class="cd">/**
* @extends RepositoryInterface&lt;Country&gt;
*/</span>
<span class="kd">interface</span> <span class="nc">CountryRepositoryInterface</span> <span class="kd">extends</span> <span class="nc">RepositoryInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">ofName</span><span class="p">(</span><span class="kt">string</span> <span class="nc">Sname</span><span class="p">):</span> <span class="kt">?Country</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">add</span> <span class="p">(</span><span class="kt">Country</span> <span class="nc">Scountry</span><span class="p">):</span> <span class="kt">void</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">withName</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$name</span><span class="p">):</span> <span class="kt">self</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">sortName</span><span class="p">():</span> <span class="kt">self</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This is what the <strong>Repository</strong> looks like. I will now show the <strong><em>Doctrine</em></strong> implementation. I won’t explain it, as it is not relevant to this article, but I believe it is important to show all the code for this section.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Country\Infrastructure\Doctrine\Repository</span><span class="p">;</span>

<span class="cd">/**
 * @extends DoctrineRepository&lt;Country&gt;
 */</span>
<span class="k">final</span> <span class="kd">class</span> <span class="nc">CountryDoctrineAdapter</span> <span class="kd">extends</span> <span class="nc">DoctrineRepository</span> <span class="kd">implements</span> <span class="nc">CountryAdapterInterface</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">const</span> <span class="no">string</span> <span class="no">ENTITY_CLASS</span> <span class="o">=</span> <span class="nc">Country</span><span class="o">::</span><span class="n">class</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">const</span> <span class="no">string</span> <span class="no">ALIAS</span> <span class="o">=</span> <span class="s1">'country'</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">DocumentManager</span> <span class="nv">$documentManager</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="k">parent</span><span class="o">::</span><span class="nf">__construct</span><span class="p">(</span><span class="nv">$documentManager</span><span class="p">,</span> <span class="k">self</span><span class="o">::</span><span class="no">ENTITY_CLASS</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">ofName</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$name</span><span class="p">):</span> <span class="kt">?Country</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">documentManager</span><span class="o">-&gt;</span><span class="nf">getRepository</span><span class="p">(</span><span class="k">self</span><span class="o">::</span><span class="no">ENTITY_CLASS</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">findOneBy</span><span class="p">([</span><span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="nv">$name</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">add</span><span class="p">(</span><span class="kt">Country</span> <span class="nv">$country</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">documentManager</span><span class="o">-&gt;</span><span class="nf">persist</span><span class="p">(</span><span class="nv">$country</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">documentManager</span><span class="o">-&gt;</span><span class="nb">flush</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">withName</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">self</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">filter</span><span class="p">(</span><span class="k">static</span> <span class="k">function</span> <span class="p">(</span><span class="kt">Builder</span> <span class="nv">$qb</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$name</span><span class="p">):</span> <span class="kt">void</span> <span class="p">{</span>
            <span class="nv">$qb</span><span class="o">-&gt;</span><span class="nf">field</span><span class="p">(</span><span class="s1">'name'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">text</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">sortName</span><span class="p">():</span> <span class="kt">self</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">filter</span><span class="p">(</span><span class="k">static</span> <span class="k">function</span> <span class="p">(</span><span class="kt">Builder</span> <span class="nv">$qb</span><span class="p">):</span> <span class="kt">void</span> <span class="p">{</span>
            <span class="nv">$qb</span><span class="o">-&gt;</span><span class="nb">sort</span><span class="p">(</span><span class="s1">'name'</span><span class="p">,</span> <span class="s1">'ASC'</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This was a very in-depth article! I covered <strong>TDD</strong> as well as the creation of a <strong>Supporting Domain</strong>. I also introduced two new <strong>Domain</strong> use cases. However, I haven’t yet had the opportunity to discuss the <strong>Core Domain</strong>. That will be the focus of a future article, where I will talk about communication between <strong>Domains</strong> and the many mistakes I made on this topic.</p>]]></content><author><name>Hugues Gobet</name><email>hugues.gobet@gmail.com</email></author><category term="ddd-logbook" /><summary type="html"><![CDATA[In this article, I will discuss the concept of Country within the framework of a Supporting Domain, using a Domain Country as an example. I will also detail the exposure of an API that allows retrieving information about a Country and verifying its existence. I will begin by revisiting the definition of a Supporting Subdomain, then explain how to implement it step by step. Supporting Subdomain: What Is It? As the name suggests, a Supporting Subdomain is, first and foremost, a Subdomain: it represents a part of the Domain that can be separated into a module. In a business project, a dedicated team could be responsible for it. A Subdomain can also have its own Ubiquitous Language when it belongs to a Bounded Context different from the Core Domain. Although important to the business, the Supporting Subdomain is less critical than the Core Domain. Creating a Supporting Domain is only relevant if it provides specific value or addresses a particular need. In the case of our wine bottle management API, I created a Domain Country to separate this concept from the Core Domain, which manages the Bottle Inventory. This separation helps organize the code into two distinct Bounded Contexts. Additionally, this Domain is essential for providing a list of countries when creating a bottle while ensuring that the country actually exists. However, since it remains less crucial than the Core Domain, it fits perfectly within the definition of a Supporting Subdomain. How to Implement the Domain? In this article, I will illustrate the implementation of the Domain through two use cases. I have chosen not to separate these cases into multiple sections because they are quite repetitive and do not pose a significant challenge in terms of Domain-Driven Design (DDD). Here are the two scenarios I will cover: Creating a Country Retrieving the list of all Countries I propose tackling this topic using a different approach than the one taken for the authentication use case. Therefore, I will start by defining the Entity, along with unit tests, to integrate a Test-Driven Development (TDD) approach. Quick Introduction to TDD Test-Driven Development (TDD) is a very interesting development methodology that would deserve a dedicated article (maybe an idea for a future special edition). If you’re looking for more in-depth information, I highly recommend the book Test-Driven Development: By Example by Kent Beck. The fundamental idea behind this methodology is to write tests before writing the corresponding functionality. However, the essence of this approach lies in a step-by-step, progressive, and rigorous process. To illustrate this method, I will walk you through the tests related to the creation of a Country Entity. Step 1: Testing the Creation of a Country Entity We will begin with a simple test to validate the correct creation of a Country Entity. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public function testCreateSuccess(): void { $country = Country::create( CountryId::fromString('af785dbb-4ac1-4786-a5aa-1fed08f6ec26'), CountryName::fromString('France'), ); $this-&gt;assertInstanceOf( Country::class, $country, ); $this-&gt;assertEquals( 'af785dbb-4ac1-4786-a5aa-1fed08f6ec26', $country-&gt;id()-&gt;value(), ); $this-&gt;assertEquals( 'France', $country-&gt;name()-&gt;value(), ); } This test precisely defines the expected output of the Factory create method. In a TDD approach, the goal is to obtain a green test (i.e., a successful test) as quickly as possible. Upon the first execution of the test, an error occurs immediately: the class does not exist. This situation is completely normal and is an integral part of the TDD process. Each correction step aims to fix the current error in order to gradually build an implementation validated by tests. To quickly obtain a green test, I started by creating the Country Entity, which changed the error message. I then created a create method in the Country Entity. At first, this method does nothing, but it helps progress toward a successful test. 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Entity; final readonly class Country { public static function create(): self { } } The new error message indicates that the Value Object CountryId does not exist. To resolve this issue, I created the CountryId Value Object, keeping it as simple as possible. 1 2 3 4 5 6 7 8 9 10 &lt;?php declare(strict_types=1); namespace App\Country\Domain\ValueObject; final readonly class CountryId { } The next message states that it cannot find the fromString method. So, I added it. 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;?php declare(strict_types=1); namespace App\Country\Domain\ValueObject; final readonly class CountryId { public static function fromString(string $value): self { return new self(); } } At this point, we get another message indicating that the Value Object CountryName does not exist. I then created the class, and just like with CountryId, I anticipated the need by adding a fromString method. Future Considerations The idea is to only anticipate small portions of code, step by step, to stay focused on the main goal: making the test pass (turn green) as quickly as possible. 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;?php declare(strict_types=1); namespace App\Country\Domain\ValueObject; final readonly class CountryName { public static function fromString(string $value): self { return new self(); } } The test error message has now evolved and indicates that the Factory method of the Country Entity does not return an Entity. To fix this issue, we adopt the simplest possible approach. To correct this, I ensure that the create method returns a Country Entity. 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Entity; final readonly class Country { public static function create(): self { return new self(); } } Now, the method does return an Entity, but the tests report a new error: the absence of a method to expose the identifier. The same issue will also arise for the name attribute. I now need to create these methods. Before implementing them, it is crucial to determine what they should return. To keep it simple, they will return exactly what the test expects them to return. At this point: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Entity; use App\Country\Domain\ValueObject\CountryId; use App\Country\Domain\ValueObject\CountryName; final readonly class Country { public static function create(): self { return new self(); } public function id(): CountryId { return CountryId::fromString('af785dbb-4ac1-4786-a5aa-1fed08f6ec26'); } public function name(): CountryName { return CountryName::fromString( 'France' ); } } The test should now pass. However, in the Value Objects, the value method is missing, which is needed to retrieve their value. I will now add it. Another issue lies in assigning the value passed into the fromString method. I will resolve both problems in a single operation. Current State of the Value Objects. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 &lt;?php declare(strict_types=1); namespace App\Country\Domain\ValueObject; final readonly class CountryId { public function __construct( private string $value, ) {} public static function fromString(string $value): self { return new self($value); } public function value(): string { return $this-&gt;value; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 &lt;?php declare(strict_types=1); namespace App\Country\Domain\ValueObject; final readonly class CountryName { public function __construct( private string $value, ) {} public static function fromString(string $value): self { return new self($value); } public function value(): string { return $this-&gt;value; } } At this stage, here’s what the Value Objects look like. The goal of making the tests pass (turn green) has been achieved, which is perfect. All of this is great, but we took a shortcut by hardcoding the values inside the Entity. We achieved the test’s goal quickly, in the most naive way possible. Now, we need to move on to the second step: refactoring the code to improve it and make it fully functional. Step Two: Making the Code Functional To achieve this, the Country Entity must have two distinct properties: one for the ID and one for the name. Additionally, the id and name methods should return the values of these properties. The refactoring must be done in small steps, ensuring that we only work on what is covered by the test. Since the test in this example focuses on the create method, I will limit my refactoring to code related to this method, without modifying other Entities. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Entity; use App\Country\Domain\ValueObject\CountryId; use App\Country\Domain\ValueObject\CountryName; final readonly class Country { public function __construct( private CountryId $id, private CountryName $name, ) {} public static function create(): self { return new self(); } public function id(): CountryId { return $this-&gt;id; } public function name(): CountryName { return $this-&gt;name; } } This is what the Entity looks like now. Let’s rerun the tests to see if they still pass. And then… disaster strikes! The test fails. We’re back to square one: getting the test to pass again as quickly as possible. According to the error message, the Country Entity constructor must take two parameters. However, looking at the Entity’s code, we notice that no arguments are passed to the constructor inside the create method. Therefore, this method must accept these two parameters so they can be passed to the Entity’s constructor. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Entity; use App\Country\Domain\ValueObject\CountryId; use App\Country\Domain\ValueObject\CountryName; final readonly class Country { public function __construct( private CountryId $id, private CountryName $name, ) {} public static function create( CountryId $id, CountryName $name, ): self { return new self( $id, $name, ); } public function id(): CountryId { return $this-&gt;id; } public function name(): CountryName { return $this-&gt;name; } } After rerunning the test, it finally passes (turns green). We have now created the Country Entity’s method following TDD best practices. Key Takeaways By following TDD, we ensure that the test perfectly reflects the business requirement and that it is correctly validated. I highly recommend adopting this approach as much as possible, as it simplifies the design of business use cases and ensures that your business logic has near 100% code coverage. Adding Value to Value Object To increase the value of Value Objects, it is essential to add validation rules for their content. For example, we can verify that the CountryId Value Object is a valid UUID. To do this, we can either use an existing library or write our own validation logic. Of course, we start by writing a test, then implement the validation inside the corresponding Entity. Here is what the test looks like: 1 2 3 4 5 6 7 8 9 public function testCreateBadIdNotUuid(): void { $this-&gt;expectException(\InvalidArgumentException::class); Country::create( CountryId::fromString('12'), CountryName::fromString('France'), ); } As expected, it fails. To make the test pass quickly, we need to add a verification in the Value Object to ensure that the provided value is a valid UUID. For this, I use the PHP library: https://github.com/webmozarts/assert. First, I install it following the official documentation. Then, I simply add the appropriate validation to throw the expected exception. Here is the updated Value Object code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 &lt;?php declare(strict_types=1); namespace App\Country\Domain\ValueObject; use Webmozart\Assert\Assert; final readonly class CountryId { private string $value; public function __construct( string $value, ) { Assert::uuid($value); $this-&gt;value = $value; } public static function fromString(string $value): self { return new self($value); } public function value(): string { return $this-&gt;value; } } Now, let’s run the test: Perfect! This Domain, being very simple and with few rules, is now complete. In the future, we will explore more complex Domains. Implementing Use Cases Now, we will proceed to develop the use cases within the Domain we just created. Creating a Country We start by importing products from a file retrieved online. The first step is to write the test for the Primary Adapter, which is the Symfony Command ImportCountryCommand. 1 2 3 4 5 6 7 8 9 10 11 public function testExecute(): void { self::bootkernel(); $application = new Application(self::$kernel); $command = $application-&gt;find('country:import'); $commandTester = new CommandTester(Scommand); $commandTester-&gt;execute([]); $commandTester-&gt;assertCommandIsSuccessful(); $output = $commandTester-&gt;getDisplay(); $this-&gt;assertStringContainsString('[OK] Countries created: 241', $output); } The code in question is related to Symfony, so I won’t dwell on it too much. The key point here is understanding the assertion that validates the test: at the end of the command, the message “[OK] Countries created: 241” must be displayed, showing the number of countries created. Once this verification is complete, we can move on to the code. The Symfony Command itself is not particularly interesting, as it mainly handles file reading, which falls under the Infrastructure layer , not the Domain. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 private function handleFile(): int { $countryCreated = 0; $handle = fopen($this-&gt;getFilePath(), 'r'); if ($handle === false) { throw new \RuntimeException('Unable to open file'); } while (($data = fgetcsv($handle, 1000)) !== false) { if ($data[4] === null) { continue; } $this-&gt;commandBus-&gt;dispatch(new CreateCountryCommand($data[4])); ++$countryCreated; } fclose($handle); return $countryCreated; } Future Considerations Here, we could also format a table containing all the country names and dispatch a Command to import them all at once. This approach would better align with CQRS, where any change to the system should be encapsulated in a single Command. I believe this modification should be made. Here is an excerpt from the Symfony Command, showing the section responsible for reading the file and dispatching the Command. I will go over this part quickly, as it is not crucial here. What matters is that the file is read, and a Command is dispatched with the country name contained in it. For this Domain, I only need the name—no other information. However, depending on the needs of the Domain Country or the Core Domain, additional details could be processed. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 &lt;?php declare(strict_types=1); namespace App\Country\Application\Command; use TegCorp\SharedKernelBundle\Application\Command\CommandInterface; /** * @implements CommandInterface&lt;void&gt; */ final readonly class CreateCountryCommand implements CommandInterface { public function __construct( public string $name, ) { } } The Command is very simple and only takes a name as input. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 &lt;?php declare(strict_types=1); namespace App\Country\Application\Command; #[AsCommandHandler] final readonly class CreateCountryCommandHandler { public function __construct( private CountryRepositoryInterface $countryRepository, private DomainEventDispatcherInterface $dispatcher, private IdFactory $idFactory, ) { } /** * @throws CountryAlreadyExistsException */ public function __invoke(CreateCountryCommand $command): void { if ($this-&gt;countryRepository-&gt;ofName(CountryName::fromString($command-&gt;name)) !== null) { throw new CountryAlreadyExistsException(); } $country = Country::create( CountryId::fromString($this-&gt;idFactory-&gt;create()), CountryName::fromString($command-&gt;name), ); $this-&gt;countryRepository-&gt;add($country); $this-&gt;dispatcher-&gt;dispatch($country); } } The CommandHandler is part of the Application layer. It serves as a bridge between the Infrastructure layer and the Domain. The CommandHandler first checks if the Country already exists using the Repository. If the Country is already present, an exception is thrown. Since each Country name is unique, we can safely search by name to ensure uniqueness. The Factory method of our Country Entity allows us to create the Country. Once created, it is stored in the system using the Repository. Finally, we dispatch the Domain Events related to the creation of the Country. The Repository is a Domain-level concept, so we create an Interface to apply Dependency Inversion: We declare an Interface for a Repository (e.g., with an add method) inside the Domain. We then implement the add method in the Infrastructure layer, which saves the new Entity in the database. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Repository; /** * @extends RepositoryInterface&lt;Country&gt; */ interface CountryRepositoryInterface extends RepositoryInterface { public function ofName(CountryName $name): ?Country; public function add(Country $country): void; } In the Repository, we define two essential methods to interact with the Domain: – ofName: Retrieves a Country by its name or returns null if the Country does not exist. – add: Saves the Country in the system. The implementation of the Repository is not particularly complex since it is Symfony-related, but I am including it here to complete the implementation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 &lt;?php declare(strict_types=1); namespace App\Country\Infrastructure\Doctrine\Repository; final class CountryDoctrineRepository implements CountryRepositoryInterface { private const string ENTITY_CLASS = CountryDoctrine::class; private const string ALIAS = 'country'; public function __construct(EntityManagerInterface $entityManager) { parent::__construct($entityManager, self::ENTITY_CLASS, self::ALIAS); } #[\Override] public function ofName( CountryName $name, ): ?Country { $country = $this-&gt;entityManager -&gt;getRepository(self::ENTITY_CLASS) -&gt;findOneBy(['name' =&gt; $name-&gt;value()]) ; if ($country === null) { return null; } return CountryMapper::toDomain($country); } #[\Override] public function add(Country $country): void { $countryDoctrine = CountryMapper::toInfrastructurePersist($country); $this-&gt;entityManager-&gt;persist($countryDoctrine); $this-&gt;entityManager-&gt;flush(); } } I won’t go into the details of the implementation, but we can clearly see the two methods declared in the Repository Interface. This concludes the implementation of the use case for creating a Country. Now, I will add a small feature to the Domain: registering a Domain Event when a Country Entity is created. Registering a Domain Event for the Creation of a Country Entity To achieve this, I created an Interface that Entities must implement to record their business events. Then, I use an Event Dispatcher to dispatch all the events of an Entity. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 &lt;?php declare(strict_types=1); namespace App\Shared\Domain\Entity; use App\Shared\Domain\Event\DomainEventInterface; interface EntityWithDomainEventInterface { /** * @return DomainEventInterface[] */ public static function getRecordedEvent(): array; public static function recordEvent(DomainEventInterface $event): void; public static function eraseRecordedEvents(): void; } This Interface defines three methods: getRecordedEvent: Retrieves all Domain Events recorded for an Entity. recordEvent: Records a Domain Event after an action in the Domain. eraseRecordedEvents: Deletes recorded Domain Events after they are dispatched, ensuring they are not processed twice. To create the methods linked to this Interface, Domain Events themselves must also implement an Interface. This Interface will be used to type the Domain Events. 1 2 3 4 5 6 7 8 9 &lt;?php declare(strict_types=1); namespace App\Shared\Domain\Event; interface DomainEventInterface { } Next, we must ensure that the Country Entity implements these methods. To do so, I chose to create a PHP Trait, allowing us to add these methods to the Entity without using inheritance. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 &lt;?php declare(strict_types=1); namespace App\Shared\Domain\Entity; use App\Shared\Domain\Event\DomainEventInterface; trait EntityDomainEventTrait { private static array $recordedEvents = []; #[\Override] public static function getRecordedEvent(): array { return self::$recordedEvents; } #[\Override] public static function recordEvent(DomainEventInterface $event): void { self::$recordedEvents[] = $event; } #[\Override] public static function eraseRecordedEvents(): void { self::$recordedEvents = []; } } For the Country Entity to use these methods, it must: Implement the interface EntityWithDomainEventInterface, and Use the Trait. EntityDomainEventTrait. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Entity; final class Country implements EntityWithDomainEventInterface { use EntityDomainEventTrait; public function __construct( private CountryId $id, private CountryName $name, ) { } public static function create( CountryId $id, CountryName $name, ): self { return new self( $id, $name, ); } public function id(): CountryId { return $this-&gt;id; } public function name(): CountryName { return $this-&gt;name; } } At this point, the Country Entity is ready to record Domain Events. The Domain Event will indicate that a Country has been created, containing the ID and name. To implement this, we create a Domain Event: CountryCreated. A Domain Event must be identifiable to ensure the same Domain Event is not processed multiple times. It must also have a publication date, so it can be processed in the correct order if event sequencing is important. To meet these requirements, I created an Abstract Class, which adds these details to every Domain Event we create through inheritance. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &lt;?php declare(strict_types=1); namespace App\Shared\Domain\Event; use Ramsey\Uuid\Uuid; use Symfony\Contracts\EventDispatcher\Event; abstract class DomainEvent extends Event { public readonly string $id; public readonly int $occurredOn; public function __construct( ) { $this-&gt;id = Uuid::uuid4()-&gt;toString(); $this-&gt;occurredOn = time(); } } Next, we create the Event that extends this class and implements the previously created Interface. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Event; use App\Shared\Domain\Event\DomainEvent; use App\Shared\Domain\Event\DomainEventInterface; final class CountryCreated extends DomainEvent implements DomainEventInterface { public function __construct( public string $countryId, public string $name, ) { parent::__construct(); } } The final step is to register this Domain Event when the Country is created. Registering a Domain Event for every system action is not mandatory. However, it is very useful to maintain a clear separation of concerns. The CommandHandler is responsible for creating the Country Entity. If additional actions need to be performed, they should not be part of the CommandHandler itself. Segmenting code and Domain Events is a great way to achieve this separation. For instance, this Domain Event could be listened to in order to: Write the Country into the read model, and Notify another Domain that a new Country has been created. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Entity; final class Country implements EntityWithDomainEventInterface { use EntityDomainEventTrait; public function __construct( private CountryId $id, private CountryName $name, ) { } public static function create( CountryId $id, CountryName $name, ): self { $country = new self( $id, $name, ); $country::recordEvent( new CountryCreated( $country-&gt;id-&gt;value(), $country-&gt;name-&gt;value(), ) ); return $country; } public function id(): CountryId { return $this-&gt;id; } public function name(): CountryName { return $this-&gt;name; } } The Domain Event is registered and will be dispatched in the CommandHandler using this line: 1 $this-&gt;dispatcher-&gt;dispatch($country); Future Considerations It’s very important to dispatch the Domain Event after the action has been performed. The creation process for the Country Entity is now complete. Exposing a List of Countries Now, we want to expose a list of countries via an API. To achieve this, we will use API Platform (https://api-platform.com/), a framework that simplifies the creation of REST APIs while adhering to industry standards. Quick Overview of API Platform This comprehensive framework is based on Resource classes, where we declare operations. These operations are linked to HTTP verbs (GET, PUT, POST, DELETE), and each operation is assigned: A Processor (for PUT, DELETE, and POST). A Provider (for GET). API Platform offers a vast array of features, but I will only scratch the surface to ensure you understand the key elements when reading the code. Here is my use case: As explained earlier, when using API Platform, the Primary Adapter is the Country Provider. I start by writing a quick test to retrieve my list of countries. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public function testGetCollection(): void { $this-&gt;get('/api/countries'); $this-&gt;assertResponseIsSuccessful(); $this-&gt;assertJsonContains([ '@context' =&gt; '/api/contexts/Country', '@id' =&gt; '/api/countries', '@type' =&gt; 'Collection', 'member' =&gt; [ [ '@type' =&gt; 'Country', 'name' =&gt; 'Afghanistan', ], [ '@type' =&gt; 'Country', 'name' =&gt; 'Afrique du Sud', ], ], 'totalItems' =&gt; 30, ]); } In this test, I send a request to the URI /api/countries, which returns a list of Country objects with their names. I expect to retrieve thirty countries, as pagination is enabled by default in API Platform, grouping results into batches of thirty. The next step is to create the Resource Country, which is different from the Country Entity. The responsibility of this Resource is to: Manage the API Platform operation and return the requested data via the API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 &lt;?php declare(strict_types=1); namespace App\Country\Infrastructure\ApiPlatform\Resource; #[ApiResource( shortName: 'Country', )] #[GetCollection( '/countries', filters: [CountryFilter::class], provider: GetCountryCollectionProvider::class, )] final class GetCollectionCountryResource { public function __construct( #[ApiProperty(readable: false, writable: false, identifier: true)] public ?AbstractUid $id = null, #[ApiProperty] public ?string $name = null, ) { } public static function fromModel(Country $country): self { return new self( new Uuid($country-&gt;id), $country-&gt;name, ); } } To achieve this, we: Add a GetCollection operation, since we want to retrieve a list of Country Resources. Specify a Provider, which will be responsible for dispatching the Query to fetch the data. Define the fields to be returned. Add the ApiProperty attribute to indicate that these properties must be exposed via the API. Create a fromModel method to transform Country Entities into Country Resources. Additionally, I have specified a filters argument in the GetCollection attribute. This allows us to define one or multiple filters, which are useful: Internally for API Platform. To appear in the API response metadata. I won’t go into further detail here, as it’s not essential for understanding DDD, but here is what the CountryFilter class looks like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 &lt;?php declare(strict_types=1); namespace App\Country\Infrastructure\ApiPlatform\OpenApi; use ApiPlatform\Metadata\FilterInterface; use Symfony\Component\PropertyInfo\Type; final readonly class CountryFilter implements FilterInterface { #[\Override] public function getDescription(string $resourceClass): array { return [ 'name' =&gt; [ 'property' =&gt; 'name', 'type' =&gt; Type::BUILTIN_TYPE_STRING, 'required' =&gt; false, ], ]; } } The Country Provider: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 &lt;?php declare(strict_types=1); namespace App\Country\Infrastructure\ApiPlatform\State\Provider; /** * @implements ProviderInterface&lt;GetCollectionCountryResource&gt; */ final readonly class GetCountryCollectionProvider implements ProviderInterface { public function __construct( private QueryBusInterface $queryBus, private Pagination $pagination, ) { } /** * @return Paginator&lt;GetCollectionCountryResource&gt;|list&lt;GetCollectionCountryResource&gt; */ #[\Override] public function provide(Operation $operation, array $uriVariables = [], array $context = []): array|Paginator { $name = $context['filters']['name'] ?? null; $page = $limit = 0; if ($this-&gt;pagination-&gt;isEnabled($operation)) { $page = $this-&gt;pagination-&gt;getPage($context); $limit = $this-&gt;pagination-&gt;getLimit($operation, $context); } $models = $this-&gt;queryBus-&gt;ask(new GetCountriesQuery($name, $page, $limit)); $resources = []; foreach ($models as $model) { $resources[] = GetCollectionCountryResource::fromModel($model); } if (null !== $paginator = $models-&gt;paginator()) { $resources = new Paginator( new \ArrayIterator($resources), (float) $paginator-&gt;getCurrentPage(), (float) $paginator-&gt;getItemsPerPage(), (float) $paginator-&gt;getLastPage(), (float) $paginator-&gt;getTotalItems(), ); } return $resources; } } This Provider contains a lot of API Platform-specific code, but I will take a moment to explain it, as it touches on some important DDD considerations. First, I retrieve the name filter (if specified) and initialize pagination at 0. Then, I extract the pagination parameters from the URL (if pagination is enabled). Next, I dispatch the Query, responsible for fetching data from the system. After that, I iterate over the Entities returned by the Query and convert them into Resources. Finally, I apply pagination (if enabled) and return the Resources, whether paginated or not. Future Considerations Managing pagination should not be the responsibility of the QueryHandler—this is a concern of the Infrastructure or Application layer. We should adapt accordingly. To handle this correctly, we should implement a read model (via projections), but I realized this too late. For now, pagination is handled by the Repository, which is not a best practice. If you want a more detailed example, I have written an article on this topic ici. Now that everything is clear, here is the Query we dispatch. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 &lt;?php declare(strict_types=1); namespace App\Country\Application\Query; use App\Country\Application\Adapter\CountryRepositoryInterface; use App\Shared\Application\Query\QueryInterface; /** * @implements QueryInterface&lt;CountryRepositoryInterface&gt; */ final readonly class GetCountriesQuery implements QueryInterface { public function __construct( public ?string $name = null, public ?int $page = null, public ?int $limit = null, ) { } } Within the QueryHandler: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 &lt;?php declare(strict_types=1); namespace App\Country\Application\Query; use App\Country\Application\Adapter\CountryRepositoryInterface; use App\Shared\Application\Query\AsQueryHandler; #[AsQueryHandler] final readonly class GetCountriesQueryHandler { public function __construct( private CountryRepositoryInterface $countryRepository, ) { } public function __invoke(GetCountriesQuery $query): CountryRepositoryInterface { $countryRepository = $this-&gt;countryRepository; $countryRepository = $countryRepository-&gt;sortName(); if ($query-&gt;name !== null) { $countryRepository = $countryRepository-&gt;withName($query-&gt;name); } if ($query-&gt;page !== null &amp;&amp; $query-&gt;limit !== null) { $countryRepository = $countryRepository-&gt;withPagination($query-&gt;page, $query-&gt;limit); } return $countryRepository; } } I retrieve the Repository and specify that I want to sort results by name. If a name filter is provided, I instruct the Repository to only fetch matching Countries. If pagination is enabled, I tell the Repository to apply it (e.g., limiting results to thirty elements and fetching countries from page 2 onward). What might seem unusual is that the Repository itself is returned—this is to align with API Platform’s structure and its pagination handling. Returning the Repository does not violate CQRS or DDD principles, which is why I accepted this approach. Future Considerations Using a read model would allow me to avoid this slightly unusual approach and remove pagination responsibility from the Repository, eliminating these oddities within the Domain. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 &lt;?php declare(strict_types=1); namespace App\Country\Domain\Repository; use App\Country\Domain\Entity\Country; use App\Shared\Domain\Repository\RepositoryInterface; /** * @extends RepositoryInterface&lt;Country&gt; */ interface CountryRepositoryInterface extends RepositoryInterface { public function ofName(string Sname): ?Country; public function add (Country Scountry): void; public function withName(string $name): self; public function sortName(): self; } This is what the Repository looks like. I will now show the Doctrine implementation. I won’t explain it, as it is not relevant to this article, but I believe it is important to show all the code for this section. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 &lt;?php declare(strict_types=1); namespace App\Country\Infrastructure\Doctrine\Repository; /** * @extends DoctrineRepository&lt;Country&gt; */ final class CountryDoctrineAdapter extends DoctrineRepository implements CountryAdapterInterface { private const string ENTITY_CLASS = Country::class; private const string ALIAS = 'country'; public function __construct( DocumentManager $documentManager, ) { parent::__construct($documentManager, self::ENTITY_CLASS); } #[\Override] public function ofName(string $name): ?Country { return $this-&gt;documentManager-&gt;getRepository(self::ENTITY_CLASS)-&gt;findOneBy(['name' =&gt; $name]); } #[\Override] public function add(Country $country): void { $this-&gt;documentManager-&gt;persist($country); $this-&gt;documentManager-&gt;flush(); } #[\Override] public function withName( string $name, ): self { return $this-&gt;filter(static function (Builder $qb) use ($name): void { $qb-&gt;field('name')-&gt;text($name); }); } #[\Override] public function sortName(): self { return $this-&gt;filter(static function (Builder $qb): void { $qb-&gt;sort('name', 'ASC'); }); } } This was a very in-depth article! I covered TDD as well as the creation of a Supporting Domain. I also introduced two new Domain use cases. However, I haven’t yet had the opportunity to discuss the Core Domain. That will be the focus of a future article, where I will talk about communication between Domains and the many mistakes I made on this topic.]]></summary></entry><entry xml:lang="en"><title type="html">Logbook of Learning Domain-Driven Design: Day 4</title><link href="https://huguesgobet.com/ddd-logbook/2025-01-27" rel="alternate" type="text/html" title="Logbook of Learning Domain-Driven Design: Day 4" /><published>2025-01-27T08:00:00+00:00</published><updated>2025-01-27T08:00:00+00:00</updated><id>https://huguesgobet.com/ddd-logbook/logbook-day-four</id><content type="html" xml:base="https://huguesgobet.com/ddd-logbook/2025-01-27"><![CDATA[<p>After three theory-focused articles – essential for laying a solid foundation –  today, I’m offering a concrete example: user authentication. This article slightly  diverges from <strong>Domain-Driven Design (DDD)</strong> to emphasize the implementation  and use of <strong>Hexagonal Architecture</strong> and <strong>CQRS</strong>. While I will briefly mention the <strong>User Entity</strong> the focus will primarily be on practical aspects. If you need a refresher on these concepts, you can refer to the <a href="https://huguesgobet.com/ddd-logbook/2024-12-30">Day 2</a> article that provides a detailed explanation.</p>

<h2 id="firebase-simplifying-user-authentication">Firebase: Simplifying User Authentication</h2>

<p><strong><em>Firebase</em></strong> is a platform developed by Google that offers a suite of tools and services to streamline the development, management, and scalability of web and mobile applications. In our case, it acts as an identity provider, simplifying the implementation of an authentication system. This allows for features like Google or Apple login without requiring the storage of credentials or passwords.</p>

<h3 id="the-general-process-is-as-follows">The general process is as follows:</h3>

<ol>
  <li>Firebase manages authentication and returns a <strong><em>JWT</em></strong> (JSON Web Token).</li>
  <li>This <strong><em>JWT</em></strong>, a standard for securely exchanging information between a client and server, contains user data such as their name and email.</li>
  <li>For each request, the <strong><em>JWT</em></strong> is used to verify the user’s identity without needing to contact Firebase again. Essentially, Firebase handles the login process and issues the JWT for subsequent verification.</li>
</ol>

<p><img src="/assets/images/2025-01-27/use-case.png" alt="Use case to be authenticated" /></p>

<h3 id="future-outlook">Future Outlook</h3>

<p>Starting a <strong>DDD</strong> project by focusing on authentication is a mistake, as it shifts focus away from the <strong>core business domain</strong>. The goal of <strong>DDD</strong> and <strong>Hexagonal Architecture</strong> is to prioritize the business domain, leaving technical considerations aside during the initial stages.</p>

<p>However, once <strong><em>Firebase</em></strong> is integrated, validating <strong><em>JWT</em></strong>s becomes essential to extract information such as the user’s name and email.</p>

<p>This is achieved using <strong><em>Symfony</em></strong> authentication by creating a <strong><em>Custom Authenticator</em></strong> tailored to Firebase. While Symfony provides several built-in Authenticators, none fully meet our specific requirements. Since the code for this authentication process is not directly relevant to the main theme of this series, I will not go into further detail.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
</pre></td><td class="code"><pre><span class="k">try</span> <span class="p">{</span>
    <span class="nc">SuserAuthenticated</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">commandBus</span><span class="o">-&gt;</span><span class="nf">dispatch</span> <span class="p">(</span>
        <span class="k">new</span> <span class="nc">AuthenticateUserCommand</span><span class="p">(</span>
            <span class="nc">Stoken</span><span class="p">,</span>
            <span class="nc">SproviderId</span><span class="p">,</span>
        <span class="p">),</span>
    <span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">InvalidTokenException</span> <span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">logger</span><span class="o">-&gt;</span><span class="nf">error</span><span class="p">(</span>
        <span class="s1">'Log in user: Invalid token'</span><span class="p">,</span>
        <span class="p">[</span>
            <span class="s1">'exception'</span> <span class="o">=&gt;</span> <span class="nv">$exception</span><span class="p">,</span>
            <span class="s1">'provider'</span> <span class="o">=&gt;</span> <span class="nv">$providerId</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">);</span>

    <span class="k">throw</span> <span class="k">new</span> <span class="nc">AuthenticationException</span><span class="p">(</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="nf">getMessage</span><span class="p">());</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">ExpiredTokenException</span> <span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">logger</span><span class="o">-&gt;</span><span class="nf">error</span><span class="p">(</span>
        <span class="s1">'Log in user: Token expired'</span><span class="p">,</span>
        <span class="p">[</span>
            <span class="s1">'exception'</span> <span class="o">=&gt;</span> <span class="nv">$exception</span><span class="p">,</span>
            <span class="s1">'provider'</span> <span class="o">=&gt;</span> <span class="nv">$providerId</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">);</span>

    <span class="k">throw</span> <span class="k">new</span> <span class="nc">AuthenticationException</span><span class="p">(</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="nf">getMessage</span><span class="p">());</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">InvalidPayloadException</span> <span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">logger</span><span class="o">-&gt;</span><span class="nf">error</span><span class="p">(</span>
        <span class="s1">'Log in user: Invalid payload'</span><span class="p">,</span>
        <span class="p">[</span>
            <span class="s1">'exception'</span> <span class="o">=&gt;</span> <span class="nv">$exception</span><span class="p">,</span>
            <span class="s1">'provider'</span> <span class="o">=&gt;</span> <span class="nv">$providerId</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">);</span>

    <span class="k">throw</span> <span class="k">new</span> <span class="nc">AuthenticationException</span><span class="p">(</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="nf">getMessage</span><span class="p">());</span>
<span class="p">}</span>

<span class="nc">Suser</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queryBus</span><span class="o">-&gt;</span><span class="nf">ask</span><span class="p">(</span>
    <span class="k">new</span> <span class="nc">GetUserQuery</span><span class="p">(</span>
        <span class="nc">SuserAuthenticated</span><span class="err">→</span><span class="nf">email</span><span class="p">(),</span>
    <span class="p">)</span>
<span class="p">);</span>

<span class="nc">Semail</span> <span class="o">=</span> <span class="nc">Suser</span><span class="err">→</span><span class="nf">email</span><span class="p">();</span>

<span class="k">return</span> <span class="k">new</span> <span class="nc">SelfValidatingPassport</span><span class="p">(</span>
    <span class="k">new</span> <span class="nc">UserBadge</span><span class="p">(</span>
        <span class="nv">$email</span><span class="p">,</span>
        <span class="k">fn</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nc">Sthis</span><span class="o">-&gt;</span><span class="nf">loadUser</span> <span class="p">(</span><span class="nc">Semail</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="the-commandbus-orchestrating-commands">The CommandBus: Orchestrating Commands</h2>

<p>System entry relies on a <strong>Primary Adapter</strong> that dispatches a <strong>CQRS</strong> <code class="language-plaintext highlighter-rouge">AuthenticiteUserCommand</code> via the <strong>CommandBus</strong>. Once the command is executed to authenticate the user, a <strong>Query</strong> <code class="language-plaintext highlighter-rouge">GetUserQuery</code> is used to retrieve their data. It is worth noting that the Authenticator is part of the <strong>Infrastructure</strong> layer.</p>

<p>The <strong>CommandBus</strong> operates as a centralized system:</p>

<ul>
  <li>It receives a command as a parameter.</li>
  <li>It identifies the appropriate <strong>CommandHandler</strong>.</li>
  <li>It executes the Handle method.</li>
  <li>It returns the result of the operation.</li>
</ul>

<p>To adhere to <strong>dependency inversion</strong> principles and the layering of <strong>Hexagonal Architecture</strong>, we create a <code class="language-plaintext highlighter-rouge">CommandBusInterface</code> in the <strong>Application</strong> layer. The implementation of the <strong>CommandBus</strong>, utilizing <strong><em>Messenger</em></strong> (a Symfony component for managing a Bus), resides in the <strong>Infrastructure</strong> layer.</p>

<p><strong>CommandBusInterface</strong></p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">TegCorp\SharedKernelBundle\Application\Command</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">CommandBusInterface</span>
<span class="p">{</span>
    <span class="cd">/**
     * @template T
     *
     * @param CommandInterface&lt;T&gt; $command
     *
     * @return T
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">dispatch</span><span class="p">(</span><span class="kt">CommandInterface</span> <span class="nv">$command</span><span class="p">):</span> <span class="kt">mixed</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><strong>Implementation of CommandBus Using Messenger</strong></p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="k">final</span> <span class="kd">class</span> <span class="nc">MessengerCommandBus</span> <span class="kd">implements</span> <span class="nc">CommandBusInterface</span>
<span class="p">{</span>
    <span class="kn">use</span> <span class="nc">HandleTrait</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">MessageBusInterface</span> <span class="nv">$commandBus</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">messageBus</span> <span class="o">=</span> <span class="nv">$commandBus</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @template T
     *
     * @param CommandInterface&lt;T&gt; $command
     *
     * @return T
     */</span>
    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">dispatch</span><span class="p">(</span><span class="kt">CommandInterface</span> <span class="nv">$command</span><span class="p">):</span> <span class="kt">mixed</span>
    <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="cm">/* @var T */</span>
            <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">handle</span><span class="p">(</span><span class="nv">$command</span><span class="p">);</span>

            <span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">HandlerFailedException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$exception</span> <span class="o">=</span> <span class="nb">current</span><span class="p">(</span><span class="nv">$e</span><span class="o">-&gt;</span><span class="nf">getWrappedExceptions</span><span class="p">()))</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="nv">$exception</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">throw</span> <span class="nv">$e</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="future-outlook-1">Future Outlook</h3>

<p>Transaction management should be incorporated.</p>

<h2 id="command-and-commandhandler">Command and CommandHandler</h2>

<p>A <strong>Command</strong> is a simple, immutable object that contains the necessary properties to execute a change in the system. To comply with the interface contract defined in the CommandBus, an <strong>Interface</strong> for Commands must first be created.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">TegCorp\SharedKernelBundle\Application\Command</span><span class="p">;</span>

<span class="cd">/**
 * @template T
 */</span>
<span class="kd">interface</span> <span class="nc">CommandInterface</span>
<span class="p">{</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This Interface enables the <strong>CommandHandler</strong> to provide feedback using <strong><em>PHPStan Generics</em></strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Security\Application\Command</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Security\Domain\Service\AuthenticateUserFromProviderInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\ValueObject\UserAuthenticated</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Application\Command\CommandInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Infrastructure\Webmozart\Assert</span><span class="p">;</span>

<span class="cd">/**
 * @implements CommandInterface&lt;UserAuthenticated&gt;
 */</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">AuthenticateUserCommand</span> <span class="kd">implements</span> <span class="nc">CommandInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="nv">$providerId</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$token</span><span class="p">,</span>
        <span class="kt">string</span> <span class="nv">$providerId</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nc">Assert</span><span class="o">::</span><span class="nf">inArray</span><span class="p">(</span>
            <span class="nv">$providerId</span><span class="p">,</span>
            <span class="p">[</span>
                <span class="nc">AuthenticateUserFromProviderInterface</span><span class="o">::</span><span class="no">IDENTITY_PROVIDER_APPLE</span><span class="p">,</span>
                <span class="nc">AuthenticateUserFromProviderInterface</span><span class="o">::</span><span class="no">IDENTITY_PROVIDER_GOOGLE</span><span class="p">,</span>
                <span class="nc">AuthenticateUserFromProviderInterface</span><span class="o">::</span><span class="no">IDENTITY_PROVIDER_FIREBASE</span><span class="p">,</span>
            <span class="p">],</span>
        <span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">providerId</span> <span class="o">=</span> <span class="nv">$providerId</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This <strong>Command</strong> takes as parameters a <strong><em>JWT</em></strong> provided by <strong><em>Firebase</em></strong> and a provider identifier, which indicates the identity provider (e.g., Google, Facebook). The provider ID is validated against the supported values in our system (Google, Apple, and Firebase). Ensuring the consistency of data entering the Domain is crucial to prevent unexpected behavior.</p>

<p>Next comes the <strong>CommandHandler</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Security\Application\Command</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Security\Domain\Entity\User</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\Exception\InvalidTokenException</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\Repository\UserRepositoryInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\Service\AuthenticateUser</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\ValueObject\UserAuthenticated</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\ValueObject\UserEmail</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Application\Command\AsCommandHandler</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Domain\Service\DomainEventDispatcherInterface</span><span class="p">;</span>

<span class="na">#[AsCommandHandler]</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">AuthenticateUserCommandHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">AuthenticateUser</span> <span class="nv">$authenticateUser</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">DomainEventDispatcherInterface</span> <span class="nv">$dispatcher</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">UserRepositoryInterface</span> <span class="nv">$userRepository</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @throws InvalidTokenException
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">AuthenticateUserCommand</span> <span class="nv">$authenticateUserCommand</span><span class="p">):</span> <span class="kt">UserAuthenticated</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$authenticateUserCommand</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">===</span> <span class="s1">''</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nc">InvalidTokenException</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">match</span> <span class="p">(</span><span class="nv">$providerId</span><span class="p">)</span> <span class="p">{</span>
            <span class="nc">AuthenticateUserFromProviderInterface</span><span class="o">::</span><span class="no">IDENTITY_PROVIDER_APPLE</span> <span class="o">=&gt;</span> <span class="nv">$userAuthenticated</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">authenticateUserFromProvider</span><span class="o">-&gt;</span><span class="nf">authenticateUserWithApple</span><span class="p">(</span><span class="nv">$token</span><span class="p">),</span>
            <span class="nc">AuthenticateUserFromProviderInterface</span><span class="o">::</span><span class="no">IDENTITY_PROVIDER_GOOGLE</span> <span class="o">=&gt;</span> <span class="nv">$userAuthenticated</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">authenticateUserFromProvider</span><span class="o">-&gt;</span><span class="nf">authenticateUserWithGoogle</span><span class="p">(</span><span class="nv">$token</span><span class="p">),</span>
            <span class="nc">AuthenticateUserFromProviderInterface</span><span class="o">::</span><span class="no">IDENTITY_PROVIDER_FIREBASE</span> <span class="o">=&gt;</span> <span class="nv">$userAuthenticated</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">authenticateUserFromProvider</span><span class="o">-&gt;</span><span class="nf">authenticateUserWithFirebase</span><span class="p">(</span><span class="nv">$token</span><span class="p">),</span>
            <span class="k">default</span> <span class="o">=&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">IdentityProviderDoesntExistException</span><span class="p">(</span><span class="s1">'Invalid provider id'</span><span class="p">),</span>
        <span class="p">};</span>

        <span class="k">return</span> <span class="nv">$userAuthenticated</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>By leveraging dependency inversion, an interface for the <code class="language-plaintext highlighter-rouge">AuthenticateUserInterface</code> service – located in the <strong>Application</strong> layer – is injected into the <strong>CommandHandler</strong>, which is also in the <strong>Application</strong> layer. The implementation, however, is located in the <strong>Infrastructure</strong> layer since it depends on an external service.</p>

<h3 id="future-outlook-2">Future Outlook</h3>

<p><strong><em>JWT</em></strong> validation should be handled both within the <strong>Command</strong> and at the provider level to ensure robust error management. Consider using the <strong>Strategy</strong> pattern to avoid match-based logic.</p>

<p>In this <strong>CommandHandler</strong>, the user is authenticated by invoking the appropriate method for the identified provider, and the authenticated user is then returned.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Security\Domain\ValueObject</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">UserAuthenticated</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="kt">UserEmail</span> <span class="nv">$email</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$email</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">email</span> <span class="o">=</span> <span class="nc">UserEmail</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="nv">$email</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">email</span><span class="p">():</span> <span class="kt">UserEmail</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">email</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="querybus-and-queryhandler">QueryBus and QueryHandler</h2>

<p>Once the user is authenticated, the <strong>QueryBus</strong> is utilized to retrieve their business data. <strong>Queries</strong> are read-only operations used to retrieve information without modifying the system. Here too, a <code class="language-plaintext highlighter-rouge">QueryBusInterface</code> is defined in the <strong>Application</strong> layer, while its implementation using <strong><em>Messenger</em></strong> is situated in the <strong>Infrastructure</strong> layer.</p>

<p>To adhere to dependency inversion and the layering principles of <strong>Hexagonal Architecture</strong>, an interface <code class="language-plaintext highlighter-rouge">QueryBusInterface</code> is created in the <strong>Application</strong> layer. The implementation of <code class="language-plaintext highlighter-rouge">QueryBus</code> using <strong><em>Messenger</em></strong> resides in the <strong>Infrastructure</strong> layer.</p>

<p><strong>Interface QueryBusInterface</strong></p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">TegCorp\SharedKernelBundle\Application\Query</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">QueryBusInterface</span>
<span class="p">{</span>
    <span class="cd">/**
     * @template T
     *
     * @param QueryInterface&lt;T&gt; $query
     *
     * @return T
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">ask</span><span class="p">(</span><span class="kt">QueryInterface</span> <span class="nv">$query</span><span class="p">):</span> <span class="kt">mixed</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><strong>Implementation of MessengerQueryBus</strong></p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="k">final</span> <span class="kd">class</span> <span class="nc">MessengerQueryBus</span> <span class="kd">implements</span> <span class="nc">QueryBusInterface</span>
<span class="p">{</span>
    <span class="kn">use</span> <span class="nc">HandleTrait</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">MessageBusInterface</span> <span class="nv">$queryBus</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">messageBus</span> <span class="o">=</span> <span class="nv">$queryBus</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @template T
     *
     * @param QueryInterface&lt;T&gt; $query
     *
     * @return T
     */</span>
    <span class="na">#[\Override]</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">ask</span><span class="p">(</span><span class="kt">QueryInterface</span> <span class="nv">$query</span><span class="p">):</span> <span class="kt">mixed</span>
    <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="cm">/* @var T */</span>
            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">handle</span><span class="p">(</span><span class="nv">$query</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">HandlerFailedException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$exception</span> <span class="o">=</span> <span class="nb">current</span><span class="p">(</span><span class="nv">$e</span><span class="o">-&gt;</span><span class="nf">getWrappedExceptions</span><span class="p">()))</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="nv">$exception</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">throw</span> <span class="nv">$e</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="implementation-of-the-query-and-queryhandler">Implementation of the Query and QueryHandler</h3>

<p>After defining the QueryBus interface and implementing its functionality, the next step is to implement the <strong>Query</strong> and <strong>QueryHandler</strong>. To meet the QueryBus interface contract, an interface for <strong>Queries</strong> is created.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">TegCorp\SharedKernelBundle\Application\Query</span><span class="p">;</span>

<span class="cd">/**
 * @template T
 */</span>
<span class="kd">interface</span> <span class="nc">QueryInterface</span>
<span class="p">{</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This Interface allows the <strong>QueryHandler</strong> to provide feedback using <strong>PHPStan Generics</strong>.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Security\Application\Query</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Security\Application\ReadModel\User</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Application\Query\QueryInterface</span><span class="p">;</span>

<span class="cd">/**
 * @implements QueryInterface&lt;User&gt;
 */</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">GetUserQuery</span> <span class="kd">implements</span> <span class="nc">QueryInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$email</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The <strong>Query</strong> takes the user’s identifier as input and returns a <strong>User Entity</strong>. Next comes the <strong>QueryHandler</strong>:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Security\Application\Query</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Security\Application\Adapter\UserAdapterInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Application\ReadModel\User</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\Exception\UserNotFoundException</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Application\Query\AsQueryHandler</span><span class="p">;</span>

<span class="na">#[AsQueryHandler]</span>
<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">GetUserQueryHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">UserAdapterInterface</span> <span class="nv">$userAdapter</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @throws UserNotFoundException
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">GetUserQuery</span> <span class="nv">$getUserQuery</span><span class="p">):</span> <span class="kt">User</span>
    <span class="p">{</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">userAdapter</span><span class="o">-&gt;</span><span class="nf">ofId</span><span class="p">(</span><span class="nv">$getUserQuery</span><span class="o">-&gt;</span><span class="n">email</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$user</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nc">UserNotFoundException</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$user</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Dependency inversion is once again applied by injecting into the <strong>QueryHandler</strong> (from the <strong>Application</strong> layer) an interface for a repository, <strong><em>UserRepositoryInterface</em></strong>, located in the <strong>Domain</strong> layer. The implementation, as always, resides in the <strong>Infrastructure</strong> layer since it depends on the database in use.</p>

<p>Dependency inversion allows flexibility in choosing where to store information and enables switching databases as needed.</p>

<h3 id="future-outlook-3">Future Outlook</h3>

<p>To fully implement <strong>CQRS</strong> principles, the data should be retrieved from the <strong>Read Model</strong>. This will be addressed later.</p>

<p>This <strong>QueryHandler</strong> returns a <strong>User Entity</strong>:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App\Security\Domain\Entity</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Security\Domain\Event\UserCreated</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\ValueObject\UserEmail</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Security\Domain\ValueObject\UserId</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Doctrine\ORM\Mapping</span> <span class="k">as</span> <span class="no">ORM</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Domain\Entity\EntityDomainEventTrait</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">TegCorp\SharedKernelBundle\Domain\Entity\EntityWithDomainEventInterface</span><span class="p">;</span>

<span class="na">#[ORM\Entity]</span>
<span class="k">final</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">implements</span> <span class="nc">EntityWithDomainEventInterface</span>
<span class="p">{</span>
    <span class="kn">use</span> <span class="nc">EntityDomainEventTrait</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="na">#[ORM\Embedded(columnPrefix: false)]</span>
        <span class="k">private</span> <span class="kt">UserId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="na">#[ORM\Embedded(columnPrefix: false)]</span>
        <span class="k">private</span> <span class="kt">UserEmail</span> <span class="nv">$email</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">create</span><span class="p">(</span>
        <span class="kt">UserId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="kt">UserEmail</span> <span class="nv">$email</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">self</span> <span class="p">{</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">self</span><span class="p">(</span>
            <span class="nv">$id</span><span class="p">,</span>
            <span class="nv">$email</span><span class="p">,</span>
        <span class="p">);</span>

        <span class="nv">$user</span><span class="o">::</span><span class="nf">recordEvent</span><span class="p">(</span>
            <span class="k">new</span> <span class="nc">UserCreated</span><span class="p">(</span>
                <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">id</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
                <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">email</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
            <span class="p">),</span>
        <span class="p">);</span>

        <span class="k">return</span> <span class="nv">$user</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">UserId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">email</span><span class="p">():</span> <span class="kt">UserEmail</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">email</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Within this <strong>Entity</strong>, several previously discussed concepts are evident: <strong>Value Objects</strong>, <strong>Events</strong>, <strong>Factories</strong>, etc.</p>

<h3 id="future-outlook-4">Future Outlook</h3>

<p>Currently, <strong>Doctrine Attributes</strong> can remain within the <strong>Entity</strong>, but this is not recommended. This approach forces compromises between <strong>DDD</strong> and <strong>ORM</strong>, which is discouraged, particularly in the <strong>Domain</strong> layer.</p>

<p>After creating this <strong><em>Authenticator</em></strong>, the <strong><em>JWT</em></strong> sent with each request is authenticated through this class. This must be done for every request, as <strong><em>REST API</em></strong> calls are stateless (no state is preserved between requests).</p>

<p>In this article, I detailed the implementation of a feature from start to finish, starting from the <strong>Infrastructure</strong> layer and working up to the <strong>Domain</strong> layer. To conclude, this feature was designed entirely in reverse. In <strong>DDD</strong>, the process should start with modeling <strong>Entities</strong> and then proceed to implementing <strong>Interfaces</strong> defined in the <strong>Domain</strong> layer. This method also facilitates <strong>Test-Driven Development (TDD)</strong> for Entities.</p>

<p>In the next article, I will delve deeper into the structure of the <strong>User Entity</strong> and its methods, focusing on its creation.</p>]]></content><author><name>Hugues Gobet</name><email>hugues.gobet@gmail.com</email></author><category term="ddd-logbook" /><summary type="html"><![CDATA[After three theory-focused articles – essential for laying a solid foundation – today, I’m offering a concrete example: user authentication. This article slightly diverges from Domain-Driven Design (DDD) to emphasize the implementation and use of Hexagonal Architecture and CQRS. While I will briefly mention the User Entity the focus will primarily be on practical aspects. If you need a refresher on these concepts, you can refer to the Day 2 article that provides a detailed explanation. Firebase: Simplifying User Authentication Firebase is a platform developed by Google that offers a suite of tools and services to streamline the development, management, and scalability of web and mobile applications. In our case, it acts as an identity provider, simplifying the implementation of an authentication system. This allows for features like Google or Apple login without requiring the storage of credentials or passwords. The general process is as follows: Firebase manages authentication and returns a JWT (JSON Web Token). This JWT, a standard for securely exchanging information between a client and server, contains user data such as their name and email. For each request, the JWT is used to verify the user’s identity without needing to contact Firebase again. Essentially, Firebase handles the login process and issues the JWT for subsequent verification. Future Outlook Starting a DDD project by focusing on authentication is a mistake, as it shifts focus away from the core business domain. The goal of DDD and Hexagonal Architecture is to prioritize the business domain, leaving technical considerations aside during the initial stages. However, once Firebase is integrated, validating JWTs becomes essential to extract information such as the user’s name and email. This is achieved using Symfony authentication by creating a Custom Authenticator tailored to Firebase. While Symfony provides several built-in Authenticators, none fully meet our specific requirements. Since the code for this authentication process is not directly relevant to the main theme of this series, I will not go into further detail. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 try { SuserAuthenticated = $this-&gt;commandBus-&gt;dispatch ( new AuthenticateUserCommand( Stoken, SproviderId, ), ); } catch (InvalidTokenException $exception) { $this-&gt;logger-&gt;error( 'Log in user: Invalid token', [ 'exception' =&gt; $exception, 'provider' =&gt; $providerId, ], ); throw new AuthenticationException($exception-&gt;getMessage()); } catch (ExpiredTokenException $exception) { $this-&gt;logger-&gt;error( 'Log in user: Token expired', [ 'exception' =&gt; $exception, 'provider' =&gt; $providerId, ], ); throw new AuthenticationException($exception-&gt;getMessage()); } catch (InvalidPayloadException $exception) { $this-&gt;logger-&gt;error( 'Log in user: Invalid payload', [ 'exception' =&gt; $exception, 'provider' =&gt; $providerId, ], ); throw new AuthenticationException($exception-&gt;getMessage()); } Suser = $this-&gt;queryBus-&gt;ask( new GetUserQuery( SuserAuthenticated→email(), ) ); Semail = Suser→email(); return new SelfValidatingPassport( new UserBadge( $email, fn () =&gt; Sthis-&gt;loadUser (Semail), ), ); The CommandBus: Orchestrating Commands System entry relies on a Primary Adapter that dispatches a CQRS AuthenticiteUserCommand via the CommandBus. Once the command is executed to authenticate the user, a Query GetUserQuery is used to retrieve their data. It is worth noting that the Authenticator is part of the Infrastructure layer. The CommandBus operates as a centralized system: It receives a command as a parameter. It identifies the appropriate CommandHandler. It executes the Handle method. It returns the result of the operation. To adhere to dependency inversion principles and the layering of Hexagonal Architecture, we create a CommandBusInterface in the Application layer. The implementation of the CommandBus, utilizing Messenger (a Symfony component for managing a Bus), resides in the Infrastructure layer. CommandBusInterface 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &lt;?php declare(strict_types=1); namespace TegCorp\SharedKernelBundle\Application\Command; interface CommandBusInterface { /** * @template T * * @param CommandInterface&lt;T&gt; $command * * @return T */ public function dispatch(CommandInterface $command): mixed; } Implementation of CommandBus Using Messenger 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 final class MessengerCommandBus implements CommandBusInterface { use HandleTrait; public function __construct( MessageBusInterface $commandBus, ) { $this-&gt;messageBus = $commandBus; } /** * @template T * * @param CommandInterface&lt;T&gt; $command * * @return T */ #[\Override] public function dispatch(CommandInterface $command): mixed { try { /* @var T */ $result = $this-&gt;handle($command); return $result; } catch (HandlerFailedException $e) { if ($exception = current($e-&gt;getWrappedExceptions())) { throw $exception; } throw $e; } } } Future Outlook Transaction management should be incorporated. Command and CommandHandler A Command is a simple, immutable object that contains the necessary properties to execute a change in the system. To comply with the interface contract defined in the CommandBus, an Interface for Commands must first be created. 1 2 3 4 5 6 7 8 9 10 11 12 &lt;?php declare(strict_types=1); namespace TegCorp\SharedKernelBundle\Application\Command; /** * @template T */ interface CommandInterface { } This Interface enables the CommandHandler to provide feedback using PHPStan Generics. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 &lt;?php declare(strict_types=1); namespace App\Security\Application\Command; use App\Security\Domain\Service\AuthenticateUserFromProviderInterface; use App\Security\Domain\ValueObject\UserAuthenticated; use TegCorp\SharedKernelBundle\Application\Command\CommandInterface; use TegCorp\SharedKernelBundle\Infrastructure\Webmozart\Assert; /** * @implements CommandInterface&lt;UserAuthenticated&gt; */ final readonly class AuthenticateUserCommand implements CommandInterface { public string $providerId; public function __construct( public string $token, string $providerId, ) { Assert::inArray( $providerId, [ AuthenticateUserFromProviderInterface::IDENTITY_PROVIDER_APPLE, AuthenticateUserFromProviderInterface::IDENTITY_PROVIDER_GOOGLE, AuthenticateUserFromProviderInterface::IDENTITY_PROVIDER_FIREBASE, ], ); $this-&gt;providerId = $providerId; } } This Command takes as parameters a JWT provided by Firebase and a provider identifier, which indicates the identity provider (e.g., Google, Facebook). The provider ID is validated against the supported values in our system (Google, Apple, and Firebase). Ensuring the consistency of data entering the Domain is crucial to prevent unexpected behavior. Next comes the CommandHandler. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 &lt;?php declare(strict_types=1); namespace App\Security\Application\Command; use App\Security\Domain\Entity\User; use App\Security\Domain\Exception\InvalidTokenException; use App\Security\Domain\Repository\UserRepositoryInterface; use App\Security\Domain\Service\AuthenticateUser; use App\Security\Domain\ValueObject\UserAuthenticated; use App\Security\Domain\ValueObject\UserEmail; use TegCorp\SharedKernelBundle\Application\Command\AsCommandHandler; use TegCorp\SharedKernelBundle\Domain\Service\DomainEventDispatcherInterface; #[AsCommandHandler] final readonly class AuthenticateUserCommandHandler { public function __construct( private AuthenticateUser $authenticateUser, private DomainEventDispatcherInterface $dispatcher, private UserRepositoryInterface $userRepository, ) { } /** * @throws InvalidTokenException */ public function __invoke(AuthenticateUserCommand $authenticateUserCommand): UserAuthenticated { if ($authenticateUserCommand-&gt;token === '') { throw new InvalidTokenException(); } match ($providerId) { AuthenticateUserFromProviderInterface::IDENTITY_PROVIDER_APPLE =&gt; $userAuthenticated = $this-&gt;authenticateUserFromProvider-&gt;authenticateUserWithApple($token), AuthenticateUserFromProviderInterface::IDENTITY_PROVIDER_GOOGLE =&gt; $userAuthenticated = $this-&gt;authenticateUserFromProvider-&gt;authenticateUserWithGoogle($token), AuthenticateUserFromProviderInterface::IDENTITY_PROVIDER_FIREBASE =&gt; $userAuthenticated = $this-&gt;authenticateUserFromProvider-&gt;authenticateUserWithFirebase($token), default =&gt; throw new IdentityProviderDoesntExistException('Invalid provider id'), }; return $userAuthenticated; } } By leveraging dependency inversion, an interface for the AuthenticateUserInterface service – located in the Application layer – is injected into the CommandHandler, which is also in the Application layer. The implementation, however, is located in the Infrastructure layer since it depends on an external service. Future Outlook JWT validation should be handled both within the Command and at the provider level to ensure robust error management. Consider using the Strategy pattern to avoid match-based logic. In this CommandHandler, the user is authenticated by invoking the appropriate method for the identified provider, and the authenticated user is then returned. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 &lt;?php declare(strict_types=1); namespace App\Security\Domain\ValueObject; final readonly class UserAuthenticated { private UserEmail $email; public function __construct( string $email, ) { $this-&gt;email = UserEmail::fromString($email); } public function email(): UserEmail { return $this-&gt;email; } } QueryBus and QueryHandler Once the user is authenticated, the QueryBus is utilized to retrieve their business data. Queries are read-only operations used to retrieve information without modifying the system. Here too, a QueryBusInterface is defined in the Application layer, while its implementation using Messenger is situated in the Infrastructure layer. To adhere to dependency inversion and the layering principles of Hexagonal Architecture, an interface QueryBusInterface is created in the Application layer. The implementation of QueryBus using Messenger resides in the Infrastructure layer. Interface QueryBusInterface 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &lt;?php declare(strict_types=1); namespace TegCorp\SharedKernelBundle\Application\Query; interface QueryBusInterface { /** * @template T * * @param QueryInterface&lt;T&gt; $query * * @return T */ public function ask(QueryInterface $query): mixed; } Implementation of MessengerQueryBus 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 final class MessengerQueryBus implements QueryBusInterface { use HandleTrait; public function __construct(MessageBusInterface $queryBus) { $this-&gt;messageBus = $queryBus; } /** * @template T * * @param QueryInterface&lt;T&gt; $query * * @return T */ #[\Override] public function ask(QueryInterface $query): mixed { try { /* @var T */ return $this-&gt;handle($query); } catch (HandlerFailedException $e) { if ($exception = current($e-&gt;getWrappedExceptions())) { throw $exception; } throw $e; } } } Implementation of the Query and QueryHandler After defining the QueryBus interface and implementing its functionality, the next step is to implement the Query and QueryHandler. To meet the QueryBus interface contract, an interface for Queries is created. 1 2 3 4 5 6 7 8 9 10 11 12 &lt;?php declare(strict_types=1); namespace TegCorp\SharedKernelBundle\Application\Query; /** * @template T */ interface QueryInterface { } This Interface allows the QueryHandler to provide feedback using PHPStan Generics. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 &lt;?php declare(strict_types=1); namespace App\Security\Application\Query; use App\Security\Application\ReadModel\User; use TegCorp\SharedKernelBundle\Application\Query\QueryInterface; /** * @implements QueryInterface&lt;User&gt; */ final readonly class GetUserQuery implements QueryInterface { public function __construct( public string $email, ) { } } The Query takes the user’s identifier as input and returns a User Entity. Next comes the QueryHandler: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 &lt;?php declare(strict_types=1); namespace App\Security\Application\Query; use App\Security\Application\Adapter\UserAdapterInterface; use App\Security\Application\ReadModel\User; use App\Security\Domain\Exception\UserNotFoundException; use TegCorp\SharedKernelBundle\Application\Query\AsQueryHandler; #[AsQueryHandler] final readonly class GetUserQueryHandler { public function __construct( private UserAdapterInterface $userAdapter, ) { } /** * @throws UserNotFoundException */ public function __invoke(GetUserQuery $getUserQuery): User { $user = $this-&gt;userAdapter-&gt;ofId($getUserQuery-&gt;email); if ($user === null) { throw new UserNotFoundException(); } return $user; } } Dependency inversion is once again applied by injecting into the QueryHandler (from the Application layer) an interface for a repository, UserRepositoryInterface, located in the Domain layer. The implementation, as always, resides in the Infrastructure layer since it depends on the database in use. Dependency inversion allows flexibility in choosing where to store information and enables switching databases as needed. Future Outlook To fully implement CQRS principles, the data should be retrieved from the Read Model. This will be addressed later. This QueryHandler returns a User Entity: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 &lt;?php declare(strict_types=1); namespace App\Security\Domain\Entity; use App\Security\Domain\Event\UserCreated; use App\Security\Domain\ValueObject\UserEmail; use App\Security\Domain\ValueObject\UserId; use Doctrine\ORM\Mapping as ORM; use TegCorp\SharedKernelBundle\Domain\Entity\EntityDomainEventTrait; use TegCorp\SharedKernelBundle\Domain\Entity\EntityWithDomainEventInterface; #[ORM\Entity] final class User implements EntityWithDomainEventInterface { use EntityDomainEventTrait; public function __construct( #[ORM\Embedded(columnPrefix: false)] private UserId $id, #[ORM\Embedded(columnPrefix: false)] private UserEmail $email, ) { } public static function create( UserId $id, UserEmail $email, ): self { $user = new self( $id, $email, ); $user::recordEvent( new UserCreated( $user-&gt;id-&gt;value(), $user-&gt;email-&gt;value(), ), ); return $user; } public function id(): UserId { return $this-&gt;id; } public function email(): UserEmail { return $this-&gt;email; } } Within this Entity, several previously discussed concepts are evident: Value Objects, Events, Factories, etc. Future Outlook Currently, Doctrine Attributes can remain within the Entity, but this is not recommended. This approach forces compromises between DDD and ORM, which is discouraged, particularly in the Domain layer. After creating this Authenticator, the JWT sent with each request is authenticated through this class. This must be done for every request, as REST API calls are stateless (no state is preserved between requests). In this article, I detailed the implementation of a feature from start to finish, starting from the Infrastructure layer and working up to the Domain layer. To conclude, this feature was designed entirely in reverse. In DDD, the process should start with modeling Entities and then proceed to implementing Interfaces defined in the Domain layer. This method also facilitates Test-Driven Development (TDD) for Entities. In the next article, I will delve deeper into the structure of the User Entity and its methods, focusing on its creation.]]></summary></entry><entry xml:lang="en"><title type="html">Logbook of Learning Domain-Driven Design: Day 3</title><link href="https://huguesgobet.com/ddd-logbook/2025-01-13" rel="alternate" type="text/html" title="Logbook of Learning Domain-Driven Design: Day 3" /><published>2025-01-13T08:00:00+00:00</published><updated>2025-01-13T08:00:00+00:00</updated><id>https://huguesgobet.com/ddd-logbook/logbook-day-three</id><content type="html" xml:base="https://huguesgobet.com/ddd-logbook/2025-01-13"><![CDATA[<p>In the previous articles, I introduced the structure of the project and the fundamental concepts of DDD, such as <strong>Hexagonal Architecture</strong>, <strong>CQRS</strong>, and <strong>Ubiquitous Language</strong>. With these foundations laid, it’s time to dive into the heart of the subject: <strong>Domain-Driven Design</strong>. Here’s a series of essential definitions related to DDD. Although they are somewhat theoretical, they are necessary for a proper understanding of how it works.</p>

<h2 id="entity--aggregates">Entity / Aggregates</h2>

<h3 id="what-is-an-entity">What is an Entity?</h3>

<p>An <strong>Entity</strong> is a business object characterized by its unique identity, specific to the <strong>Domain</strong>. It can consist of <strong>Value Objects</strong> or primitive-type variables (integer, boolean, float…) and represents an evolving concept. <strong>Entities</strong> are often persisted in the database using their identifier.</p>

<p>In our system, for example, a <strong>Bottle Owner</strong> (the person who added the bottle to the system) is an <strong>Entity</strong> with their <strong>ID</strong> and <strong>email</strong>. I opted for <strong>Entities</strong> composed of <strong>Value Objects</strong>, except for booleans, to make the code more readable and domain-oriented. However, this does require writing more code.</p>

<h3 id="what-is-an-aggregate">What is an Aggregate?</h3>

<p>An <strong>Aggregate</strong> is a logical grouping of several <strong>Entities</strong> and <strong>Value Objects</strong> that form a coherent unit. It has a unique root (<strong>Aggregate Root</strong>), which is the main entity through which the <strong>Aggregate</strong> is referenced and manipulated. Any modification of the internal elements of the <strong>Aggregate</strong> must go through this root.</p>

<p>Since there isn’t an <strong>Aggregate</strong> example in my application, we could imagine a <strong>wine tasting event</strong> that would be linked to <strong>Invitation</strong> entities. The root would be the tasting, and the <strong>Invitation entities</strong> could only be modified through it.</p>

<p>The <strong>Aggregate</strong> could also include Value Objects, such as a tasting date or a bottle name.</p>

<p>If you’re using <strong><em>Doctrine</em></strong> to manage your databases, you may decide to put these attributes in the <strong>Entities</strong>. However, it’s important not to forget that the <strong>Domain</strong> code should be able to be extracted from your application and continue functioning in another context without depending on <strong><em>Doctrine</em></strong>. In our case, the <strong><em>Attributes</em></strong> will be recognized as comments in other languages.</p>

<h4 id="vision-of-the-future">Vision of the Future</h4>

<p>I do not recommend coupling <strong>Domain Entities</strong> with <strong><em>Doctrine</em></strong> Entities, as it can create modeling issues, violate separation of concerns, or cause difficulties during testing. I’ve made this mistake before, and I’ll explain it in more detail soon.</p>

<h2 id="validations-and-assertions">Validations and Assertions</h2>

<p>The data in an <strong>Entity</strong> must adhere to applicable business rules. For example, a <strong>Bottle</strong> with a price must be strictly greater than 0. These constraints (called <strong><em>Assertions</em></strong>) must be checked in a <strong>Factory</strong> that ensures the validity of the <strong>Entities</strong> upon creation.</p>

<p>All actions affecting an <strong>Entity</strong> should be represented by specific methods. For example, a <code class="language-plaintext highlighter-rouge">Create</code> method to create an <strong>Entity</strong>, or a <code class="language-plaintext highlighter-rouge">Taste</code> method to taste a bottle. These actions sometimes trigger <strong>Domain Events</strong>.</p>

<h2 id="value-object">Value Object</h2>

<p>Now, let’s look at what constitutes the <strong>Entities</strong> and <strong>Aggregates</strong>: the <strong>Value Objects</strong>.</p>

<p>A <strong>Value Object</strong> is a representation of a business concept. It must be <strong>immutable</strong>. These objects are defined by their attributes rather than by a unique identity. Their immutability ensures they don’t change state after creation.</p>

<p>In the previous example, the <strong>Bottle Name</strong> is a <strong>Value Object</strong>.</p>

<h2 id="factory">Factory</h2>

<p>Sometimes, creating an object doesn’t belong in the <strong>Entity</strong>, <strong>Value Object</strong>, or <strong>Aggregate</strong> itself. In such cases, we create <strong>Factories</strong>. The responsibility remains grounded in the <strong>Domain</strong>.</p>

<p>In this project, I decided to use <strong><em>static methods</em></strong> for my <strong>Factories</strong>. This approach was sufficient, but using a <strong>Service</strong> instead is also totally feasible.</p>

<h2 id="repository">Repository</h2>

<p>A <strong>Repository</strong> is an interface whose role is to store, read, and modify <strong>Aggregates</strong> and <strong>Entities</strong>. The storage location is abstracted away. One key rule: each <strong>Aggregate</strong> or <strong>Entity</strong> should have only one, and exactly one, <strong>Repository</strong>.</p>

<p>For example, we might have a <strong>Repository</strong> for Bottles, with an <code class="language-plaintext highlighter-rouge">Add</code> method to add and an <code class="language-plaintext highlighter-rouge">OfId</code> method to retrieve a <strong>Bottle</strong> by its <strong>ID</strong>.</p>

<p>I decided to let the <strong>Repository</strong> manage the identities of <strong>Entities</strong> and <strong>Aggregates</strong>. So, I added a <code class="language-plaintext highlighter-rouge">NextIdentity</code> method to the <strong>Repositories</strong>, which is responsible for generating <strong>IDs</strong>.</p>

<h2 id="domain-event">Domain Event</h2>

<p>A <strong>Domain Event</strong> represents a significant occurrence within the <strong>Domain</strong>, reflecting an important state change of an <strong>Entity</strong> or <strong>Aggregate</strong>. A <strong>Domain Event</strong> is <strong>immutable</strong>, identifiable by a unique <strong>ID</strong>, and timestamped to allow tracking and managing the order of <strong>Domain Events</strong>. It is used to notify other parts of the system, or other systems, of actions that have taken place.</p>

<p>For example, when the <code class="language-plaintext highlighter-rouge">Create</code> method is called on the <strong>Aggregate</strong>, a <strong>Domain Event</strong> is recorded that will be emitted after being stored in the system. This event must reflect the action taken by the system—in our case, <strong>BottleCreated</strong>.</p>

<h2 id="domain-service">Domain Service</h2>

<p>A <strong>Domain Service</strong> is a stateless component that encapsulates significant business logic not tied to a single <strong>Entity</strong>, <strong>Aggregate</strong>, or <strong>Value Object</strong>. It represents operations or business processes involving multiple <strong>Entities</strong> or <strong>Aggregates</strong> and operates solely on <strong>Domain</strong> objects.</p>

<p>I don’t have an example for <strong>Bottles</strong>. However, taking the wine tasting scenario again, we could create a <strong>Domain Service</strong> responsible for verifying if a participant can be invited (if they are not already invited, or if they aren’t the organizer of the tasting). The <strong>Domain Service</strong> could then create the invitations.</p>

<h2 id="shared-kernel">Shared Kernel</h2>

<p>The <strong>Shared Kernel</strong> is a part of the domain shared between two <strong>Bounded Contexts</strong>. This includes the associated code or database. The shared part has special status and should not be changed without consulting both teams maintaining the <strong>Bounded Contexts</strong>. Functional tests should be integrated into this part and run frequently.</p>

<h4 id="vision-of-the-future-1">Vision of the Future</h4>

<p>I had a misguided view of the <strong>Shared Kernel</strong>. I thought it could be used to share technical code. In fact, it is only meant to share <strong>business concepts</strong>.</p>

<p>That’s it for this very theoretical article. Next time, I would like to get into the specifics by sharing examples related to practical cases.</p>

<p><strong>See you soon!</strong></p>]]></content><author><name>Hugues Gobet</name><email>hugues.gobet@gmail.com</email></author><category term="ddd-logbook" /><summary type="html"><![CDATA[In the previous articles, I introduced the structure of the project and the fundamental concepts of DDD, such as Hexagonal Architecture, CQRS, and Ubiquitous Language. With these foundations laid, it’s time to dive into the heart of the subject: Domain-Driven Design. Here’s a series of essential definitions related to DDD. Although they are somewhat theoretical, they are necessary for a proper understanding of how it works. Entity / Aggregates What is an Entity? An Entity is a business object characterized by its unique identity, specific to the Domain. It can consist of Value Objects or primitive-type variables (integer, boolean, float…) and represents an evolving concept. Entities are often persisted in the database using their identifier. In our system, for example, a Bottle Owner (the person who added the bottle to the system) is an Entity with their ID and email. I opted for Entities composed of Value Objects, except for booleans, to make the code more readable and domain-oriented. However, this does require writing more code. What is an Aggregate? An Aggregate is a logical grouping of several Entities and Value Objects that form a coherent unit. It has a unique root (Aggregate Root), which is the main entity through which the Aggregate is referenced and manipulated. Any modification of the internal elements of the Aggregate must go through this root. Since there isn’t an Aggregate example in my application, we could imagine a wine tasting event that would be linked to Invitation entities. The root would be the tasting, and the Invitation entities could only be modified through it. The Aggregate could also include Value Objects, such as a tasting date or a bottle name. If you’re using Doctrine to manage your databases, you may decide to put these attributes in the Entities. However, it’s important not to forget that the Domain code should be able to be extracted from your application and continue functioning in another context without depending on Doctrine. In our case, the Attributes will be recognized as comments in other languages. Vision of the Future I do not recommend coupling Domain Entities with Doctrine Entities, as it can create modeling issues, violate separation of concerns, or cause difficulties during testing. I’ve made this mistake before, and I’ll explain it in more detail soon. Validations and Assertions The data in an Entity must adhere to applicable business rules. For example, a Bottle with a price must be strictly greater than 0. These constraints (called Assertions) must be checked in a Factory that ensures the validity of the Entities upon creation. All actions affecting an Entity should be represented by specific methods. For example, a Create method to create an Entity, or a Taste method to taste a bottle. These actions sometimes trigger Domain Events. Value Object Now, let’s look at what constitutes the Entities and Aggregates: the Value Objects. A Value Object is a representation of a business concept. It must be immutable. These objects are defined by their attributes rather than by a unique identity. Their immutability ensures they don’t change state after creation. In the previous example, the Bottle Name is a Value Object. Factory Sometimes, creating an object doesn’t belong in the Entity, Value Object, or Aggregate itself. In such cases, we create Factories. The responsibility remains grounded in the Domain. In this project, I decided to use static methods for my Factories. This approach was sufficient, but using a Service instead is also totally feasible. Repository A Repository is an interface whose role is to store, read, and modify Aggregates and Entities. The storage location is abstracted away. One key rule: each Aggregate or Entity should have only one, and exactly one, Repository. For example, we might have a Repository for Bottles, with an Add method to add and an OfId method to retrieve a Bottle by its ID. I decided to let the Repository manage the identities of Entities and Aggregates. So, I added a NextIdentity method to the Repositories, which is responsible for generating IDs. Domain Event A Domain Event represents a significant occurrence within the Domain, reflecting an important state change of an Entity or Aggregate. A Domain Event is immutable, identifiable by a unique ID, and timestamped to allow tracking and managing the order of Domain Events. It is used to notify other parts of the system, or other systems, of actions that have taken place. For example, when the Create method is called on the Aggregate, a Domain Event is recorded that will be emitted after being stored in the system. This event must reflect the action taken by the system—in our case, BottleCreated. Domain Service A Domain Service is a stateless component that encapsulates significant business logic not tied to a single Entity, Aggregate, or Value Object. It represents operations or business processes involving multiple Entities or Aggregates and operates solely on Domain objects. I don’t have an example for Bottles. However, taking the wine tasting scenario again, we could create a Domain Service responsible for verifying if a participant can be invited (if they are not already invited, or if they aren’t the organizer of the tasting). The Domain Service could then create the invitations. Shared Kernel The Shared Kernel is a part of the domain shared between two Bounded Contexts. This includes the associated code or database. The shared part has special status and should not be changed without consulting both teams maintaining the Bounded Contexts. Functional tests should be integrated into this part and run frequently. Vision of the Future I had a misguided view of the Shared Kernel. I thought it could be used to share technical code. In fact, it is only meant to share business concepts. That’s it for this very theoretical article. Next time, I would like to get into the specifics by sharing examples related to practical cases. See you soon!]]></summary></entry><entry xml:lang="en"><title type="html">Logbook of Learning Domain-Driven Design: Day 2</title><link href="https://huguesgobet.com/ddd-logbook/2024-12-30" rel="alternate" type="text/html" title="Logbook of Learning Domain-Driven Design: Day 2" /><published>2024-12-30T10:00:00+00:00</published><updated>2024-12-30T10:00:00+00:00</updated><id>https://huguesgobet.com/ddd-logbook/logbook-day-two</id><content type="html" xml:base="https://huguesgobet.com/ddd-logbook/2024-12-30"><![CDATA[<p>In my previous article, I introduced the basic concepts of <strong>Domain-Driven Design (DDD)</strong>, particularly emphasizing the importance of <strong>Ubiquitous Language</strong>. Today, I will discuss the setup and structure of my project.</p>

<h2 id="project-setup">Project Setup</h2>

<p>I began development using <strong><em>Symfony</em></strong> my favorite <strong><em>PHP</em></strong> framework. It greatly simplifies the creation of complex web applications with its modular libraries while promoting good development practices.</p>

<p>For the work environment, I configured a <strong><em>Docker</em></strong> container with <strong><em>MariaDB</em></strong>, <strong><em>Nginx</em></strong>, and a proxy to manage <strong><em>HTTPS</em></strong>, ensuring smooth local deployment.</p>

<p>The biggest challenge in starting a new project is the lack of external review. After spending countless hours on the same functionality, it becomes hard to identify weaknesses. To ensure adherence to the development rules I established, I integrated essential tools.</p>

<h3 id="four-tools-to-maintain-standards">Four Tools to Maintain Standards</h3>

<ol>
  <li><strong><em>PHP CS Fixer</em></strong>: Ensures my code adheres to style standards and best writing practices.</li>
  <li><strong><em>PHPStan</em></strong>: Analyzes the code to detect bugs, typing omissions, and other potential errors.</li>
  <li><strong><em>Rector</em></strong>: A powerful tool for refactoring code and easily managing <strong><em>PHP</em></strong> and <strong><em>Symfony</em></strong> version upgrades.</li>
  <li><strong><em>Deptrac</em></strong>: Crucial for verifying compliance with the principles of <strong>hexagonal architecture</strong> or <strong>Bounded Contexts</strong>.</li>
</ol>

<h2 id="project-structure-and-architecture">Project Structure and Architecture</h2>

<p>For this project, in addition to <strong>DDD</strong>, I aim to use <strong>hexagonal architecture</strong> combined with the <strong>CQRS</strong> pattern to create a scalable and easily testable application. This also simplifies codebase evolution.</p>

<h3 id="hexagonal-architecture">Hexagonal Architecture</h3>

<p>The architecture is organized around two main areas: the inside (business logic) and the outside (interfaces).</p>

<p>The outside comprises <strong>Ports</strong> and <strong>Adapters</strong>, which handle client interactions by transforming requests into actions understandable by the interface. These <strong>Ports</strong> enable communication with the external world, whether for HTTP requests or messages. The outside also provides mechanisms to retrieve stored data, save application results, and send them elsewhere.</p>

<p>The business logic (application and domain) resides within the hexagon. I defined a client interface with four types of requests. Three use the same Port (likely via HTTP), while the fourth uses a different Port (such as AMQP).</p>

<ul>
  <li><strong>Input Adapters</strong> convert these requests into operations for the application, which processes them internally.</li>
  <li><strong>Output Adapters</strong> then send data to external systems, such as an AMQP message to notify a state change. The Port used differs from the one used for persistence.</li>
</ul>

<p><img src="/assets/images/2024-12-30/hexagonal-architecture.png" alt="Architecture héxagonale" /></p>

<h3 id="cqrs-command-query-responsibility-segregation">CQRS (Command Query Responsibility Segregation)</h3>

<p><strong>CQRS</strong> is a pattern stipulating that all methods must be categorized as either <strong>Commands</strong> or <strong>Queries</strong>.</p>

<ul>
  <li>A <strong>Command</strong> executes an action. It modifies the state of an object and does not return a value, except for the ID of the created resource if necessary.</li>
  <li>A <strong>Query</strong>, on the other hand, only returns data without ever altering the state of an object.</li>
</ul>

<p>This strict separation clarifies the structure and makes the code more readable and maintainable.</p>

<h4 id="future-vision">Future Vision</h4>

<p>There’s another aspect of <strong>CQRS</strong> I won’t cover here, as I only discovered it later: the separation of the read and write layers. I’ll delve into this topic in more detail in a future journal entry.</p>

<p><img src="/assets/images/2024-12-30/cqrs.png" alt="CQRS" /></p>

<h3 id="bounded-context">Bounded Context</h3>

<p>To better structure a project, the concept of a <strong>Bounded Context</strong> is essential.</p>

<h4 id="what-is-a-bounded-context">What Is a Bounded Context?</h4>

<p>Each <strong>Bounded Context</strong> is defined to encapsulate the concepts, business rules, processes, and data models it is responsible for. It represents the boundaries where the <strong>Ubiquitous Language</strong> applies.</p>

<h4 id="how-to-identify-a-bounded-context">How to Identify a Bounded Context?</h4>

<p>Using my <strong>Domain Vision Statement</strong> (<em>linked in Article 1</em>), I identified three <strong>Bounded Contexts</strong>:</p>

<ul>
  <li><ins>Country</ins>: Manages the list of countries.</li>
  <li><ins>Bottle</ins>: Manages bottles and grape varieties.</li>
  <li><ins>User</ins>: Manages users and security.</li>
</ul>

<p><img src="/assets/images/2024-12-30/bottles.png" alt="Des amis, du vin context map" /></p>

<h2 id="project-structure">Project Structure</h2>

<p>Each <strong>Bounded Context</strong> has its own folder. In my case, I will have three: <strong>Bottle</strong>, <strong>Country</strong>, and <strong>User</strong>. It’s crucial that no code crosses the boundaries of the <strong>Bounded Contexts</strong>. If communication between <strong>Bounded Contexts</strong> is needed, asynchronous messages or API calls must be used. This rule is validated using the <strong>Deptrac</strong> tool.</p>

<p>Within each <strong>Bounded Context</strong>, you will find:</p>

<ul>
  <li>A <strong>Domain</strong> folder, containing <strong>Entities</strong>, <strong>Value Objects</strong>, <strong>Repositories</strong>, Domain <strong>Services</strong>, and Domain <strong>Events</strong>.</li>
  <li>An <strong>Application</strong> folder, housing the <strong>CQRS</strong> layer, with separate folders for <strong>Commands</strong> and <strong>Queries</strong>. I’ve also included <strong><em>Event Listeners</em></strong> that monitor <strong>Domain Events</strong>. This layer serves as the bridge between <strong>Infrastructure</strong> and <strong>Domain</strong>.</li>
  <li>An <strong>Infrastructure</strong> folder, which contains concrete implementations of the interfaces defined in the <strong>Domain</strong>, as well as components responsible for external communication (storage, mailing, authentication), and API resources.</li>
</ul>

<p>Here’s what this looks like for my project (I use <strong><em>PHPStorm</em></strong> for development):</p>

<p><img src="/assets/images/2024-12-30/code-structure.png" alt="Des amis, du vin structure du projet" width="25%" /></p>

<p>The <strong>Application</strong> layer is optional. Hexagonal architecture implementations can consist solely of the <strong>Domain</strong> and <strong>Infrastructure</strong> layers.</p>

<p>This journal entry is dense with new concepts. Embarking on a project with these ideas is both a challenge and a learning opportunity. Stay tuned for the next episode.</p>]]></content><author><name>Hugues Gobet</name><email>hugues.gobet@gmail.com</email></author><category term="ddd-logbook" /><summary type="html"><![CDATA[In my previous article, I introduced the basic concepts of Domain-Driven Design (DDD), particularly emphasizing the importance of Ubiquitous Language. Today, I will discuss the setup and structure of my project. Project Setup I began development using Symfony my favorite PHP framework. It greatly simplifies the creation of complex web applications with its modular libraries while promoting good development practices. For the work environment, I configured a Docker container with MariaDB, Nginx, and a proxy to manage HTTPS, ensuring smooth local deployment. The biggest challenge in starting a new project is the lack of external review. After spending countless hours on the same functionality, it becomes hard to identify weaknesses. To ensure adherence to the development rules I established, I integrated essential tools. Four Tools to Maintain Standards PHP CS Fixer: Ensures my code adheres to style standards and best writing practices. PHPStan: Analyzes the code to detect bugs, typing omissions, and other potential errors. Rector: A powerful tool for refactoring code and easily managing PHP and Symfony version upgrades. Deptrac: Crucial for verifying compliance with the principles of hexagonal architecture or Bounded Contexts. Project Structure and Architecture For this project, in addition to DDD, I aim to use hexagonal architecture combined with the CQRS pattern to create a scalable and easily testable application. This also simplifies codebase evolution. Hexagonal Architecture The architecture is organized around two main areas: the inside (business logic) and the outside (interfaces). The outside comprises Ports and Adapters, which handle client interactions by transforming requests into actions understandable by the interface. These Ports enable communication with the external world, whether for HTTP requests or messages. The outside also provides mechanisms to retrieve stored data, save application results, and send them elsewhere. The business logic (application and domain) resides within the hexagon. I defined a client interface with four types of requests. Three use the same Port (likely via HTTP), while the fourth uses a different Port (such as AMQP). Input Adapters convert these requests into operations for the application, which processes them internally. Output Adapters then send data to external systems, such as an AMQP message to notify a state change. The Port used differs from the one used for persistence. CQRS (Command Query Responsibility Segregation) CQRS is a pattern stipulating that all methods must be categorized as either Commands or Queries. A Command executes an action. It modifies the state of an object and does not return a value, except for the ID of the created resource if necessary. A Query, on the other hand, only returns data without ever altering the state of an object. This strict separation clarifies the structure and makes the code more readable and maintainable. Future Vision There’s another aspect of CQRS I won’t cover here, as I only discovered it later: the separation of the read and write layers. I’ll delve into this topic in more detail in a future journal entry. Bounded Context To better structure a project, the concept of a Bounded Context is essential. What Is a Bounded Context? Each Bounded Context is defined to encapsulate the concepts, business rules, processes, and data models it is responsible for. It represents the boundaries where the Ubiquitous Language applies. How to Identify a Bounded Context? Using my Domain Vision Statement (linked in Article 1), I identified three Bounded Contexts: Country: Manages the list of countries. Bottle: Manages bottles and grape varieties. User: Manages users and security. Project Structure Each Bounded Context has its own folder. In my case, I will have three: Bottle, Country, and User. It’s crucial that no code crosses the boundaries of the Bounded Contexts. If communication between Bounded Contexts is needed, asynchronous messages or API calls must be used. This rule is validated using the Deptrac tool. Within each Bounded Context, you will find: A Domain folder, containing Entities, Value Objects, Repositories, Domain Services, and Domain Events. An Application folder, housing the CQRS layer, with separate folders for Commands and Queries. I’ve also included Event Listeners that monitor Domain Events. This layer serves as the bridge between Infrastructure and Domain. An Infrastructure folder, which contains concrete implementations of the interfaces defined in the Domain, as well as components responsible for external communication (storage, mailing, authentication), and API resources. Here’s what this looks like for my project (I use PHPStorm for development): The Application layer is optional. Hexagonal architecture implementations can consist solely of the Domain and Infrastructure layers. This journal entry is dense with new concepts. Embarking on a project with these ideas is both a challenge and a learning opportunity. Stay tuned for the next episode.]]></summary></entry><entry xml:lang="en"><title type="html">Pagination: Business or Technical Need?</title><link href="https://huguesgobet.com/other/2024-12-16" rel="alternate" type="text/html" title="Pagination: Business or Technical Need?" /><published>2024-12-16T14:00:00+00:00</published><updated>2024-12-16T14:00:00+00:00</updated><id>https://huguesgobet.com/other/pagination-besoin-metier-ou-technique</id><content type="html" xml:base="https://huguesgobet.com/other/2024-12-16"><![CDATA[<p>During the development of an application for an e-commerce site, I recently came across a thorny problem: how to manage <u>product</u> pagination while respecting the principles of <strong>Domain-Driven Design (DDD)</strong>, <strong>Hexagonal Architecture</strong>, and <strong>Command Query Responsibility Segregation (CQRS)</strong>? For a long time, I wondered whether pagination should be part of the <strong>Domain</strong>, and if not, how to link the <strong>Infrastructure</strong> layer or the <strong>Application</strong> layer to the <strong>Repository</strong> located in the <strong>Domain</strong> layer. How can we comply with the rules of the architectures we’ve chosen to use? In this article, I share my approach and analyses.</p>

<h2 id="reminder-of-the-different-development-methodologies-used">Reminder of the Different Development Methodologies Used</h2>

<h3 id="domain-driven-design"><strong>Domain-Driven Design</strong></h3>

<p><strong>DDD</strong> is a software development approach that places the <strong>business domain</strong> at the heart of development. To achieve this, a number of software patterns are used, such as <strong>Entity</strong>, <strong>Aggregate</strong>, <strong>Value Object</strong>, <strong>Repository</strong>, etc. However, using only technical patterns is a misuse of <strong>DDD</strong>. The essential part lies in using the <strong>Ubiquitous Language</strong> and modeling the <strong>Domain</strong>. <strong>DDD</strong> encourages close collaboration between developers and business experts to create a common model. In addition, the concept of <strong>Bounded Context</strong> is essential for delimiting sub-domains and managing system complexity.</p>

<h3 id="hexagonal-architecture"><strong>Hexagonal Architecture</strong></h3>

<p><strong>Hexagonal Architecture</strong> (also known as Port/Adapter architecture) advocates separating an application into several layers and aims to make the <strong>Domain</strong> independent of external factors (database, framework, etc.). Two layers are mandatory: the <strong>Domain</strong>, with the business code (<strong>Entity</strong>, <strong>Aggregate</strong>, <strong>Value Object</strong>, <strong>Repository</strong>…), and the <strong>Infrastructure</strong>, which manages communications with the outside world through input Adapters (the <strong><em>Controllers</em></strong>) and output Adapters (the <strong>Repository</strong>).</p>

<p>The two layers communicate using dependency inversion. An interface is defined in the <strong>Domain</strong> (for example, a <strong>Repository</strong> with the <strong><em>Add</em></strong> method), and the <strong>Infrastructure</strong> provides the implementation of the <strong><em>Add</em></strong> method of the <strong>Repository</strong>, registering the new <strong>Entity</strong> in the database.</p>

<p><img src="/assets/images/2024-12-16/hexagonal-architecture.png" alt="Architecture héxagonale" /></p>

<h3 id="command-query-responsibility-segregation-cqrs"><strong>Command Query Responsibility Segregation (CQRS)</strong></h3>

<p><strong>CQRS</strong> is a pattern that stipulates that any action on the system is either a <strong>Query</strong>, to read data from the system, or a <strong>Command</strong>, to perform an action and modify the system. This action returns nothing or the identifier of the created resource. <strong>CQRS</strong> also requires separating the write model from the read model.</p>

<p><img src="/assets/images/2024-12-16/cqrs.png" alt="CQRS" /></p>

<h2 id="practical-case-paginated-product-list-for-an-e-commerce-site">Practical Case: Paginated <u>Product</u> List for an E-commerce Site</h2>

<p>For this article, I’ll use a classic example for e-commerce sites: a paginated list of <u>products</u> that can be searched by <u>product name</u>. I’ll then explain why the solution may seem simple but actually raises a question.</p>

<p><img src="/assets/images/2024-12-16/en-use-case-product.png" alt="Use case to read a product" /></p>

<h2 id="initial-implementation">Initial Implementation</h2>

<p>To start, I created an <strong>Entity</strong> <u>Product</u> in the <strong>Domain</strong>:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Domain\Entity</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">Product</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">ProductId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">ProductName</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">ProductPrice</span> <span class="nv">$price</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">ProductId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">name</span><span class="p">():</span> <span class="kt">ProductName</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">price</span><span class="p">():</span> <span class="kt">ProductPrice</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">price</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The <u>id</u>, <u>name</u>, and <u>price</u> are all <strong>Value Object</strong>s.</p>

<p>The <strong>Repository</strong> interface is also part of the <strong>Domain</strong>:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Domain\Repository</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Domain\Entity\Product</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Domain\ValueObject\ProductName</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">ProductRepository</span>
<span class="p">{</span>
    <span class="cd">/**
     * @return Product[]
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">getProductsWithName</span><span class="p">(</span><span class="kt">ProductName</span> <span class="nv">$name</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$itemPerPage</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$page</span><span class="p">):</span> <span class="kt">array</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>I’m not going to discuss the implementation of this interface in this article, as it’s not relevant to the topic at hand.</p>

<p>The <strong>Query</strong> and the <strong>QueryHandler</strong>, which are responsible for formatting and linking the <strong>Domain</strong> to the outside world, can be found either in the <strong>Infrastructure</strong> layer or in the <strong>Application</strong> layer. To keep this example simple, I’ve placed them in the <strong>Infrastructure</strong> layer, although I personally prefer to put them in the <strong>Application</strong> layer.</p>

<p>Here is the <strong>Query</strong>:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Query</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">ListProductsWithNameQuery</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="nv">$itemPerPage</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="nv">$page</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>And the <strong>QueryHandler</strong>:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Query</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">ListProductsWithNameQueryHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">ProductRepository</span> <span class="nv">$productRepository</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="cd">/**
     * @return Product[]
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">ListProductsWithNameQuery</span> <span class="nv">$query</span><span class="p">):</span> <span class="kt">array</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">productRepository</span><span class="o">-&gt;</span><span class="nf">getProductsWithName</span><span class="p">(</span>
            <span class="nc">ProductName</span><span class="o">::</span><span class="nf">fromString</span><span class="p">(</span><span class="nv">$query</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">),</span>
            <span class="nv">$query</span><span class="o">-&gt;</span><span class="n">itemPerPage</span><span class="p">,</span>
            <span class="nv">$query</span><span class="o">-&gt;</span><span class="n">page</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>I’ve placed the <strong><em>Controller</em></strong> in the <strong>Infrastructure</strong> layer. Its purpose is to transform what comes from the HTTP request into a <strong>Query</strong> and then dispatch it.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Controller</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="kd">extends</span> <span class="nc">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="kt">QueryBus</span> <span class="nv">$queryBus</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">Request</span> <span class="nv">$request</span><span class="p">):</span> <span class="kt">Response</span>
    <span class="p">{</span>
        <span class="nv">$products</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queryBus</span><span class="o">-&gt;</span><span class="nf">ask</span><span class="p">(</span>
            <span class="k">new</span> <span class="nc">ListProductsWithNameQuery</span><span class="p">(</span>
                <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'name'</span><span class="p">),</span>
                <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'itemPerPage'</span><span class="p">),</span>
                <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'page'</span><span class="p">),</span>
            <span class="p">)</span>
        <span class="p">);</span>

        <span class="nv">$paginatedProduct</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PaginatedProduct</span><span class="p">(</span>
            <span class="n">products</span><span class="o">:</span> <span class="nv">$products</span><span class="p">,</span>
            <span class="n">total</span><span class="o">:</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$products</span><span class="p">),</span>
            <span class="n">page</span><span class="o">:</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'page'</span><span class="p">),</span>
        <span class="p">);</span>

        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">json</span><span class="p">(</span><span class="nv">$paginatedProduct</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="analysis-of-the-implementation">Analysis of the Implementation</h2>

<p>This example of implementing a paginated <u>product</u> search respects the layer separation of <strong>Hexagonal Architecture</strong>: the business code is well separated from the <strong>Infrastructure</strong> layer. It also partially respects <strong>CQRS</strong>, since I’m using a <strong>Query</strong> to interrogate the system.</p>

<p>On the other hand, the read model is not separated from the write model, which violates <strong>CQRS</strong>. Initially, I didn’t think this was a big deal until it caused a problem: my <strong>Domain</strong> is polluted by concepts from the <strong>Infrastructure</strong> (or presentation) layer. Since pagination is not part of the <strong>Domain</strong>, it adds no value and may vary depending on the primary Adapter (HTTP, Console…). The name filter is a business Use Case, but it doesn’t add much to the <strong>Domain</strong> and is also part of the presentation layer.</p>

<p>So, how do we manage pagination without polluting the <strong>Domain</strong>?</p>

<p>This is certainly not the only way, but I chose to fully comply with <strong>CQRS</strong> and separate the write model from the read model. I moved the read model into the <strong>Infrastructure</strong> (or <strong>Application</strong>) layer; it can even be extracted from the project managing the <u>Product</u> <strong>Domain</strong>. To do this, whenever I act on the model (create, modify, or delete an <strong>Aggregate</strong> or <strong>Entity</strong>), I reflect this in the read model.</p>

<h2 id="benefits-of-this-approach">Benefits of This Approach</h2>

<ul>
  <li>The read model is adapted for presentation needs. You’re not forced to save <strong>Aggregate</strong> or <strong>Entity</strong> data if you don’t need it.</li>
  <li>You don’t have to adhere to the structure of your write model. For example, if you manage a <u>party</u> with <u>invitations</u> and need to filter these <u>invitations</u> to show only those for a specific user, you create a dedicated model for <u>invitations</u> in your read model. You include all the necessary information, whether it comes from the <u>party</u> or the <u>invitation</u>. Data duplication doesn’t matter here.</li>
  <li>No storage constraints for the model. You can use the same server to reduce costs; I simply recommend separating the databases for minimal physical separation. You can also use storage optimized for search, like Elasticsearch or MongoDB. Since this is not a software architecture issue, I won’t go into more detail (as usual!).</li>
</ul>

<h2 id="implementing-the-solution">Implementing the Solution</h2>

<p>I’ll detail the steps I took to separate the write model from the read model.</p>

<h3 id="transforming-the-write-model-into-a-read-model">Transforming the Write Model into a Read Model</h3>

<p>I use <strong>Domain events</strong> and <strong>Projections</strong> for this.</p>

<ul>
  <li>What is a <strong>Domain event</strong>? It’s an event dispatched when an action occurs in the <strong>Domain</strong>. For example, when you create a <u>product</u>, you dispatch a <u>product created</u> event.</li>
  <li>What is a <strong>Projection</strong>? It’s the act of projecting the write model onto the read model. It’s part of the <strong>Infrastructure</strong> or <strong>Application</strong> layer. A <strong>Projection</strong> is called in response to an event emitted by the <strong>Domain</strong>.</li>
</ul>

<h3 id="creating-a-read-model">Creating a Read Model</h3>

<p>Now I’ll present the creation of the read model and then show how the reading part is transformed to use the Read Model.</p>

<p><img src="/assets/images/2024-12-16/en-use-case-create-read-model-product.png" alt="Use case to create read model for product" /></p>

<p>Here is the <strong>Entity</strong> <u>Product</u> with the event recorded when the <u>Product</u> is created:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Domain\Entity</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="kd">extends</span> <span class="nc">Aggregate</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">ProductId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">ProductName</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="k">private</span> <span class="kt">ProductPrice</span> <span class="nv">$price</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">create</span><span class="p">(</span>
        <span class="kt">ProductId</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="kt">ProductName</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="kt">ProductPrice</span> <span class="nv">$price</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">self</span> <span class="p">{</span>
        <span class="nv">$product</span> <span class="o">=</span>  <span class="k">new</span> <span class="nc">self</span><span class="p">(</span>
            <span class="nv">$id</span><span class="p">,</span>
            <span class="nv">$name</span><span class="p">,</span>
            <span class="nv">$price</span><span class="p">,</span>
        <span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">record</span><span class="p">(</span><span class="k">new</span> <span class="nc">ProductCreated</span><span class="p">(</span>
            <span class="nv">$id</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
            <span class="nv">$name</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
            <span class="nv">$price</span><span class="o">-&gt;</span><span class="nf">value</span><span class="p">(),</span>
        <span class="p">));</span>

        <span class="k">return</span> <span class="nv">$product</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">id</span><span class="p">():</span> <span class="kt">ProductId</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">name</span><span class="p">():</span> <span class="kt">ProductName</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">price</span><span class="p">():</span> <span class="kt">ProductPrice</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">price</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Here is the <strong>Projection</strong>, which can be called or already be present in an <strong><em>EventListener</em></strong> or a <strong><em>MessageHandler</em></strong>. For the sake of a short example, I’ve placed the code directly in the Adapter. I recommend extracting it into a class that can be reused if you decide to change the Adapter later.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Projection</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">CreateProductProjection</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">ProductAdapterInterface</span> <span class="nv">$productAdapter</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">ProductCreated</span> <span class="nv">$event</span><span class="p">):</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$product</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="p">(</span>
            <span class="nv">$event</span><span class="o">-&gt;</span><span class="n">productId</span><span class="p">,</span>
            <span class="nv">$event</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span>
            <span class="nv">$event</span><span class="o">-&gt;</span><span class="n">price</span><span class="p">,</span>
        <span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">productAdapter</span><span class="o">-&gt;</span><span class="nf">add</span><span class="p">(</span><span class="nv">$product</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This is the Adapter responsible for storing the data in the read model:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Adapter</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">ProductAdapterInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">add</span><span class="p">(</span><span class="kt">Product</span> <span class="nv">$product</span><span class="p">):</span> <span class="kt">void</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The implementation depends on the solution you choose, so I won’t go into detail.</p>

<p>Here’s what the <u>Product</u> read model looks like:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\ReadModel</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">Product</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$id</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">float</span> <span class="nv">$price</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Now that the read model is ready, it needs to be queried.</p>

<h3 id="querying-the-read-model">Querying the Read Model</h3>

<p>To do this, I took the Use Case diagram and modified it slightly:</p>

<p><img src="/assets/images/2024-12-16/en-use-case-list-product.png" alt="Use case to read a product" /></p>

<p>The read Adapter is now no longer in the <strong>Domain</strong>, but in the <strong>Infrastructure</strong> layer.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Adapter</span><span class="p">;</span>

<span class="kd">interface</span> <span class="nc">ProductAdapterInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">add</span><span class="p">(</span><span class="kt">Product</span> <span class="nv">$product</span><span class="p">):</span> <span class="kt">void</span><span class="p">;</span>

    <span class="cd">/**
     * @return Product[]
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">getProductsWithName</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$itemPerPage</span><span class="p">,</span> <span class="kt">int</span> <span class="nv">$page</span><span class="p">):</span> <span class="kt">array</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The Adapter now handles reading from the read model. It contains the method that used to be in the <strong>Repository</strong> in the previous example. I changed the <u>name</u> parameter to a simple string. Since we’re outside the <strong>Domain</strong>, it doesn’t need to be a <strong>Value Object</strong>.</p>

<p>The <strong>Query</strong> does not change:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Query</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">ListProductsWithNameQuery</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="nv">$itemPerPage</span><span class="p">,</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="nv">$page</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Now, the <strong>QueryHandler</strong> will no longer call the <strong>Domain</strong> <strong>Repository</strong>, but the Adapter that reads from the Read Model:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Query</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">ListProductsWithNameQueryHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">ProductAdapterInterface</span> <span class="nv">$productAdapter</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="cd">/**
     * @return Product[]
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">ListProductsWithNameQuery</span> <span class="nv">$query</span><span class="p">):</span> <span class="kt">array</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">productAdapter</span><span class="o">-&gt;</span><span class="nf">getProductsWithName</span><span class="p">(</span>
            <span class="nv">$query</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span>
            <span class="nv">$query</span><span class="o">-&gt;</span><span class="n">itemPerPage</span><span class="p">,</span>
            <span class="nv">$query</span><span class="o">-&gt;</span><span class="n">page</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The <strong><em>Controller</em></strong> also remains unchanged:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="kn">namespace</span> <span class="nn">App\Infrastructure\Controller</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="kd">extends</span> <span class="nc">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="kt">QueryBus</span> <span class="nv">$queryBus</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__invoke</span><span class="p">(</span><span class="kt">Request</span> <span class="nv">$request</span><span class="p">):</span> <span class="kt">Response</span>
    <span class="p">{</span>
        <span class="nv">$products</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">queryBus</span><span class="o">-&gt;</span><span class="nf">ask</span><span class="p">(</span>
            <span class="k">new</span> <span class="nc">ListProductsWithNameQuery</span><span class="p">(</span>
                <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'name'</span><span class="p">),</span>
                <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'itemPerPage'</span><span class="p">),</span>
                <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'page'</span><span class="p">),</span>
            <span class="p">)</span>
        <span class="p">);</span>

        <span class="nv">$paginatedProduct</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PaginatedProduct</span><span class="p">(</span>
            <span class="n">products</span><span class="o">:</span> <span class="nv">$products</span><span class="p">,</span>
            <span class="n">total</span><span class="o">:</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$products</span><span class="p">),</span>
            <span class="n">page</span><span class="o">:</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">query</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'page'</span><span class="p">),</span>
        <span class="p">);</span>

        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">json</span><span class="p">(</span><span class="nv">$paginatedProduct</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>I’ve tried to answer the question: is pagination a business need or a technical need? From what we’ve seen, pagination is part of the business use case but does not fall under the <strong>Domain</strong>’s responsibility. It’s therefore necessary to integrate it by dissociating the read model from the <strong>Domain</strong> model. This approach maintains the integrity of the <strong>Domain</strong> by keeping it away from issues outside its scope.</p>

<p>If you’re interested, you can find all the code for this article on <a href="https://github.com/tegbessou/ddd-pagination"><em>GitHub</em></a>. You’ll find the code without the Read Model as well as the latest version.</p>

<p>See you in a fortnight for the next article in the <strong>DDD</strong> Logbook.</p>]]></content><author><name>Hugues Gobet</name><email>hugues.gobet@gmail.com</email></author><category term="other" /><summary type="html"><![CDATA[During the development of an application for an e-commerce site, I recently came across a thorny problem: how to manage product pagination while respecting the principles of Domain-Driven Design (DDD), Hexagonal Architecture, and Command Query Responsibility Segregation (CQRS)? For a long time, I wondered whether pagination should be part of the Domain, and if not, how to link the Infrastructure layer or the Application layer to the Repository located in the Domain layer. How can we comply with the rules of the architectures we’ve chosen to use? In this article, I share my approach and analyses. Reminder of the Different Development Methodologies Used Domain-Driven Design DDD is a software development approach that places the business domain at the heart of development. To achieve this, a number of software patterns are used, such as Entity, Aggregate, Value Object, Repository, etc. However, using only technical patterns is a misuse of DDD. The essential part lies in using the Ubiquitous Language and modeling the Domain. DDD encourages close collaboration between developers and business experts to create a common model. In addition, the concept of Bounded Context is essential for delimiting sub-domains and managing system complexity. Hexagonal Architecture Hexagonal Architecture (also known as Port/Adapter architecture) advocates separating an application into several layers and aims to make the Domain independent of external factors (database, framework, etc.). Two layers are mandatory: the Domain, with the business code (Entity, Aggregate, Value Object, Repository…), and the Infrastructure, which manages communications with the outside world through input Adapters (the Controllers) and output Adapters (the Repository). The two layers communicate using dependency inversion. An interface is defined in the Domain (for example, a Repository with the Add method), and the Infrastructure provides the implementation of the Add method of the Repository, registering the new Entity in the database. Command Query Responsibility Segregation (CQRS) CQRS is a pattern that stipulates that any action on the system is either a Query, to read data from the system, or a Command, to perform an action and modify the system. This action returns nothing or the identifier of the created resource. CQRS also requires separating the write model from the read model. Practical Case: Paginated Product List for an E-commerce Site For this article, I’ll use a classic example for e-commerce sites: a paginated list of products that can be searched by product name. I’ll then explain why the solution may seem simple but actually raises a question. Initial Implementation To start, I created an Entity Product in the Domain: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 namespace App\Domain\Entity; final class Product { public function __construct( private ProductId $id, private ProductName $name, private ProductPrice $price, ) {} public function id(): ProductId { return $this-&gt;id; } public function name(): ProductName { return $this-&gt;name; } public function price(): ProductPrice { return $this-&gt;price; } } The id, name, and price are all Value Objects. The Repository interface is also part of the Domain: 1 2 3 4 5 6 7 8 9 10 11 12 namespace App\Domain\Repository; use App\Domain\Entity\Product; use App\Domain\ValueObject\ProductName; interface ProductRepository { /** * @return Product[] */ public function getProductsWithName(ProductName $name, int $itemPerPage, int $page): array; } I’m not going to discuss the implementation of this interface in this article, as it’s not relevant to the topic at hand. The Query and the QueryHandler, which are responsible for formatting and linking the Domain to the outside world, can be found either in the Infrastructure layer or in the Application layer. To keep this example simple, I’ve placed them in the Infrastructure layer, although I personally prefer to put them in the Application layer. Here is the Query: 1 2 3 4 5 6 7 8 9 10 11 namespace App\Infrastructure\Query; final readonly class ListProductsWithNameQuery { public function __construct( public string $name, public int $itemPerPage, public int $page, ) { } } And the QueryHandler: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 namespace App\Infrastructure\Query; final readonly class ListProductsWithNameQueryHandler { public function __construct( private ProductRepository $productRepository ) {} /** * @return Product[] */ public function __invoke(ListProductsWithNameQuery $query): array { return $this-&gt;productRepository-&gt;getProductsWithName( ProductName::fromString($query-&gt;name), $query-&gt;itemPerPage, $query-&gt;page ); } } I’ve placed the Controller in the Infrastructure layer. Its purpose is to transform what comes from the HTTP request into a Query and then dispatch it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 namespace App\Infrastructure\Controller; final class ProductController extends AbstractController { public function __construct( private readonly QueryBus $queryBus, ) {} public function __invoke(Request $request): Response { $products = $this-&gt;queryBus-&gt;ask( new ListProductsWithNameQuery( $request-&gt;query-&gt;get('name'), (int) $request-&gt;query-&gt;get('itemPerPage'), (int) $request-&gt;query-&gt;get('page'), ) ); $paginatedProduct = new PaginatedProduct( products: $products, total: count($products), page: (int) $request-&gt;query-&gt;get('page'), ); return $this-&gt;json($paginatedProduct); } } Analysis of the Implementation This example of implementing a paginated product search respects the layer separation of Hexagonal Architecture: the business code is well separated from the Infrastructure layer. It also partially respects CQRS, since I’m using a Query to interrogate the system. On the other hand, the read model is not separated from the write model, which violates CQRS. Initially, I didn’t think this was a big deal until it caused a problem: my Domain is polluted by concepts from the Infrastructure (or presentation) layer. Since pagination is not part of the Domain, it adds no value and may vary depending on the primary Adapter (HTTP, Console…). The name filter is a business Use Case, but it doesn’t add much to the Domain and is also part of the presentation layer. So, how do we manage pagination without polluting the Domain? This is certainly not the only way, but I chose to fully comply with CQRS and separate the write model from the read model. I moved the read model into the Infrastructure (or Application) layer; it can even be extracted from the project managing the Product Domain. To do this, whenever I act on the model (create, modify, or delete an Aggregate or Entity), I reflect this in the read model. Benefits of This Approach The read model is adapted for presentation needs. You’re not forced to save Aggregate or Entity data if you don’t need it. You don’t have to adhere to the structure of your write model. For example, if you manage a party with invitations and need to filter these invitations to show only those for a specific user, you create a dedicated model for invitations in your read model. You include all the necessary information, whether it comes from the party or the invitation. Data duplication doesn’t matter here. No storage constraints for the model. You can use the same server to reduce costs; I simply recommend separating the databases for minimal physical separation. You can also use storage optimized for search, like Elasticsearch or MongoDB. Since this is not a software architecture issue, I won’t go into more detail (as usual!). Implementing the Solution I’ll detail the steps I took to separate the write model from the read model. Transforming the Write Model into a Read Model I use Domain events and Projections for this. What is a Domain event? It’s an event dispatched when an action occurs in the Domain. For example, when you create a product, you dispatch a product created event. What is a Projection? It’s the act of projecting the write model onto the read model. It’s part of the Infrastructure or Application layer. A Projection is called in response to an event emitted by the Domain. Creating a Read Model Now I’ll present the creation of the read model and then show how the reading part is transformed to use the Read Model. Here is the Entity Product with the event recorded when the Product is created: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 namespace App\Domain\Entity; final class Product extends Aggregate { public function __construct( private ProductId $id, private ProductName $name, private ProductPrice $price, ) { } public function create( ProductId $id, ProductName $name, ProductPrice $price, ): self { $product = new self( $id, $name, $price, ); $this-&gt;record(new ProductCreated( $id-&gt;value(), $name-&gt;value(), $price-&gt;value(), )); return $product; } public function id(): ProductId { return $this-&gt;id; } public function name(): ProductName { return $this-&gt;name; } public function price(): ProductPrice { return $this-&gt;price; } } Here is the Projection, which can be called or already be present in an EventListener or a MessageHandler. For the sake of a short example, I’ve placed the code directly in the Adapter. I recommend extracting it into a class that can be reused if you decide to change the Adapter later. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 namespace App\Infrastructure\Projection; final readonly class CreateProductProjection { public function __construct( private ProductAdapterInterface $productAdapter, ) { } public function __invoke(ProductCreated $event): void { $product = new Product( $event-&gt;productId, $event-&gt;name, $event-&gt;price, ); $this-&gt;productAdapter-&gt;add($product); } } This is the Adapter responsible for storing the data in the read model: 1 2 3 4 5 6 namespace App\Infrastructure\Adapter; interface ProductAdapterInterface { public function add(Product $product): void; } The implementation depends on the solution you choose, so I won’t go into detail. Here’s what the Product read model looks like: 1 2 3 4 5 6 7 8 9 10 namespace App\Infrastructure\ReadModel; final readonly class Product { public function __construct( public string $id, public string $name, public float $price, ) {} } Now that the read model is ready, it needs to be queried. Querying the Read Model To do this, I took the Use Case diagram and modified it slightly: The read Adapter is now no longer in the Domain, but in the Infrastructure layer. 1 2 3 4 5 6 7 8 9 10 11 namespace App\Infrastructure\Adapter; interface ProductAdapterInterface { public function add(Product $product): void; /** * @return Product[] */ public function getProductsWithName(string $name, int $itemPerPage, int $page): array; } The Adapter now handles reading from the read model. It contains the method that used to be in the Repository in the previous example. I changed the name parameter to a simple string. Since we’re outside the Domain, it doesn’t need to be a Value Object. The Query does not change: 1 2 3 4 5 6 7 8 9 10 11 namespace App\Infrastructure\Query; final readonly class ListProductsWithNameQuery { public function __construct( public string $name, public int $itemPerPage, public int $page, ) { } } Now, the QueryHandler will no longer call the Domain Repository, but the Adapter that reads from the Read Model: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 namespace App\Infrastructure\Query; final readonly class ListProductsWithNameQueryHandler { public function __construct( private ProductAdapterInterface $productAdapter ) {} /** * @return Product[] */ public function __invoke(ListProductsWithNameQuery $query): array { return $this-&gt;productAdapter-&gt;getProductsWithName( $query-&gt;name, $query-&gt;itemPerPage, $query-&gt;page ); } } The Controller also remains unchanged: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 namespace App\Infrastructure\Controller; final class ProductController extends AbstractController { public function __construct( private readonly QueryBus $queryBus, ) {} public function __invoke(Request $request): Response { $products = $this-&gt;queryBus-&gt;ask( new ListProductsWithNameQuery( $request-&gt;query-&gt;get('name'), (int) $request-&gt;query-&gt;get('itemPerPage'), (int) $request-&gt;query-&gt;get('page'), ) ); $paginatedProduct = new PaginatedProduct( products: $products, total: count($products), page: (int) $request-&gt;query-&gt;get('page'), ); return $this-&gt;json($paginatedProduct); } } I’ve tried to answer the question: is pagination a business need or a technical need? From what we’ve seen, pagination is part of the business use case but does not fall under the Domain’s responsibility. It’s therefore necessary to integrate it by dissociating the read model from the Domain model. This approach maintains the integrity of the Domain by keeping it away from issues outside its scope. If you’re interested, you can find all the code for this article on GitHub. You’ll find the code without the Read Model as well as the latest version. See you in a fortnight for the next article in the DDD Logbook.]]></summary></entry><entry xml:lang="en"><title type="html">Logbook of Learning Domain-Driven Design: Day 1</title><link href="https://huguesgobet.com/ddd-logbook/2024-12-02" rel="alternate" type="text/html" title="Logbook of Learning Domain-Driven Design: Day 1" /><published>2024-12-02T15:00:00+00:00</published><updated>2024-12-02T15:00:00+00:00</updated><id>https://huguesgobet.com/ddd-logbook/logbook-day-one</id><content type="html" xml:base="https://huguesgobet.com/ddd-logbook/2024-12-02"><![CDATA[<p>Welcome to this logbook where I share my experience with <strong>Domain-Driven Design (DDD)</strong>, a strategic approach to designing complex software. It places the <strong>business domain</strong> at the core of <strong>modeling</strong>, making it more coherent and comprehensible. Through a series of articles, we’ll explore the <strong>fundamental concepts</strong>, <strong>best practices</strong>, and common pitfalls of <strong>DDD</strong>—all based on my personal experience. Whether you’re a developer, software architect, or professional, this will offer you a step-by-step introduction to <strong>DDD</strong> and its <strong>core principles</strong>.</p>

<h2 id="before-diving-into-the-details">Before diving into the details:</h2>

<ul>
  <li><strong>Bold terms</strong> are part of the <strong>DDD lexicon</strong> or relate to system architecture concepts, with definitions available in an appendix.</li>
  <li><em>Italicized references</em> indicate book authors and their works.</li>
  <li><strong><em>Bold and italicized terms</em></strong> refer to function names and specific code terms in my project.</li>
  <li>Words <u>underlined</u> come from the <strong>Ubiquitous Language</strong>.</li>
</ul>

<h2 id="why-write-a-logbook">Why write a logbook?</h2>

<p>The goal of this article series is to document my journey with <strong>DDD</strong> by sharing each step of my learning process and project creation. Through your feedback and discussions, I aim to continue learning and refining my understanding of this fascinating subject.</p>

<p>I’ll share my mistakes, the corrections I made, and the reasoning behind my decisions so others can learn from my discoveries (and avoid repeating the same errors!). The “<strong>Vision of the Future</strong>” sections explain mistakes before I delve into them further in the logbook.</p>

<h2 id="why-use-ddd">Why use <strong>DDD</strong>?</h2>

<p>As I began exploring this practice, I discovered its value for <strong>project management</strong>.</p>

<h3 id="the-discovery">The Discovery</h3>

<p>It all started when I had to learn about <strong>DDD</strong> for one of my freelance assignments. I purchased <em>Domain-Driven Design</em> by <em>Eric Evans</em> (the creator of <strong>DDD</strong>), but the book ended up sitting on my shelf unread after I was hired without needing to know more about it.</p>

<p>Later, during a downtime between contracts, I decided to revisit the book, intrigued by its content. As I read, I found the concept far more complex than anything I’d encountered before. However, the more I engaged with it, the more I realized how fascinating it was as a way to <strong>design software</strong>. The deeper I went, the more excited I became to try this method—it brought a new sense of purpose to <strong>software creation</strong>. I finished the book in its entirety, taking notes on the key aspects to keep handy.</p>

<p>After a month, I had nearly as many questions as answers. To deepen my understanding, I turned to other readings, including <em>Advanced Web Application Architecture</em> by <em>Matthias Noback</em>. While not specifically focused on <strong>DDD</strong>, this book provided a more practical perspective. Armed with these insights, I felt ready to develop my first <strong>DDD</strong> project.</p>

<p>While working on this project, I also read <em>Implementing Domain-Driven Design</em> by <em>Vaughn Vernon</em>, which further enhanced my approach to <strong>DDD</strong>.</p>

<p><img src="/assets/images/2024-12-02/en.png" alt="Books" /></p>

<h2 id="ubiquitous-language">Ubiquitous Language</h2>

<p>A key concept in <strong>DDD</strong>, the <strong>Ubiquitous Language</strong> refers to the terms related to the <strong>business domain</strong>. It lies at the heart of the system and should be developed through collaboration between developers and domain experts.</p>

<p>All features derive from the <strong>Ubiquitous Language</strong>, and the code must reflect it.</p>

<h2 id="my-first-project-using-domain-driven-design">My First Project Using Domain-Driven Design</h2>

<p>To practice <strong>DDD</strong>, I decided to create an API to catalog the <u>wines</u> I drink, allowing users to <u>record</u>, <u>view</u> (via a mobile app to be developed later), and create <u>tasting notes</u>. The only thing left was to find a name—<strong><em>Des amis, du vin</em></strong> (Friends, Wine) came to me naturally.</p>

<h3 id="domain-vision-statement">Domain Vision Statement</h3>

<p>Before starting the project, I followed the practice recommended by <em>Eric Evans</em>: writing a <strong>Domain Vision Statement</strong>.</p>

<h4 id="what-is-a-domain-vision-statement">What is a <strong>Domain Vision Statement</strong>?</h4>

<p>A <strong>Domain Vision Statement</strong> serves as a guide to keep the development team aligned in the same direction while refining the <strong>model</strong> and <strong>code</strong>.</p>

<p>To create one, write a brief description of the <strong>Core Domain</strong> and the value it provides. Avoid emphasizing what sets this <strong>Domain</strong> apart from others; instead, show how the <strong>model</strong> serves and balances diverse interests. This document should be written as early as possible and revised with every new round of feedback.</p>

<h4 id="for-my-project">For My Project</h4>

<p>Here is the initial version, which focuses solely on the primary features:</p>

<ul>
  <li>
    <p>A <u>bottle</u> includes a <u>name</u>, <u>domain name</u>, <u>type</u> (<u>white</u>, <u>red</u>, <u>rosé</u>, <u>champagne</u>, <u>sparkling red</u>, <u>sparkling white</u>), <u>year</u>, <u>grape variety</u>, <u>country</u>, <u>price</u>, <u>rating</u>, <u>notes</u>, <u>photo</u>, and the <u>date it was added</u>.</p>
  </li>
  <li>
    <p>The functionalities to include are <u>creating</u>, <u>modifying</u>, and <u>deleting</u> a <u>bottle</u> with all its details, as well as <u>searching</u> based on various criteria (<u>wine name</u>, <u>domain name</u>, <u>type</u>, <u>date added</u>/<u>tasted</u>, <u>vintage year</u>, <u>rating</u>).</p>
  </li>
</ul>

<h3 id="vision-of-the-future">Vision of the Future</h3>

<p>At this point, I didn’t fully grasp the concept of the <strong>Core Domain</strong> and only documented the primary features. Nevertheless, I want to share the definitions of the <strong>Core Domain</strong> and the different <strong>Subdomains</strong> before detailing them further in an upcoming article.</p>

<h2 id="core-domain-and-subdomains">Core Domain and Subdomains</h2>

<p>The <strong>Core Domain</strong> is where the most value should be concentrated. It’s essential to identify the central <strong>domain</strong> and provide a way to distinguish it from the supporting layers and surrounding <strong>code</strong>. The <strong>Core Domain</strong> should deliver the greatest value and introduce meaningful concepts. It may consist of multiple <strong>Bounded Contexts</strong>.</p>

<p>A <strong>Subdomain</strong> represents a smaller part of the <strong>domain</strong> that can be broken into modules to separate concerns. <strong>Subdomains</strong> are categorized as follows:</p>

<ul>
  <li><strong>Supporting Subdomains</strong>: These are important for the business but less critical than the <strong>Core Domain</strong>. They are created because they provide unique value.</li>
  <li><strong>Generic Subdomains</strong>: These are generic areas with no specific business value.</li>
</ul>

<h3 id="vision-of-the-future-1">Vision of the Future</h3>

<p>In my case, the <strong>Core Domain</strong> is creating an inventory of <u>wine bottles</u>.</p>

<p>This already represents a lot of information to absorb. If you remember just one thing, let it be the <strong>Ubiquitous Language</strong>—the central concept in <strong>DDD</strong>. The <strong>Ubiquitous Language</strong> is the connection between the business and the technical team, and it is essential that it is reflected in the <strong>code</strong>.</p>

<p>Feel free to leave a comment on this article. Were you already familiar with <strong>Domain-Driven Design</strong>? Which books and resources helped you get started?</p>

<p>See you soon for another episode of this logbook!</p>]]></content><author><name>Hugues Gobet</name><email>hugues.gobet@gmail.com</email></author><category term="ddd-logbook" /><summary type="html"><![CDATA[Welcome to this logbook where I share my experience with Domain-Driven Design (DDD), a strategic approach to designing complex software. It places the business domain at the core of modeling, making it more coherent and comprehensible. Through a series of articles, we’ll explore the fundamental concepts, best practices, and common pitfalls of DDD—all based on my personal experience. Whether you’re a developer, software architect, or professional, this will offer you a step-by-step introduction to DDD and its core principles. Before diving into the details: Bold terms are part of the DDD lexicon or relate to system architecture concepts, with definitions available in an appendix. Italicized references indicate book authors and their works. Bold and italicized terms refer to function names and specific code terms in my project. Words underlined come from the Ubiquitous Language. Why write a logbook? The goal of this article series is to document my journey with DDD by sharing each step of my learning process and project creation. Through your feedback and discussions, I aim to continue learning and refining my understanding of this fascinating subject. I’ll share my mistakes, the corrections I made, and the reasoning behind my decisions so others can learn from my discoveries (and avoid repeating the same errors!). The “Vision of the Future” sections explain mistakes before I delve into them further in the logbook. Why use DDD? As I began exploring this practice, I discovered its value for project management. The Discovery It all started when I had to learn about DDD for one of my freelance assignments. I purchased Domain-Driven Design by Eric Evans (the creator of DDD), but the book ended up sitting on my shelf unread after I was hired without needing to know more about it. Later, during a downtime between contracts, I decided to revisit the book, intrigued by its content. As I read, I found the concept far more complex than anything I’d encountered before. However, the more I engaged with it, the more I realized how fascinating it was as a way to design software. The deeper I went, the more excited I became to try this method—it brought a new sense of purpose to software creation. I finished the book in its entirety, taking notes on the key aspects to keep handy. After a month, I had nearly as many questions as answers. To deepen my understanding, I turned to other readings, including Advanced Web Application Architecture by Matthias Noback. While not specifically focused on DDD, this book provided a more practical perspective. Armed with these insights, I felt ready to develop my first DDD project. While working on this project, I also read Implementing Domain-Driven Design by Vaughn Vernon, which further enhanced my approach to DDD. Ubiquitous Language A key concept in DDD, the Ubiquitous Language refers to the terms related to the business domain. It lies at the heart of the system and should be developed through collaboration between developers and domain experts. All features derive from the Ubiquitous Language, and the code must reflect it. My First Project Using Domain-Driven Design To practice DDD, I decided to create an API to catalog the wines I drink, allowing users to record, view (via a mobile app to be developed later), and create tasting notes. The only thing left was to find a name—Des amis, du vin (Friends, Wine) came to me naturally. Domain Vision Statement Before starting the project, I followed the practice recommended by Eric Evans: writing a Domain Vision Statement. What is a Domain Vision Statement? A Domain Vision Statement serves as a guide to keep the development team aligned in the same direction while refining the model and code. To create one, write a brief description of the Core Domain and the value it provides. Avoid emphasizing what sets this Domain apart from others; instead, show how the model serves and balances diverse interests. This document should be written as early as possible and revised with every new round of feedback. For My Project Here is the initial version, which focuses solely on the primary features: A bottle includes a name, domain name, type (white, red, rosé, champagne, sparkling red, sparkling white), year, grape variety, country, price, rating, notes, photo, and the date it was added. The functionalities to include are creating, modifying, and deleting a bottle with all its details, as well as searching based on various criteria (wine name, domain name, type, date added/tasted, vintage year, rating). Vision of the Future At this point, I didn’t fully grasp the concept of the Core Domain and only documented the primary features. Nevertheless, I want to share the definitions of the Core Domain and the different Subdomains before detailing them further in an upcoming article. Core Domain and Subdomains The Core Domain is where the most value should be concentrated. It’s essential to identify the central domain and provide a way to distinguish it from the supporting layers and surrounding code. The Core Domain should deliver the greatest value and introduce meaningful concepts. It may consist of multiple Bounded Contexts. A Subdomain represents a smaller part of the domain that can be broken into modules to separate concerns. Subdomains are categorized as follows: Supporting Subdomains: These are important for the business but less critical than the Core Domain. They are created because they provide unique value. Generic Subdomains: These are generic areas with no specific business value. Vision of the Future In my case, the Core Domain is creating an inventory of wine bottles. This already represents a lot of information to absorb. If you remember just one thing, let it be the Ubiquitous Language—the central concept in DDD. The Ubiquitous Language is the connection between the business and the technical team, and it is essential that it is reflected in the code. Feel free to leave a comment on this article. Were you already familiar with Domain-Driven Design? Which books and resources helped you get started? See you soon for another episode of this logbook!]]></summary></entry></feed>